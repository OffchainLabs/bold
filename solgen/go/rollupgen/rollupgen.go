// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rollupgen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AssertionInputs is an auto generated low-level Go binding around an user-defined struct.
type AssertionInputs struct {
	BeforeStateData BeforeStateData
	BeforeState     ExecutionState
	AfterState      ExecutionState
}

// AssertionNode is an auto generated low-level Go binding around an user-defined struct.
type AssertionNode struct {
	FirstChildBlock  uint64
	SecondChildBlock uint64
	CreatedAtBlock   uint64
	IsFirstChild     bool
	Status           uint8
	ConfigHash       [32]byte
}

// BeforeStateData is an auto generated low-level Go binding around an user-defined struct.
type BeforeStateData struct {
	PrevPrevAssertionHash [32]byte
	SequencerBatchAcc     [32]byte
	ConfigData            ConfigData
}

// Config is an auto generated low-level Go binding around an user-defined struct.
type Config struct {
	ConfirmPeriodBlocks            uint64
	StakeToken                     common.Address
	BaseStake                      *big.Int
	WasmModuleRoot                 [32]byte
	Owner                          common.Address
	LoserStakeEscrow               common.Address
	ChainId                        *big.Int
	GenesisBlockNum                uint64
	MiniStakeValue                 *big.Int
	SequencerInboxMaxTimeVariation ISequencerInboxMaxTimeVariation
	LayerZeroBlockEdgeHeight       *big.Int
	LayerZeroBigStepEdgeHeight     *big.Int
	LayerZeroSmallStepEdgeHeight   *big.Int
	AnyTrustFastConfirmer          common.Address
}

// ConfigData is an auto generated low-level Go binding around an user-defined struct.
type ConfigData struct {
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	NextInboxPosition   uint64
}

// ContractDependencies is an auto generated low-level Go binding around an user-defined struct.
type ContractDependencies struct {
	Bridge                 common.Address
	SequencerInbox         common.Address
	Inbox                  common.Address
	Outbox                 common.Address
	RollupEventInbox       common.Address
	ChallengeManager       common.Address
	RollupAdminLogic       common.Address
	RollupUserLogic        common.Address
	ValidatorUtils         common.Address
	ValidatorWalletCreator common.Address
}

// ExecutionState is an auto generated low-level Go binding around an user-defined struct.
type ExecutionState struct {
	GlobalState   GlobalState
	MachineStatus uint8
}

// GlobalState is an auto generated low-level Go binding around an user-defined struct.
type GlobalState struct {
	Bytes32Vals [2][32]byte
	U64Vals     [2]uint64
}

// IRollupCoreStaker is an auto generated low-level Go binding around an user-defined struct.
type IRollupCoreStaker struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}

// ISequencerInboxMaxTimeVariation is an auto generated low-level Go binding around an user-defined struct.
type ISequencerInboxMaxTimeVariation struct {
	DelayBlocks   *big.Int
	FutureBlocks  *big.Int
	DelaySeconds  *big.Int
	FutureSeconds *big.Int
}

// AssertionNodeLibMetaData contains all meta data concerning the AssertionNodeLib contract.
var AssertionNodeLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d589afbac22debcbeac0f89dc8976d98fb9dd398370ad67473dc8e69b819483964736f6c63430008110033",
}

// AssertionNodeLibABI is the input ABI used to generate the binding from.
// Deprecated: Use AssertionNodeLibMetaData.ABI instead.
var AssertionNodeLibABI = AssertionNodeLibMetaData.ABI

// AssertionNodeLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AssertionNodeLibMetaData.Bin instead.
var AssertionNodeLibBin = AssertionNodeLibMetaData.Bin

// DeployAssertionNodeLib deploys a new Ethereum contract, binding an instance of AssertionNodeLib to it.
func DeployAssertionNodeLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AssertionNodeLib, error) {
	parsed, err := AssertionNodeLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AssertionNodeLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AssertionNodeLib{AssertionNodeLibCaller: AssertionNodeLibCaller{contract: contract}, AssertionNodeLibTransactor: AssertionNodeLibTransactor{contract: contract}, AssertionNodeLibFilterer: AssertionNodeLibFilterer{contract: contract}}, nil
}

// AssertionNodeLib is an auto generated Go binding around an Ethereum contract.
type AssertionNodeLib struct {
	AssertionNodeLibCaller     // Read-only binding to the contract
	AssertionNodeLibTransactor // Write-only binding to the contract
	AssertionNodeLibFilterer   // Log filterer for contract events
}

// AssertionNodeLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type AssertionNodeLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AssertionNodeLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AssertionNodeLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AssertionNodeLibSession struct {
	Contract     *AssertionNodeLib // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AssertionNodeLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AssertionNodeLibCallerSession struct {
	Contract *AssertionNodeLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// AssertionNodeLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AssertionNodeLibTransactorSession struct {
	Contract     *AssertionNodeLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// AssertionNodeLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type AssertionNodeLibRaw struct {
	Contract *AssertionNodeLib // Generic contract binding to access the raw methods on
}

// AssertionNodeLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AssertionNodeLibCallerRaw struct {
	Contract *AssertionNodeLibCaller // Generic read-only contract binding to access the raw methods on
}

// AssertionNodeLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AssertionNodeLibTransactorRaw struct {
	Contract *AssertionNodeLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAssertionNodeLib creates a new instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLib(address common.Address, backend bind.ContractBackend) (*AssertionNodeLib, error) {
	contract, err := bindAssertionNodeLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLib{AssertionNodeLibCaller: AssertionNodeLibCaller{contract: contract}, AssertionNodeLibTransactor: AssertionNodeLibTransactor{contract: contract}, AssertionNodeLibFilterer: AssertionNodeLibFilterer{contract: contract}}, nil
}

// NewAssertionNodeLibCaller creates a new read-only instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibCaller(address common.Address, caller bind.ContractCaller) (*AssertionNodeLibCaller, error) {
	contract, err := bindAssertionNodeLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibCaller{contract: contract}, nil
}

// NewAssertionNodeLibTransactor creates a new write-only instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibTransactor(address common.Address, transactor bind.ContractTransactor) (*AssertionNodeLibTransactor, error) {
	contract, err := bindAssertionNodeLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibTransactor{contract: contract}, nil
}

// NewAssertionNodeLibFilterer creates a new log filterer instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibFilterer(address common.Address, filterer bind.ContractFilterer) (*AssertionNodeLibFilterer, error) {
	contract, err := bindAssertionNodeLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibFilterer{contract: contract}, nil
}

// bindAssertionNodeLib binds a generic wrapper to an already deployed contract.
func bindAssertionNodeLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AssertionNodeLibABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionNodeLib *AssertionNodeLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionNodeLib.Contract.AssertionNodeLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionNodeLib *AssertionNodeLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.AssertionNodeLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionNodeLib *AssertionNodeLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.AssertionNodeLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionNodeLib *AssertionNodeLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionNodeLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionNodeLib *AssertionNodeLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionNodeLib *AssertionNodeLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.contract.Transact(opts, method, params...)
}

// BridgeCreatorMetaData contains all meta data concerning the BridgeCreator contract.
var BridgeCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeTemplate\",\"outputs\":[{\"internalType\":\"contractBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation\",\"type\":\"tuple\"}],\"name\":\"createBridge\",\"outputs\":[{\"internalType\":\"contractBridge\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractSequencerInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractRollupEventInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inboxTemplate\",\"outputs\":[{\"internalType\":\"contractInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outboxTemplate\",\"outputs\":[{\"internalType\":\"contractOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInboxTemplate\",\"outputs\":[{\"internalType\":\"contractRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInboxTemplate\",\"outputs\":[{\"internalType\":\"contractSequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerInboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rollupEventInboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outboxTemplate\",\"type\":\"address\"}],\"name\":\"updateTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a3361018c565b604051610026906101dc565b604051809103906000f080158015610042573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905560405161006f906101ea565b604051809103906000f08015801561008b573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b03929092169190911790556040516100b8906101f8565b604051809103906000f0801580156100d4573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b039290921691909117905560405161010190610206565b604051809103906000f08015801561011d573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b039290921691909117905560405161014a90610214565b604051809103906000f080158015610166573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055610222565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6116d38062001a1983390190565b61229280620030ec83390190565b6127cf806200537e83390190565b6104ad8062007b4d83390190565b6113ae8062007ffa83390190565b6117e780620002326000396000f3fe60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c806395fd089f116200006e57806395fd089f146200015e578063ae583c031462000172578063e6027a871462000186578063f2fde38b146200019a578063fc6a2ed014620001b157600080fd5b80632147e58e14620000b05780636c6e47c014620000c9578063715018a6146200011f5780637ba0e85714620001295780638da5cb5b146200014c575b600080fd5b620000c7620000c136600462000800565b620001c5565b005b620000e0620000da36600462000870565b62000255565b604080516001600160a01b03968716815294861660208601529285169284019290925283166060830152909116608082015260a0015b60405180910390f35b620000c76200068e565b6003546200013d906001600160a01b031681565b6040516200011691906200091f565b6000546001600160a01b03166200013d565b6001546200013d906001600160a01b031681565b6004546200013d906001600160a01b031681565b6002546200013d906001600160a01b031681565b620000c7620001ab36600462000933565b620006a6565b6005546200013d906001600160a01b031681565b620001cf62000729565b600180546001600160a01b03199081166001600160a01b0388811691909117909255600280548216878416179055600380548216868416179055600480548216858416179055600580549091169183169190911790556040517fc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b90600090a15050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905281908190819081906001546040516001600160a01b03909116908a90620002ad90620007d5565b620002ba92919062000958565b604051809103906000f080158015620002d7573d6000803e3d6000fd5b506001600160a01b0390811660208301526002546040519116908a90620002fe90620007d5565b6200030b92919062000958565b604051809103906000f08015801562000328573d6000803e3d6000fd5b506001600160a01b0390811660408084019190915260035490519116908a906200035290620007d5565b6200035f92919062000958565b604051809103906000f0801580156200037c573d6000803e3d6000fd5b506001600160a01b0390811660608301526004546040519116908a90620003a390620007d5565b620003b092919062000958565b604051809103906000f080158015620003cd573d6000803e3d6000fd5b506001600160a01b0390811660808301526005546040519116908a90620003f490620007d5565b6200040192919062000958565b604051809103906000f0801580156200041e573d6000803e3d6000fd5b506001600160a01b0390811660a0830152602082015160405163189acdbd60e31b815291169063c4d66de8906200045a908b906004016200091f565b600060405180830381600087803b1580156200047557600080fd5b505af11580156200048a573d6000803e3d6000fd5b5050506040808301516020808501518351630fbd495960e11b81526001600160a01b0391821660048201528c516024820152918c01516044830152928b0151606482015260608b0151608482015291169150631f7a92b29060a401600060405180830381600087803b1580156200050057600080fd5b505af115801562000515573d6000803e3d6000fd5b50505060608201516020830151604080850151905163485cc95560e01b81526001600160a01b03928316600482015290821660248201529116915063485cc95590604401600060405180830381600087803b1580156200057457600080fd5b505af115801562000589573d6000803e3d6000fd5b5050505080608001516001600160a01b031663c4d66de882602001516040518263ffffffff1660e01b8152600401620005c391906200091f565b600060405180830381600087803b158015620005de57600080fd5b505af1158015620005f3573d6000803e3d6000fd5b505050508060a001516001600160a01b031663c4d66de882602001516040518263ffffffff1660e01b81526004016200062d91906200091f565b600060405180830381600087803b1580156200064857600080fd5b505af11580156200065d573d6000803e3d6000fd5b50505050602081015160408201516060830151608084015160a090940151929c919b50995091975095509350505050565b6200069862000729565b620006a4600062000785565b565b620006b062000729565b6001600160a01b0381166200071b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620007268162000785565b50565b6000546001600160a01b03163314620006a45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000712565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e30806200098283390190565b80356001600160a01b0381168114620007fb57600080fd5b919050565b600080600080600060a086880312156200081957600080fd5b6200082486620007e3565b94506200083460208701620007e3565b93506200084460408701620007e3565b92506200085460608701620007e3565b91506200086460808701620007e3565b90509295509295909350565b600080600083850360c08112156200088757600080fd5b6200089285620007e3565b9350620008a260208601620007e3565b92506080603f1982011215620008b757600080fd5b506040516080810181811067ffffffffffffffff82111715620008ea57634e487b7160e01b600052604160045260246000fd5b806040525060408501358152606085013560208201526080850135604082015260a08501356060820152809150509250925092565b6001600160a01b0391909116815260200190565b6000602082840312156200094657600080fd5b6200095182620007e3565b9392505050565b6001600160a01b039283168152911660208201526060604082018190526000908201526080019056fe608060405260405162000e3038038062000e30833981016040819052620000269162000487565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ba565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b6200022e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000e0960279139620002f8565b9392505050565b60006200018060008051602062000de983398151915260001b620003de60201b620001ea1760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000de983398151915260001b620003de60201b620001ea1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200025a1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620001ea1760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000567565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f1919062000585565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b50506000910152565b6000806000606084860312156200049d57600080fd5b620004a8846200042e565b9250620004b8602085016200042e565b60408501519092506001600160401b0380821115620004d657600080fd5b818601915086601f830112620004eb57600080fd5b8151818111156200050057620005006200044b565b604051601f8201601f19908116603f011681019083821181831017156200052b576200052b6200044b565b816040528281528960208487010111156200054557600080fd5b6200055883602083016020880162000461565b80955050505050509250925092565b600082516200057b81846020870162000461565b9190910192915050565b6020815260008251806020840152620005a681604085016020870162000461565b601f01601f19169190910160400192915050565b61081f80620005ca6000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106b1565b610118565b61005b6100933660046106cc565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106b1565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107c3602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd6104b9565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b610368836104e1565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a81610521565b60606103e98461025a565b6104445760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016102f5565b600080856001600160a01b03168560405161045f9190610773565b600060405180830381855af49150503d806000811461049a576040519150601f19603f3d011682016040523d82523d6000602084013e61049f565b606091505b50915091506104af8282866105ca565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b6104ea81610603565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105865760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d9575081610253565b8251156105e95782518084602001fd5b8160405162461bcd60e51b81526004016102f5919061078f565b61060c8161025a565b61066e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105a9565b80356001600160a01b03811681146106ac57600080fd5b919050565b6000602082840312156106c357600080fd5b61025382610695565b6000806000604084860312156106e157600080fd5b6106ea84610695565b9250602084013567ffffffffffffffff8082111561070757600080fd5b818601915086601f83011261071b57600080fd5b81358181111561072a57600080fd5b87602082850101111561073c57600080fd5b6020830194508093505050509250925092565b60005b8381101561076a578181015183820152602001610752565b50506000910152565b6000825161078581846020870161074f565b9190910192915050565b60208152600082518060208401526107ae81604085016020870161074f565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e728ac68270132d34277bbf3be5409d2bbc23056dfe0d68964e9aec3ca8d7e0864736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122018d6da6e2e0278038be665d8f4534da4520d6fbf8b66f30406a7d8789d5c2f5c64736f6c6343000811003360a06040523060805234801561001457600080fd5b506080516116a36100306000396000610cda01526116a36000f3fe6080604052600436106101345760003560e01c8063ab5d8943116100ab578063d5719dc21161006f578063d5719dc2146103a1578063e76f5c8d146103c1578063e77145f4146101e9578063eca067ad146103e1578063ee35f327146103f6578063f81ff3b31461041657600080fd5b8063ab5d8943146102ef578063ae60bd1314610304578063c4d66de814610341578063cb23bcb514610361578063cee3d7281461038157600080fd5b80635fca4a16116100fd5780635fca4a161461020b5780637a88b1071461022157806386598a56146102415780638db5993b14610281578063945e1147146102945780639e5d4c49146102c157600080fd5b806284120c1461013957806316bf55791461015d578063413b35bd1461017d57806347fb24c5146101c95780634f61f850146101eb575b600080fd5b34801561014557600080fd5b506007545b6040519081526020015b60405180910390f35b34801561016957600080fd5b5061014a61017836600461136d565b610436565b34801561018957600080fd5b506101b961019836600461139e565b6001600160a01b031660009081526002602052604090206001015460ff1690565b6040519015158152602001610154565b3480156101d557600080fd5b506101e96101e43660046113c2565b610457565b005b3480156101f757600080fd5b506101e961020636600461139e565b610753565b34801561021757600080fd5b5061014a600a5481565b34801561022d57600080fd5b5061014a61023c366004611400565b610869565b34801561024d57600080fd5b5061026161025c36600461142c565b6108b1565b604080519485526020850193909352918301526060820152608001610154565b61014a61028f36600461145e565b610a18565b3480156102a057600080fd5b506102b46102af36600461136d565b610a63565b60405161015491906114a5565b3480156102cd57600080fd5b506102e16102dc3660046114b9565b610a8d565b604051610154929190611542565b3480156102fb57600080fd5b506102b4610be5565b34801561031057600080fd5b506101b961031f36600461139e565b6001600160a01b03166000908152600160208190526040909120015460ff1690565b34801561034d57600080fd5b506101e961035c36600461139e565b610c10565b34801561036d57600080fd5b506008546102b4906001600160a01b031681565b34801561038d57600080fd5b506101e961039c3660046113c2565b610dd3565b3480156103ad57600080fd5b5061014a6103bc36600461136d565b6110f9565b3480156103cd57600080fd5b506102b46103dc36600461136d565b611109565b3480156103ed57600080fd5b5060065461014a565b34801561040257600080fd5b506009546102b4906001600160a01b031681565b34801561042257600080fd5b506101e961043136600461136d565b611119565b6007818154811061044657600080fd5b600091825260209091200154905081565b6008546001600160a01b031633146105205760085460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d7919061159a565b9050336001600160a01b0382161461051e57600854604051630739600760e01b81526105159133916001600160a01b039091169084906004016115b7565b60405180910390fd5b505b6001600160a01b0382166000818152600160208181526040928390209182015492518515158152919360ff90931692917f6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf521910160405180910390a28080156105855750825b80610597575080158015610597575082155b156105a25750505050565b821561063057604080518082018252600380548252600160208084018281526001600160a01b038a166000818152928490529582209451855551938201805460ff1916941515949094179093558154908101825591527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b031916909117905561074c565b60038054610640906001906115da565b81548110610650576106506115fb565b6000918252602090912001548254600380546001600160a01b0390931692909190811061067f5761067f6115fb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600001546001600060038560000154815481106106cd576106cd6115fb565b60009182526020808320909101546001600160a01b03168352820192909252604001902055600380548061070357610703611611565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03861682526001908190526040822091825501805460ff191690555b50505b5050565b6008546001600160a01b031633146108135760085460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156107af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d3919061159a565b9050336001600160a01b0382161461081157600854604051630739600760e01b81526105159133916001600160a01b039091169084906004016115b7565b505b600980546001600160a01b0319166001600160a01b0383161790556040517f8c1e6003ed33ca6748d4ad3dd4ecc949065c89dceb31fdf546a5289202763c6a9061085e9083906114a5565b60405180910390a150565b6009546000906001600160a01b03163314610899573360405163223e13c160e21b815260040161051591906114a5565b6108a8600d84434248876111de565b90505b92915050565b6009546000908190819081906001600160a01b031633146108e7573360405163223e13c160e21b815260040161051591906114a5565b85600a54141580156108f857508515155b80156109055750600a5415155b1561093157600a5460405163e2051feb60e01b8152600481019190915260248101879052604401610515565b600a8590556007549350831561096f5760078054610951906001906115da565b81548110610961576109616115fb565b906000526020600020015492505b86156109a05760066109826001896115da565b81548110610992576109926115fb565b906000526020600020015491505b60408051602081018590529081018990526060810183905260800160408051601f198184030181529190528051602090910120600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018190559398929750909550919350915050565b3360009081526001602081905260408220015460ff16610a4d573360405163b6c60ea360e01b815260040161051591906114a5565b610a5b8484434248876111de565b949350505050565b60048181548110610a7357600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526002602052604081206001015460609060ff16610ac557336040516332ea82ab60e01b815260040161051591906114a5565b8215801590610adc57506001600160a01b0386163b155b15610afc578560405163b5cf5b8f60e01b815260040161051591906114a5565b600580546001600160a01b0319811633179091556040516001600160a01b03918216918816908790610b319088908890611627565b60006040518083038185875af1925050503d8060008114610b6e576040519150601f19603f3d011682016040523d82523d6000602084013e610b73565b606091505b50600580546001600160a01b0319166001600160a01b038581169190911790915560405192955090935088169033907f2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d46690610bd3908a908a908a90611637565b60405180910390a35094509492505050565b6005546000906001600160a01b03166002600160a01b03198101610c0b57600091505090565b919050565b600054610100900460ff1615808015610c305750600054600160ff909116105b80610c4a5750303b158015610c4a575060005460ff166001145b610cad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610515565b6000805460ff191660011790558015610cd0576000805461ff0019166101001790555b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d5d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610515565b600580546001600160a01b036001600160a01b0319918216811790925560088054909116918416919091179055801561074f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6008546001600160a01b03163314610e935760085460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e53919061159a565b9050336001600160a01b03821614610e9157600854604051630739600760e01b81526105159133916001600160a01b039091169084906004016115b7565b505b6002600160a01b03196001600160a01b03831601610ec6578160405163077abed160e41b815260040161051591906114a5565b6001600160a01b038216600081815260026020908152604091829020600181015492518515158152909360ff90931692917f49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa910160405180910390a2808015610f2c5750825b80610f3e575080158015610f3e575082155b15610f495750505050565b8215610fd857604080518082018252600480548252600160208084018281526001600160a01b038a16600081815260029093529582209451855551938201805460ff1916941515949094179093558154908101825591527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916909117905561074c565b60048054610fe8906001906115da565b81548110610ff857610ff86115fb565b6000918252602090912001548254600480546001600160a01b03909316929091908110611027576110276115fb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160000154600260006004856000015481548110611075576110756115fb565b60009182526020808320909101546001600160a01b0316835282019290925260400190205560048054806110ab576110ab611611565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03861682526002905260408120908155600101805460ff1916905550505050565b6006818154811061044657600080fd5b60038181548110610a7357600080fd5b6008546001600160a01b031633146111d95760085460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015611175573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611199919061159a565b9050336001600160a01b038216146111d757600854604051630739600760e01b81526105159133916001600160a01b039091169084906004016115b7565b505b600a55565b600654604080516001600160f81b031960f88a901b166020808301919091526bffffffffffffffffffffffff1960608a901b1660218301526001600160c01b031960c089811b8216603585015288901b16603d830152604582018490526065820186905260858083018690528351808403909101815260a59092019092528051910120600091906000821561129857600661127a6001856115da565b8154811061128a5761128a6115fb565b906000526020600020015490505b6040805160208082018490528183018590528251808303840181526060830180855281519190920120600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f015533905260ff8c1660808201526001600160a01b038b1660a082015260c0810187905260e0810188905267ffffffffffffffff89166101008201529051829185917f5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1918190036101200190a3509098975050505050505050565b60006020828403121561137f57600080fd5b5035919050565b6001600160a01b038116811461139b57600080fd5b50565b6000602082840312156113b057600080fd5b81356113bb81611386565b9392505050565b600080604083850312156113d557600080fd5b82356113e081611386565b9150602083013580151581146113f557600080fd5b809150509250929050565b6000806040838503121561141357600080fd5b823561141e81611386565b946020939093013593505050565b6000806000806080858703121561144257600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561147357600080fd5b833560ff8116811461148457600080fd5b9250602084013561149481611386565b929592945050506040919091013590565b6001600160a01b0391909116815260200190565b600080600080606085870312156114cf57600080fd5b84356114da81611386565b935060208501359250604085013567ffffffffffffffff808211156114fe57600080fd5b818701915087601f83011261151257600080fd5b81358181111561152157600080fd5b88602082850101111561153357600080fd5b95989497505060200194505050565b821515815260006020604081840152835180604085015260005b818110156115785785810183015185820160600152820161155c565b506000606082860101526060601f19601f830116850101925050509392505050565b6000602082840312156115ac57600080fd5b81516113bb81611386565b6001600160a01b0393841681529183166020830152909116604082015260600190565b818103818111156108ab57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b8183823760009101908152919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f191601019291505056fea2646970667358221220555f8556ee332946d2ac746435e6c507b26f6b26bd8e17f41883846ccb7503e564736f6c6343000811003360c0604052306080524660a05234801561001857600080fd5b5060805160a05161225461003e6000396000610c270152600061040901526122546000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638f111f3c116100b8578063d9dd67ab1161007c578063d9dd67ab146102e8578063e0bc9729146102fb578063e5a358c81461030e578063e78cea9214610332578063ebea461d14610345578063f19815781461037b57600080fd5b80638f111f3c1461027c57806396cc5c781461028f578063b31761f814610297578063cb23bcb5146102aa578063d1ce8da8146102d557600080fd5b80636e7df3e71161010a5780636e7df3e7146101c55780636f12b0c9146101d8578063715ea34b146101eb57806371c3e6fe1461023d5780637fa3a40e14610260578063844208601461026957600080fd5b806306f13056146101475780631637be48146101625780631f7a92b214610195578063258f0495146101aa57806327957a49146101bd575b600080fd5b61014f61038e565b6040519081526020015b60405180910390f35b610185610170366004611ab4565b60009081526008602052604090205460ff1690565b6040519015158152602001610159565b6101a86101a3366004611ae5565b6103ff565b005b61014f6101b8366004611ab4565b61059e565b61014f602881565b6101a86101d3366004611b34565b610609565b6101a86101e6366004611bb5565b610700565b61021e6101f9366004611ab4565b60086020526000908152604090205460ff81169061010090046001600160401b031682565b6040805192151583526001600160401b03909116602083015201610159565b61018561024b366004611c1f565b60036020526000908152604090205460ff1681565b61014f60005481565b6101a8610277366004611ab4565b6108e0565b6101a861028a366004611c43565b610a24565b6101a8610c24565b6101a86102a5366004611cbf565b610c9a565b6002546102bd906001600160a01b031681565b6040516001600160a01b039091168152602001610159565b6101a86102e3366004611d32565b610d8b565b61014f6102f6366004611ab4565b610fc4565b6101a8610309366004611c43565b611038565b610319600160fe1b81565b6040516001600160f81b03199091168152602001610159565b6001546102bd906001600160a01b031681565b60045460055460065460075461035b9392919084565b604080519485526020850193909352918301526060820152608001610159565b6101a8610389366004611d73565b61118d565b600154604080516221048360e21b815290516000926001600160a01b0316916284120c9160048083019260209291908290030181865afa1580156103d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa9190611de3565b905090565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104915760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b6001546001600160a01b0316156104bb57604051633bcd329760e21b815260040160405180910390fd5b6001600160a01b0382166104e257604051631ad0f74360e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384169081179091556040805163cb23bcb560e01b8152905163cb23bcb5916004808201926020929091908290030181865afa15801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f9190611dfc565b600280546001600160a01b0319166001600160a01b03929092169190911790558035600455602081013560055560408101356006556060013560075550565b600081815260086020908152604080832081518083019092525460ff81161515825261010090046001600160401b03169181018290529082036105f65760405162f20c5d60e01b815260048101849052602401610488565b602001516001600160401b031692915050565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106809190611dfc565b6001600160a01b0316336001600160a01b0316146106c257600254604051631194af8760e11b81526104889133916001600160a01b0390911690600401611e19565b6001600160a01b038216600090815260036020526040808220805460ff1916841515179055516001916000805160206121ff83398151915291a25050565b8060005a90503332146107265760405163feb3d07160e01b815260040160405180910390fd5b3360009081526003602052604090205460ff1661075657604051632dd9fc9760e01b815260040160405180910390fd5b600080610764888888611543565b9092509050600080808061077b868b8d84806116b6565b93509350935093508c84146107ad5760405163ac7411c960e01b815260048101859052602481018e9052604401610488565b80838e6000805160206121df833981519152856000548a60006040516107d69493929190611e33565b60405180910390a4505050506001600160a01b0384161591506108d7905057366000602061080583601f611ebd565b61080f9190611ed0565b905061020061081f600283611fd6565b6108299190611ed0565b610834826006611fe5565b61083e9190611ebd565b6108489084611ebd565b925033321461085657600091505b836001600160a01b031663e3db8a49335a6108719087611ffc565b856040518463ffffffff1660e01b81526004016108909392919061200f565b6020604051808303816000875af11580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d39190612030565b5050505b50505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109579190611dfc565b6001600160a01b0316336001600160a01b03161461099957600254604051631194af8760e11b81526104889133916001600160a01b0390911690600401611e19565b60008181526008602052604090205460ff166109ca5760405162f20c5d60e01b815260048101829052602401610488565b600081815260086020526040808220805460ff191690555182917f5cb4218b272fd214168ac43e90fb4d05d6c36f0b17ffb4c2dd07c234d744eb2a91a26040516003906000805160206121ff83398151915290600090a250565b8260005a9050333214610a4a5760405163feb3d07160e01b815260040160405180910390fd5b3360009081526003602052604090205460ff16610a7a57604051632dd9fc9760e01b815260040160405180910390fd5b600080610a888a8a8a611543565b90925090508a81838b8b8a8a6000808080610aa689888a89896116b6565b93509350935093508a8414158015610ac057506000198b14155b15610ae85760405163ac7411c960e01b815260048101859052602481018c9052604401610488565b8083856000805160206121df833981519152856000548f6000604051610b119493929190611e33565b60405180910390a4505050506001600160a01b038b16159850610c19975050505050505050573660006020610b4783601f611ebd565b610b519190611ed0565b9050610200610b61600283611fd6565b610b6b9190611ed0565b610b76826006611fe5565b610b809190611ebd565b610b8a9084611ebd565b9250333214610b9857600091505b836001600160a01b031663e3db8a49335a610bb39087611ffc565b856040518463ffffffff1660e01b8152600401610bd29392919061200f565b6020604051808303816000875af1158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c159190612030565b5050505b505050505050505050565b467f000000000000000000000000000000000000000000000000000000000000000003610c6457604051635180dd8360e11b815260040160405180910390fd5b60408051608081018252600180825260208201819052918101829052606001819052600481905560058190556006819055600755565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190611dfc565b6001600160a01b0316336001600160a01b031614610d5357600254604051631194af8760e11b81526104889133916001600160a01b0390911690600401611e19565b805160045560208101516005556040808201516006556060820151600755516000906000805160206121ff833981519152908290a250565b600260009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e029190611dfc565b6001600160a01b0316336001600160a01b031614610e4457600254604051631194af8760e11b81526104889133916001600160a01b0390911690600401611e19565b60008282604051610e5692919061204d565b604051908190038120607f60f91b6020830152602182015260410160408051601f1981840301815291905280516020909101209050600160ff1b8118620100008310610eda5760405162461bcd60e51b81526020600482015260136024820152726b657973657420697320746f6f206c6172676560681b6044820152606401610488565b60008181526008602052604090205460ff1615610f0d57604051637d17eeed60e11b815260048101829052602401610488565b60408051808201825260018152436001600160401b0390811660208084019182526000868152600890915284902092518354915168ffffffffffffffffff1990921690151568ffffffffffffffff0019161761010091909216021790555181907fabca9b7986bc22ad0160eb0cb88ae75411eacfba4052af0b457a9335ef65572290610f9c908790879061205d565b60405180910390a26040516002906000805160206121ff83398151915290600090a250505050565b6001546040516316bf557960e01b8152600481018390526000916001600160a01b0316906316bf557990602401602060405180830381865afa15801561100e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110329190611de3565b92915050565b8260005a3360009081526003602052604090205490915060ff1615801561106a57506002546001600160a01b03163314155b1561108857604051632dd9fc9760e01b815260040160405180910390fd5b6000806110968a8a8a611543565b909250905060008b82848b8a8a8680806110b387878388886116b6565b929c5090945092509050888a148015906110cf57506000198914155b156110f75760405163ac7411c960e01b8152600481018b9052602481018a9052604401610488565b80838b6000805160206121df833981519152856000548d60016040516111209493929190611e33565b60405180910390a4505050505050505050807ffe325ca1efe4c5c1062c981c3ee74b781debe4ea9440306a96d2a55759c66c208c8c60405161116392919061205d565b60405180910390a25050506001600160a01b03821615610c19573660006020610b4783601f611ebd565b60005486116111af57604051633eb9f37d60e11b815260040160405180910390fd5b600061125f86846111c360208901896120a2565b6111d360408a0160208b016120a2565b6111de60018d611ffc565b6040805160f89690961b6001600160f81b03191660208088019190915260609590951b6001600160601b031916602187015260c093841b6001600160c01b031990811660358801529290931b909116603d85015260458401526065830188905260858084018790528151808503909101815260a59093019052815191012090565b600454909150439061127460208801886120a2565b6001600160401b03166112879190611ebd565b106112a55760405163ad3515d960e01b815260040160405180910390fd5b60065442906112ba60408801602089016120a2565b6001600160401b03166112cd9190611ebd565b106112eb5760405163c76d17e560e01b815260040160405180910390fd5b60006001881115611374576001546001600160a01b031663d5719dc261131260028b611ffc565b6040518263ffffffff1660e01b815260040161133091815260200190565b602060405180830381865afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190611de3565b90505b60408051602080820184905281830185905282518083038401815260609092019092528051910120600180546001600160a01b03169063d5719dc2906113ba908c611ffc565b6040518263ffffffff1660e01b81526004016113d891815260200190565b602060405180830381865afa1580156113f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114199190611de3565b14611437576040516313947fd760e01b815260040160405180910390fd5b6000806114438a611926565b9150915060008a90506000600160009054906101000a90046001600160a01b03166001600160a01b0316635fca4a166040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c59190611de3565b9050600080548d836114d79190611ebd565b6114e19190611ffc565b90506000806000806114f78988600089896116b6565b93509350935093508083856000805160206121df833981519152856000548d60026040516115289493929190611e33565b60405180910390a45050505050505050505050505050505050565b600061154d611a8d565b8484600061155c826028611ebd565b90506201cccc81111561158e57604051634634691b60e01b8152600481018290526201cccc6024820152604401610488565b81158015906115c65750600160fe1b8084846000816115af576115af61208c565b9050013560f81c60f81b166001600160f81b031916145b156115e457604051631f97007f60e01b815260040160405180910390fd5b602182108015906116125750828260008181106116035761160361208c565b90910135600160ff1b16151590505b156116665760006116276021600185876120cb565b611630916120f5565b60008181526008602052604090205490915060ff166116645760405162f20c5d60e01b815260048101829052602401610488565b505b60008061167288611952565b915091506000828b8b60405160200161168d93929190612137565b60408051808303601f1901815291905280516020909101209b919a509098505050505050505050565b6000806000806000548810156116df57604051633eb9f37d60e11b815260040160405180910390fd5b600160009054906101000a90046001600160a01b03166001600160a01b031663eca067ad6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117569190611de3565b8811156117765760405163925f8bd360e01b815260040160405180910390fd5b60015460405163432cc52b60e11b8152600481018b9052602481018a905260448101889052606481018790526001600160a01b03909116906386598a56906084016080604051808303816000875af11580156117d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fa919061215f565b60008c905592965090945092509050861561191a576040805142602082015233606081901b6001600160601b03191692820192909252605481018b90526074810186905248609482015260009060b40160408051808303601f190181529082905260015481516020830120637a88b10760e01b84526001600160a01b0386811660048601526024850191909152919350600092911690637a88b107906044016020604051808303816000875af11580156118b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118dc9190611de3565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b8360405161190e9190612195565b60405180910390a25050505b95509550955095915050565b6000611930611a8d565b60008061193c85611952565b8151602090920191909120969095509350505050565b606061195c611a8d565b60006119666119f9565b905060008160000151826020015183604001518460600151886040516020016119ce95949392919060c095861b6001600160c01b0319908116825294861b8516600882015292851b8416601084015290841b8316601883015290921b16602082015260280190565b604051602081830303815290604052905060288151146119f0576119f06121c8565b94909350915050565b611a01611a8d565b611a09611a8d565b600654421115611a2c57600654611a209042611ffc565b6001600160401b031681525b600754611a399042611ebd565b6001600160401b03166020820152600454431115611a6d57600454611a5e9043611ffc565b6001600160401b031660408201525b600554611a7a9043611ebd565b6001600160401b03166060820152919050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b600060208284031215611ac657600080fd5b5035919050565b6001600160a01b0381168114611ae257600080fd5b50565b60008082840360a0811215611af957600080fd5b8335611b0481611acd565b92506080601f1982011215611b1857600080fd5b506020830190509250929050565b8015158114611ae257600080fd5b60008060408385031215611b4757600080fd5b8235611b5281611acd565b91506020830135611b6281611b26565b809150509250929050565b60008083601f840112611b7f57600080fd5b5081356001600160401b03811115611b9657600080fd5b602083019150836020828501011115611bae57600080fd5b9250929050565b600080600080600060808688031215611bcd57600080fd5b8535945060208601356001600160401b03811115611bea57600080fd5b611bf688828901611b6d565b909550935050604086013591506060860135611c1181611acd565b809150509295509295909350565b600060208284031215611c3157600080fd5b8135611c3c81611acd565b9392505050565b600080600080600080600060c0888a031215611c5e57600080fd5b8735965060208801356001600160401b03811115611c7b57600080fd5b611c878a828b01611b6d565b909750955050604088013593506060880135611ca281611acd565b969995985093969295946080840135945060a09093013592915050565b600060808284031215611cd157600080fd5b604051608081018181106001600160401b0382111715611d0157634e487b7160e01b600052604160045260246000fd5b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b60008060208385031215611d4557600080fd5b82356001600160401b03811115611d5b57600080fd5b611d6785828601611b6d565b90969095509350505050565b60008060008060008060e08789031215611d8c57600080fd5b86359550602087013560ff81168114611da457600080fd5b94506080870188811115611db757600080fd5b60408801945035925060a0870135611dce81611acd565b8092505060c087013590509295509295509295565b600060208284031215611df557600080fd5b5051919050565b600060208284031215611e0e57600080fd5b8151611c3c81611acd565b6001600160a01b0392831681529116602082015260400190565b600060e0820190508582528460208301526001600160401b038085511660408401528060208601511660608401528060408601511660808401528060608601511660a08401525060038310611e9857634e487b7160e01b600052602160045260246000fd5b8260c083015295945050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561103257611032611ea7565b600082611eed57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115611f2d578160001904821115611f1357611f13611ea7565b80851615611f2057918102915b93841c9390800290611ef7565b509250929050565b600082611f4457506001611032565b81611f5157506000611032565b8160018114611f675760028114611f7157611f8d565b6001915050611032565b60ff841115611f8257611f82611ea7565b50506001821b611032565b5060208310610133831016604e8410600b8410161715611fb0575081810a611032565b611fba8383611ef2565b8060001904821115611fce57611fce611ea7565b029392505050565b6000611c3c60ff841683611f35565b808202811582820484141761103257611032611ea7565b8181038181111561103257611032611ea7565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020828403121561204257600080fd5b8151611c3c81611b26565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156120b457600080fd5b81356001600160401b0381168114611c3c57600080fd5b600080858511156120db57600080fd5b838611156120e857600080fd5b5050820193919092039150565b8035602083101561103257600019602084900360031b1b1692915050565b60005b8381101561212e578181015183820152602001612116565b50506000910152565b60008451612149818460208901612113565b8201838582376000930192835250909392505050565b6000806000806080858703121561217557600080fd5b505082516020840151604085015160609095015191969095509092509050565b60208152600082518060208401526121b4816040850160208701612113565b601f01601f19169190910160400192915050565b634e487b7160e01b600052600160045260246000fdfe7394f4a19a13c7b92b5bb71033245305946ef78452f7b4986ac1390b5df4ebd7ea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456ea26469706673582212202a5296c63316dfab5e857816e0110a6262fdf91c2fe273f6a31773b45d4670a364736f6c6343000811003360c0604052306080524660a05234801561001857600080fd5b5060805160a05161278a6100456000396000611b88015260008181610cca015261158d015261278a6000f3fe60806040526004361061016b5760003560e01c806367ef3ab8116100cc578063babcc5391161007a578063babcc53914610385578063c474d2c5146103b5578063e3de72a5146103d5578063e6bd12cf146103f5578063e78cea9214610408578063ee35f32714610435578063efeadb6d1461045557600080fd5b806367ef3ab8146102ca5780636e6e8a6a146102dd57806370665f14146102f05780638456cb59146103105780638a631aa614610325578063a66b327d14610345578063b75436bb1461036557600080fd5b80633f4ba83a116101295780633f4ba83a1461022d578063439370b114610244578063485cc9551461024c5780635075788b1461026c5780635c975abb1461028c5780635e916758146102a4578063679b6ded146102b757600080fd5b8062f72382146101705780630f4d14e9146101a35780631b871c8d146101b65780631cb763d2146101c95780631fe927cf146101dc57806322bd5c1c146101fc575b600080fd5b34801561017c57600080fd5b5061019061018b366004611e8b565b610475565b6040519081526020015b60405180910390f35b6101906101b1366004611f07565b610595565b6101906101c4366004611f20565b6105f8565b6101906101d7366004611f20565b61066a565b3480156101e857600080fd5b506101906101f7366004611fc4565b6108fe565b34801561020857600080fd5b5060665461021d90600160a01b900460ff1681565b604051901515815260200161019a565b34801561023957600080fd5b50610242610a23565b005b610190610b45565b34801561025857600080fd5b50610242610267366004612005565b610bf9565b34801561027857600080fd5b50610190610287366004611e8b565b610d94565b34801561029857600080fd5b5060335460ff1661021d565b6101906102b236600461203e565b610e3e565b6101906102c5366004611f20565b610ef0565b6101906102d83660046120a7565b610fbc565b6101906102eb366004611f20565b611071565b3480156102fc57600080fd5b5061019061030b366004612119565b6111b1565b34801561031c57600080fd5b506102426112c9565b34801561033157600080fd5b50610190610340366004612166565b6113e8565b34801561035157600080fd5b506101906103603660046121ba565b611490565b34801561037157600080fd5b50610190610380366004611fc4565b6114c8565b34801561039157600080fd5b5061021d6103a03660046121dc565b60676020526000908152604090205460ff1681565b3480156103c157600080fd5b506102426103d03660046121dc565b611583565b3480156103e157600080fd5b506102426103f03660046122e4565b611628565b6101906104033660046120a7565b61188a565b34801561041457600080fd5b50606554610428906001600160a01b031681565b60405161019a91906123a5565b34801561044157600080fd5b50606654610428906001600160a01b031681565b34801561046157600080fd5b506102426104703660046123b9565b611981565b600061047f611b3e565b606654600160a01b900460ff1680156104a857503260009081526067602052604090205460ff16155b156104d15732604051630f51ed7160e41b81526004016104c891906123a5565b60405180910390fd5b6104d9611b86565b6104f657604051635180dd8360e11b815260040160405180910390fd5b3332146105165760405163feb3d07160e01b815260040160405180910390fd5b6001600160401b0388111561053e5760405163107c527b60e01b815260040160405180910390fd5b610589600361054c33611bad565b60008b8b8b8b6001600160a01b03168b8b8b6040516020016105759897969594939291906123d4565b604051602081830303815290604052611bbc565b98975050505050505050565b600061059f611b3e565b606654600160a01b900460ff1680156105c857503260009081526067602052604090205460ff16155b156105e85732604051630f51ed7160e41b81526004016104c891906123a5565b6105f0610b45565b90505b919050565b6000610602611b3e565b606654600160a01b900460ff16801561062b57503260009081526067602052604090205460ff16155b1561064b5732604051630f51ed7160e41b81526004016104c891906123a5565b61065c8a8a8a8a8a8a8a8a8a611071565b9a9950505050505050505050565b6000610674611b3e565b606654600160a01b900460ff16801561069d57503260009081526067602052604090205460ff16155b156106bd5732604051630f51ed7160e41b81526004016104c891906123a5565b33731a9c8182c09f50c8318d769245bea52c32be35bc1461071a5760405162461bcd60e51b81526020600482015260176024820152764e4f545f554e49535741505f4c315f54494d454c4f434b60481b60448201526064016104c8565b6001600160a01b038a16731f98431c8ad98523631ae4a59f267346ea31f984146107825760405162461bcd60e51b81526020600482015260196024820152784e4f545f544f5f554e49535741505f4c325f464143544f525960381b60448201526064016104c8565b61078c8486612430565b6107968a8a612447565b6107a09190612447565b3410156107e8576107b18486612430565b6107bb8a8a612447565b6107c59190612447565b604051631c102d6360e21b815260048101919091523460248201526044016104c8565b6107f187611c48565b156108055761111161111160901b01870196505b61080e86611c48565b156108225761111161111160901b01860195505b84600114806108315750836001145b1561086557338a8a348b8b8b8b8b8b8b6040516307c266e360e01b81526004016104c89b9a9998979695949392919061245a565b60006108718348611490565b90508089101561089e57604051637d6f91c560e11b815260048101829052602481018a90526044016104c8565b6108ef60096108ac33611bad565b8d6001600160a01b03168d348e8e6001600160a01b03168e6001600160a01b03168e8e8e8e90508f8f6040516020016105759b9a999897969594939291906124e3565b9b9a5050505050505050505050565b6000610908611b3e565b606654600160a01b900460ff16801561093157503260009081526067602052604090205460ff16155b156109515732604051630f51ed7160e41b81526004016104c891906123a5565b610959611b86565b156109775760405163c6ea680360e01b815260040160405180910390fd5b3332146109975760405163feb3d07160e01b815260040160405180910390fd5b6201cccc8211156109c757604051634634691b60e01b8152600481018390526201cccc60248201526044016104c8565b60006109ec60033386866040516109df92919061253d565b6040518091039020611c57565b60405190915081907fab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c90600090a290505b92915050565b6065546040805163cb23bcb560e01b815290516000926001600160a01b03169163cb23bcb59160048083019260209291908290030181865afa158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a91919061254d565b9050336001600160a01b03821614610b3a576000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b07919061254d565b9050336001600160a01b03821614610b3857338282604051630739600760e01b81526004016104c89392919061256a565b505b610b42611cfa565b50565b6000610b4f611b3e565b606654600160a01b900460ff168015610b7857503260009081526067602052604090205460ff16155b15610b985732604051630f51ed7160e41b81526004016104c891906123a5565b33610ba281611c48565b80610bad5750323314155b15610bc057503361111161111160901b01015b6040516bffffffffffffffffffffffff19606083901b166020820152346034820152610bf390600c903390605401610575565b91505090565b600054610100900460ff1615808015610c195750600054600160ff909116105b80610c3a5750610c2830611c48565b158015610c3a575060005460ff166001145b610c9d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c8565b6000805460ff191660011790558015610cc0576000805461ff0019166101001790555b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d085760405162461bcd60e51b81526004016104c89061258d565b606580546001600160a01b038086166001600160a01b031990921691909117909155606680546001600160a81b031916918416919091179055610d49611d46565b8015610d8f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000610d9e611b3e565b606654600160a01b900460ff168015610dc757503260009081526067602052604090205460ff16155b15610de75732604051630f51ed7160e41b81526004016104c891906123a5565b6001600160401b03881115610e0f5760405163107c527b60e01b815260040160405180910390fd5b61058960033360008b8b8b8b6001600160a01b03168b8b8b6040516020016105759897969594939291906123d4565b6000610e48611b3e565b606654600160a01b900460ff168015610e7157503260009081526067602052604090205460ff16155b15610e915732604051630f51ed7160e41b81526004016104c891906123a5565b6001600160401b03861115610eb95760405163107c527b60e01b815260040160405180910390fd5b610ee660073360018989896001600160a01b0316348a8a60405160200161057597969594939291906125d9565b9695505050505050565b6000610efa611b3e565b606654600160a01b900460ff168015610f2357503260009081526067602052604090205460ff16155b15610f435732604051630f51ed7160e41b81526004016104c891906123a5565b610f4d8486612430565b610f578a8a612447565b610f619190612447565b341015610f72576107b18486612430565b610f7b87611c48565b15610f8f5761111161111160901b01870196505b610f9886611c48565b1561064b5761111161111160901b018601955061065c8a8a8a8a8a8a8a8a8a611071565b6000610fc6611b3e565b606654600160a01b900460ff168015610fef57503260009081526067602052604090205460ff16155b1561100f5732604051630f51ed7160e41b81526004016104c891906123a5565b6001600160401b038711156110375760405163107c527b60e01b815260040160405180910390fd5b61106660073360008a8a8a8a6001600160a01b0316348b8b6040516020016105759897969594939291906123d4565b979650505050505050565b600061107b611b3e565b606654600160a01b900460ff1680156110a457503260009081526067602052604090205460ff16155b156110c45732604051630f51ed7160e41b81526004016104c891906123a5565b84600114806110d35750836001145b1561110757338a8a348b8b8b8b8b8b8b6040516307c266e360e01b81526004016104c89b9a9998979695949392919061245a565b6001600160401b0385111561112f5760405163107c527b60e01b815260040160405180910390fd5b600061113b8348611490565b90508089101561116857604051637d6f91c560e11b815260048101829052602481018a90526044016104c8565b6108ef6009338d6001600160a01b03168d348e8e6001600160a01b03168e6001600160a01b03168e8e8e8e90508f8f6040516020016105759b9a999897969594939291906124e3565b60006111bb611b3e565b606654600160a01b900460ff1680156111e457503260009081526067602052604090205460ff16155b156112045732604051630f51ed7160e41b81526004016104c891906123a5565b61120c611b86565b61122957604051635180dd8360e11b815260040160405180910390fd5b3332146112495760405163feb3d07160e01b815260040160405180910390fd5b6001600160401b038611156112715760405163107c527b60e01b815260040160405180910390fd5b610ee6600361127f33611bad565b604080516325e1606360e01b60208201526001600160a01b0387168183015281518082038301815260608201909252610575916000918c918c918c916064918d919060800161263c565b6065546040805163cb23bcb560e01b815290516000926001600160a01b03169163cb23bcb59160048083019260209291908290030181865afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611337919061254d565b9050336001600160a01b038216146113e0576000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ad919061254d565b9050336001600160a01b038216146113de57338282604051630739600760e01b81526004016104c89392919061256a565b505b610b42611d75565b60006113f2611b3e565b606654600160a01b900460ff16801561141b57503260009081526067602052604090205460ff16155b1561143b5732604051630f51ed7160e41b81526004016104c891906123a5565b6001600160401b038711156114635760405163107c527b60e01b815260040160405180910390fd5b61106660033360018a8a8a6001600160a01b03168a8a8a60405160200161057597969594939291906125d9565b6000811561149e57816114a0565b485b6114ab846006612430565b6114b790610578612447565b6114c19190612430565b9392505050565b60006114d2611b3e565b606654600160a01b900460ff1680156114fb57503260009081526067602052604090205460ff16155b1561151b5732604051630f51ed7160e41b81526004016104c891906123a5565b611523611b86565b156115415760405163c6ea680360e01b815260040160405180910390fd5b6114c160033385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bbc92505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115cb5760405162461bcd60e51b81526004016104c89061258d565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61038054336001600160a01b03821614610d8f57604051631194af8760e11b81523360048201526001600160a01b03821660248201526044016104c8565b6065546040805163cb23bcb560e01b815290516000926001600160a01b03169163cb23bcb59160048083019260209291908290030181865afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611696919061254d565b9050336001600160a01b0382161461173f576000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170c919061254d565b9050336001600160a01b0382161461173d57338282604051630739600760e01b81526004016104c89392919061256a565b505b81518351146117805760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b60448201526064016104c8565b60005b83518110156118845782818151811061179e5761179e61268e565b6020026020010151606760008684815181106117bc576117bc61268e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555083818151811061180d5761180d61268e565b60200260200101516001600160a01b03167fd9739f45a01ce092c5cdb3d68f63d63d21676b1c6c0b4f9cbc6be4cf5449595a8483815181106118515761185161268e565b602002602001015160405161186a911515815260200190565b60405180910390a28061187c816126a4565b915050611783565b50505050565b6000611894611b3e565b606654600160a01b900460ff1680156118bd57503260009081526067602052604090205460ff16155b156118dd5732604051630f51ed7160e41b81526004016104c891906123a5565b6118e5611b86565b61190257604051635180dd8360e11b815260040160405180910390fd5b3332146119225760405163feb3d07160e01b815260040160405180910390fd5b6001600160401b0387111561194a5760405163107c527b60e01b815260040160405180910390fd5b611066600761195833611bad565b60008a8a8a8a6001600160a01b0316348b8b6040516020016105759897969594939291906123d4565b6065546040805163cb23bcb560e01b815290516000926001600160a01b03169163cb23bcb59160048083019260209291908290030181865afa1580156119cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ef919061254d565b9050336001600160a01b03821614611a98576000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a65919061254d565b9050336001600160a01b03821614611a9657338282604051630739600760e01b81526004016104c89392919061256a565b505b606654600160a01b900460ff16151582151503611ae55760405162461bcd60e51b815260206004820152600b60248201526a1053149150511657d4d15560aa1b60448201526064016104c8565b60668054831515600160a01b0260ff60a01b199091161790556040517f16435b45f7482047f839a6a19d291442627200f52cad2803c595150d0d440eb390611b3290841515815260200190565b60405180910390a15050565b60335460ff1615611b845760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104c8565b565b7f000000000000000000000000000000000000000000000000000000000000000046141590565b61111061111160901b01190190565b60006201cccc82511115611bf2578151604051634634691b60e01b815260048101919091526201cccc60248201526044016104c8565b6000611c0685858580519060200120611c57565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b84604051611c3891906126bd565b60405180910390a2949350505050565b6001600160a01b03163b151590565b6065546000906001600160a01b0316638db5993b348661111161111160901b0187016040516001600160e01b031960e086901b16815260ff90921660048301526001600160a01b031660248201526044810186905260640160206040518083038185885af1158015611ccd573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611cf291906126f0565b949350505050565b611d02611db2565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611d3c91906123a5565b60405180910390a1565b600054610100900460ff16611d6d5760405162461bcd60e51b81526004016104c890612709565b611b84611dfb565b611d7d611b3e565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d2f3390565b60335460ff16611b845760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104c8565b600054610100900460ff16611e225760405162461bcd60e51b81526004016104c890612709565b6033805460ff19169055565b6001600160a01b0381168114610b4257600080fd5b60008083601f840112611e5557600080fd5b5081356001600160401b03811115611e6c57600080fd5b602083019150836020828501011115611e8457600080fd5b9250929050565b600080600080600080600060c0888a031215611ea657600080fd5b8735965060208801359550604088013594506060880135611ec681611e2e565b93506080880135925060a08801356001600160401b03811115611ee857600080fd5b611ef48a828b01611e43565b989b979a50959850939692959293505050565b600060208284031215611f1957600080fd5b5035919050565b60008060008060008060008060006101008a8c031215611f3f57600080fd5b8935611f4a81611e2e565b985060208a0135975060408a0135965060608a0135611f6881611e2e565b955060808a0135611f7881611e2e565b945060a08a0135935060c08a0135925060e08a01356001600160401b03811115611fa157600080fd5b611fad8c828d01611e43565b915080935050809150509295985092959850929598565b60008060208385031215611fd757600080fd5b82356001600160401b03811115611fed57600080fd5b611ff985828601611e43565b90969095509350505050565b6000806040838503121561201857600080fd5b823561202381611e2e565b9150602083013561203381611e2e565b809150509250929050565b60008060008060006080868803121561205657600080fd5b8535945060208601359350604086013561206f81611e2e565b925060608601356001600160401b0381111561208a57600080fd5b61209688828901611e43565b969995985093965092949392505050565b60008060008060008060a087890312156120c057600080fd5b86359550602087013594506040870135935060608701356120e081611e2e565b925060808701356001600160401b038111156120fb57600080fd5b61210789828a01611e43565b979a9699509497509295939492505050565b600080600080600060a0868803121561213157600080fd5b85359450602086013593506040860135925060608601359150608086013561215881611e2e565b809150509295509295909350565b60008060008060008060a0878903121561217f57600080fd5b8635955060208701359450604087013561219881611e2e565b93506060870135925060808701356001600160401b038111156120fb57600080fd5b600080604083850312156121cd57600080fd5b50508035926020909101359150565b6000602082840312156121ee57600080fd5b81356114c181611e2e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612237576122376121f9565b604052919050565b60006001600160401b03821115612258576122586121f9565b5060051b60200190565b803580151581146105f357600080fd5b600082601f83011261228357600080fd5b813560206122986122938361223f565b61220f565b82815260059290921b840181019181810190868411156122b757600080fd5b8286015b848110156122d9576122cc81612262565b83529183019183016122bb565b509695505050505050565b600080604083850312156122f757600080fd5b82356001600160401b038082111561230e57600080fd5b818501915085601f83011261232257600080fd5b813560206123326122938361223f565b82815260059290921b8401810191818101908984111561235157600080fd5b948201945b8386101561237857853561236981611e2e565b82529482019490820190612356565b9650508601359250508082111561238e57600080fd5b5061239b85828601612272565b9150509250929050565b6001600160a01b0391909116815260200190565b6000602082840312156123cb57600080fd5b6114c182612262565b60ff60f81b8960f81b168152876001820152866021820152856041820152846061820152836081820152818360a18301376000910160a101908152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610a1d57610a1d61241a565b80820180821115610a1d57610a1d61241a565b6001600160a01b038c811682528b81166020830152604082018b9052606082018a90526080820189905287811660a0830152861660c082015260e0810185905261010081018490526101406101208201819052810182905260006101608385828501376000838501820152601f909301601f19169091019091019b9a5050505050505050505050565b8b81528a60208201528960408201528860608201528760808201528660a08201528560c08201528460e08201528361010082015260006101208385828501376000929093019092019081529b9a5050505050505050505050565b8183823760009101908152919050565b60006020828403121561255f57600080fd5b81516114c181611e2e565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60ff60f81b8860f81b16815286600182015285602182015284604182015283606182015281836081830137600091016081019081529695505050505050565b60005b8381101561263357818101518382015260200161261b565b50506000910152565b60ff60f81b8860f81b1681528660018201528560218201528460418201528360618201528260818201526000825161267b8160a1850160208701612618565b9190910160a10198975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016126b6576126b661241a565b5060010190565b60208152600082518060208401526126dc816040850160208701612618565b601f01601f19169190910160400192915050565b60006020828403121561270257600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b14572dce118fa2f442ef7670a39d2f53a2ed521f4d0f904dc8885e1098e75ce64736f6c6343000811003360a06040523060805234801561001457600080fd5b5060805161047e61002f600039600060c5015261047e6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063c4d66de814610051578063cb23bcb514610066578063e199be3514610095578063e78cea92146100a8575b600080fd5b61006461005f366004610387565b6100bb565b005b600154610079906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100646100a33660046103ab565b61023e565b600054610079906001600160a01b031681565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361014d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b6000546001600160a01b03161561017757604051633bcd329760e21b815260040160405180910390fd5b6001600160a01b03811661019e57604051631ad0f74360e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040805163cb23bcb560e01b8152905163cb23bcb5916004808201926020929091908290030181865afa1580156101f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021b91906103c4565b600180546001600160a01b0319166001600160a01b039290921691909117905550565b6001546001600160a01b031633146102865760405162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b6044820152606401610144565b60008160405160200161029b91815260200190565b60408051808303601f19018152908290526000805482516020840120638db5993b60e01b8552600b6004860152602485018390526044850152919350916001600160a01b0390911690638db5993b906064016020604051808303816000875af115801561030c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033091906103e1565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b8360405161036291906103fa565b60405180910390a2505050565b6001600160a01b038116811461038457600080fd5b50565b60006020828403121561039957600080fd5b81356103a48161036f565b9392505050565b6000602082840312156103bd57600080fd5b5035919050565b6000602082840312156103d657600080fd5b81516103a48161036f565b6000602082840312156103f357600080fd5b5051919050565b600060208083528351808285015260005b818110156104275785810183015185820160400152820161040b565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220f0778262e2de511e4e15006f21bb2404f2a31f356f394e3dfaa5d318799ed93664736f6c6343000811003360a06040523060805234801561001457600080fd5b5060805161137e6100306000396000610514015261137e6000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639f0c04bf116100925780639f0c04bf146101aa578063a04cee60146101bd578063ae6dead7146101d0578063b0f30537146101f0578063c4d66de8146101f8578063c75184df1461020b578063cb23bcb51461022b578063d5b5cc231461023e578063e78cea921461025e57600080fd5b80627436d3146100fa57806308635a95146101205780631198527114610135578063288e5b101461013c578063465477901461014f5780635a129efe1461015757806372f2a8c71461017a57806380648b02146101825780638515bc6a146101a2575b600080fd5b61010d610108366004610cc1565b610271565b6040519081526020015b60405180910390f35b61013361012e366004610de1565b6102ae565b005b600061010d565b61013361014a366004610ed5565b610321565b61010d61035c565b61016a610165366004610f70565b610390565b6040519015158152602001610117565b61010d6103ad565b61018a6103c8565b6040516001600160a01b039091168152602001610117565b61010d6103ee565b61010d6101b8366004610f89565b61041b565b6101336101cb366004611017565b610460565b61010d6101de366004610f70565b60036020526000908152604090205481565b61010d6104e4565b610133610206366004611039565b61050a565b610213600281565b6040516001600160801b039091168152602001610117565b60005461018a906001600160a01b031681565b61010d61024c366004610f70565b60026020526000908152604090205481565b60015461018a906001600160a01b031681565b60006102a684848460405160200161028b91815260200190565b604051602081830303815290604052805190602001206106e1565b949350505050565b60006102c0898989898989898961041b565b90506103028c8c808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508e92508591506107839050565b6103138a8a8a8a8a8a8a8a8a61088c565b505050505050505050505050565b331561034057604051630e13b69d60e01b815260040160405180910390fd5b61035189898989898989898961088c565b505050505050505050565b6004546000906001600160801b03166002600160801b0319810161038257600091505090565b6001600160801b0316919050565b600080600061039e84610b76565b92509250506102a68282610bb3565b600654600090600181016103c357506000919050565b919050565b6007546000906001600160a01b03166002600160a01b031981016103c357600091505090565b600454600090600160801b90046001600160801b03166002600160801b0319810161038257600091505090565b6000888888888888888860405160200161043c98979695949392919061105d565b60405160208183030381529060405280519060200120905098975050505050505050565b6000546001600160a01b031633146104a557600054604051630e4cf1bf60e21b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b60008281526003602052604080822083905551829184917fb4df3847300f076a369cd76d2314b470a1194d9e8a6bb97f1860aee88a5f67489190a35050565b6005546000906001600160801b03166002600160801b0319810161038257600091505090565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105975760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161049c565b6001600160a01b0381166105be57604051631ad0f74360e01b815260040160405180910390fd5b6001546001600160a01b0316156105e857604051633bcd329760e21b815260040160405180910390fd5b6040805160a0810182526001600160801b038082526020808301829052828401829052600019606084018190526001600160a01b0360809094018490526004818155600580546001600160801b031916909417909355600655600780546001600160a01b03199081168517909155600180549487169490911684179055835163cb23bcb560e01b81529351929363cb23bcb5938184019390918290030181865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be91906110b6565b600080546001600160a01b0319166001600160a01b039290921691909117905550565b825160009061010081111561071457604051637ed6198f60e11b815260048101829052610100602482015260440161049c565b8260005b82811015610779576000878281518110610734576107346110d3565b60200260200101519050816001901b871660000361076057826000528060205260406000209250610770565b8060005282602052604060002092505b50600101610718565b5095945050505050565b6101008351106107ab57825160405163ab6a068360e01b815260040161049c91815260200190565b82516107b89060026111e3565b82106107ef5781835160026107cd91906111e3565b604051630b8a724b60e01b81526004810192909252602482015260440161049c565b60006107fc848484610271565b60008181526003602052604090205490915061082e576040516310e61af960e31b81526004810182905260240161049c565b600080600061083c86610b76565b92509250925061084c8282610bb3565b1561086d57604051639715b8d360e01b81526004810187905260240161049c565b600092835260026020526040909220600190911b909117905550505050565b6000886001600160a01b0316886001600160a01b03167f20af7f3bbfe38132b8900ae295cd9c8d1914be7052d061a511f3f728dab189648c6040516108d391815260200190565b60405180910390a4600060046040518060a00160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152505090506040518060a00160405280886001600160801b03168152602001876001600160801b03168152602001866001600160801b031681526020018b60001b81526020018a6001600160a01b0316815250600460008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a8154816001600160801b0302191690836001600160801b0316021790555060408201518160010160006101000a8154816001600160801b0302191690836001600160801b031602179055506060820151816002015560808201518160030160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050610b04888585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610bc292505050565b805160208201516001600160801b03918216600160801b91831691909102176004556040820151600580546001600160801b03191691909216179055606081015160065560800151600780546001600160a01b0319166001600160a01b03909216919091179055505050505050505050565b6000808080610b8660ff86611205565b90506000610b9560ff87611219565b60008381526002602052604090205492979096509194509092505050565b80821c60011615155b92915050565b600154604051639e5d4c4960e01b815260009182916001600160a01b0390911690639e5d4c4990610bfb90889088908890600401611251565b6000604051808303816000875af1158015610c1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c42919081019061129a565b9150915081610c7457805115610c5b5780518082602001fd5b604051631bb7daad60e11b815260040160405180910390fd5b5050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610cb957610cb9610c7b565b604052919050565b600080600060608486031215610cd657600080fd5b83356001600160401b0380821115610ced57600080fd5b818601915086601f830112610d0157600080fd5b8135602082821115610d1557610d15610c7b565b8160051b9250610d26818401610c91565b828152928401810192818101908a851115610d4057600080fd5b948201945b84861015610d5e57853582529482019490820190610d45565b9a918901359950506040909701359695505050505050565b6001600160a01b0381168114610d8b57600080fd5b50565b80356103c381610d76565b60008083601f840112610dab57600080fd5b5081356001600160401b03811115610dc257600080fd5b602083019150836020828501011115610dda57600080fd5b9250929050565b60008060008060008060008060008060006101208c8e031215610e0357600080fd5b8b356001600160401b0380821115610e1a57600080fd5b818e0191508e601f830112610e2e57600080fd5b813581811115610e3d57600080fd5b8f60208260051b8501011115610e5257600080fd5b60208381019e50909c508e01359a50610e6d60408f01610d8e565b9950610e7b60608f01610d8e565b985060808e0135975060a08e0135965060c08e0135955060e08e013594506101008e0135915080821115610eae57600080fd5b50610ebb8e828f01610d99565b915080935050809150509295989b509295989b9093969950565b60008060008060008060008060006101008a8c031215610ef457600080fd5b8935985060208a0135610f0681610d76565b975060408a0135610f1681610d76565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356001600160401b03811115610f4d57600080fd5b610f598c828d01610d99565b915080935050809150509295985092959850929598565b600060208284031215610f8257600080fd5b5035919050565b60008060008060008060008060e0898b031215610fa557600080fd5b8835610fb081610d76565b97506020890135610fc081610d76565b965060408901359550606089013594506080890135935060a0890135925060c08901356001600160401b03811115610ff757600080fd5b6110038b828c01610d99565b999c989b5096995094979396929594505050565b6000806040838503121561102a57600080fd5b50508035926020909101359150565b60006020828403121561104b57600080fd5b813561105681610d76565b9392505050565b60006bffffffffffffffffffffffff19808b60601b168352808a60601b16601484015250876028830152866048830152856068830152846088830152828460a8840137506000910160a801908152979650505050505050565b6000602082840312156110c857600080fd5b815161105681610d76565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561113a578160001904821115611120576111206110e9565b8085161561112d57918102915b93841c9390800290611104565b509250929050565b60008261115157506001610bbc565b8161115e57506000610bbc565b8160018114611174576002811461117e5761119a565b6001915050610bbc565b60ff84111561118f5761118f6110e9565b50506001821b610bbc565b5060208310610133831016604e8410600b84101617156111bd575081810a610bbc565b6111c783836110ff565b80600019048211156111db576111db6110e9565b029392505050565b60006110568383611142565b634e487b7160e01b600052601260045260246000fd5b600082611214576112146111ef565b500490565b600082611228576112286111ef565b500690565b60005b83811015611248578181015183820152602001611230565b50506000910152565b60018060a01b0384168152826020820152606060408201526000825180606084015261128481608085016020870161122d565b601f01601f191691909101608001949350505050565b600080604083850312156112ad57600080fd5b825180151581146112bd57600080fd5b60208401519092506001600160401b03808211156112da57600080fd5b818501915085601f8301126112ee57600080fd5b81518181111561130057611300610c7b565b611313601f8201601f1916602001610c91565b915080825286602082850101111561132a57600080fd5b61133b81602084016020860161122d565b508092505050925092905056fea264697066735822122025e062f7483a0dd65e672becc129a5ca71c35c3c124ac93cd5b8a370c67a7c3d64736f6c63430008110033",
}

// BridgeCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeCreatorMetaData.ABI instead.
var BridgeCreatorABI = BridgeCreatorMetaData.ABI

// BridgeCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeCreatorMetaData.Bin instead.
var BridgeCreatorBin = BridgeCreatorMetaData.Bin

// DeployBridgeCreator deploys a new Ethereum contract, binding an instance of BridgeCreator to it.
func DeployBridgeCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeCreator, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// BridgeCreator is an auto generated Go binding around an Ethereum contract.
type BridgeCreator struct {
	BridgeCreatorCaller     // Read-only binding to the contract
	BridgeCreatorTransactor // Write-only binding to the contract
	BridgeCreatorFilterer   // Log filterer for contract events
}

// BridgeCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeCreatorSession struct {
	Contract     *BridgeCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCreatorCallerSession struct {
	Contract *BridgeCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// BridgeCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeCreatorTransactorSession struct {
	Contract     *BridgeCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BridgeCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeCreatorRaw struct {
	Contract *BridgeCreator // Generic contract binding to access the raw methods on
}

// BridgeCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCreatorCallerRaw struct {
	Contract *BridgeCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactorRaw struct {
	Contract *BridgeCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeCreator creates a new instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreator(address common.Address, backend bind.ContractBackend) (*BridgeCreator, error) {
	contract, err := bindBridgeCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// NewBridgeCreatorCaller creates a new read-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorCaller(address common.Address, caller bind.ContractCaller) (*BridgeCreatorCaller, error) {
	contract, err := bindBridgeCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorCaller{contract: contract}, nil
}

// NewBridgeCreatorTransactor creates a new write-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeCreatorTransactor, error) {
	contract, err := bindBridgeCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTransactor{contract: contract}, nil
}

// NewBridgeCreatorFilterer creates a new log filterer instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeCreatorFilterer, error) {
	contract, err := bindBridgeCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorFilterer{contract: contract}, nil
}

// bindBridgeCreator binds a generic wrapper to an already deployed contract.
func bindBridgeCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeCreatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.BridgeCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transact(opts, method, params...)
}

// BridgeTemplate is a free data retrieval call binding the contract method 0x95fd089f.
//
// Solidity: function bridgeTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) BridgeTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "bridgeTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeTemplate is a free data retrieval call binding the contract method 0x95fd089f.
//
// Solidity: function bridgeTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) BridgeTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.BridgeTemplate(&_BridgeCreator.CallOpts)
}

// BridgeTemplate is a free data retrieval call binding the contract method 0x95fd089f.
//
// Solidity: function bridgeTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) BridgeTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.BridgeTemplate(&_BridgeCreator.CallOpts)
}

// InboxTemplate is a free data retrieval call binding the contract method 0x7ba0e857.
//
// Solidity: function inboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) InboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "inboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// InboxTemplate is a free data retrieval call binding the contract method 0x7ba0e857.
//
// Solidity: function inboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) InboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.InboxTemplate(&_BridgeCreator.CallOpts)
}

// InboxTemplate is a free data retrieval call binding the contract method 0x7ba0e857.
//
// Solidity: function inboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) InboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.InboxTemplate(&_BridgeCreator.CallOpts)
}

// OutboxTemplate is a free data retrieval call binding the contract method 0xfc6a2ed0.
//
// Solidity: function outboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) OutboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "outboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OutboxTemplate is a free data retrieval call binding the contract method 0xfc6a2ed0.
//
// Solidity: function outboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) OutboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.OutboxTemplate(&_BridgeCreator.CallOpts)
}

// OutboxTemplate is a free data retrieval call binding the contract method 0xfc6a2ed0.
//
// Solidity: function outboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) OutboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.OutboxTemplate(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// RollupEventInboxTemplate is a free data retrieval call binding the contract method 0xae583c03.
//
// Solidity: function rollupEventInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) RollupEventInboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "rollupEventInboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInboxTemplate is a free data retrieval call binding the contract method 0xae583c03.
//
// Solidity: function rollupEventInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) RollupEventInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.RollupEventInboxTemplate(&_BridgeCreator.CallOpts)
}

// RollupEventInboxTemplate is a free data retrieval call binding the contract method 0xae583c03.
//
// Solidity: function rollupEventInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) RollupEventInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.RollupEventInboxTemplate(&_BridgeCreator.CallOpts)
}

// SequencerInboxTemplate is a free data retrieval call binding the contract method 0xe6027a87.
//
// Solidity: function sequencerInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) SequencerInboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "sequencerInboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInboxTemplate is a free data retrieval call binding the contract method 0xe6027a87.
//
// Solidity: function sequencerInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) SequencerInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.SequencerInboxTemplate(&_BridgeCreator.CallOpts)
}

// SequencerInboxTemplate is a free data retrieval call binding the contract method 0xe6027a87.
//
// Solidity: function sequencerInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) SequencerInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.SequencerInboxTemplate(&_BridgeCreator.CallOpts)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x6c6e47c0.
//
// Solidity: function createBridge(address adminProxy, address rollup, (uint256,uint256,uint256,uint256) maxTimeVariation) returns(address, address, address, address, address)
func (_BridgeCreator *BridgeCreatorTransactor) CreateBridge(opts *bind.TransactOpts, adminProxy common.Address, rollup common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "createBridge", adminProxy, rollup, maxTimeVariation)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x6c6e47c0.
//
// Solidity: function createBridge(address adminProxy, address rollup, (uint256,uint256,uint256,uint256) maxTimeVariation) returns(address, address, address, address, address)
func (_BridgeCreator *BridgeCreatorSession) CreateBridge(adminProxy common.Address, rollup common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, maxTimeVariation)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x6c6e47c0.
//
// Solidity: function createBridge(address adminProxy, address rollup, (uint256,uint256,uint256,uint256) maxTimeVariation) returns(address, address, address, address, address)
func (_BridgeCreator *BridgeCreatorTransactorSession) CreateBridge(adminProxy common.Address, rollup common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, maxTimeVariation)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0x2147e58e.
//
// Solidity: function updateTemplates(address _bridgeTemplate, address _sequencerInboxTemplate, address _inboxTemplate, address _rollupEventInboxTemplate, address _outboxTemplate) returns()
func (_BridgeCreator *BridgeCreatorTransactor) UpdateTemplates(opts *bind.TransactOpts, _bridgeTemplate common.Address, _sequencerInboxTemplate common.Address, _inboxTemplate common.Address, _rollupEventInboxTemplate common.Address, _outboxTemplate common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "updateTemplates", _bridgeTemplate, _sequencerInboxTemplate, _inboxTemplate, _rollupEventInboxTemplate, _outboxTemplate)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0x2147e58e.
//
// Solidity: function updateTemplates(address _bridgeTemplate, address _sequencerInboxTemplate, address _inboxTemplate, address _rollupEventInboxTemplate, address _outboxTemplate) returns()
func (_BridgeCreator *BridgeCreatorSession) UpdateTemplates(_bridgeTemplate common.Address, _sequencerInboxTemplate common.Address, _inboxTemplate common.Address, _rollupEventInboxTemplate common.Address, _outboxTemplate common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _bridgeTemplate, _sequencerInboxTemplate, _inboxTemplate, _rollupEventInboxTemplate, _outboxTemplate)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0x2147e58e.
//
// Solidity: function updateTemplates(address _bridgeTemplate, address _sequencerInboxTemplate, address _inboxTemplate, address _rollupEventInboxTemplate, address _outboxTemplate) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) UpdateTemplates(_bridgeTemplate common.Address, _sequencerInboxTemplate common.Address, _inboxTemplate common.Address, _rollupEventInboxTemplate common.Address, _outboxTemplate common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _bridgeTemplate, _sequencerInboxTemplate, _inboxTemplate, _rollupEventInboxTemplate, _outboxTemplate)
}

// BridgeCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferredIterator struct {
	Event *BridgeCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorOwnershipTransferredIterator{contract: _BridgeCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorOwnershipTransferred)
				if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeCreatorOwnershipTransferred, error) {
	event := new(BridgeCreatorOwnershipTransferred)
	if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdatedIterator struct {
	Event *BridgeCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*BridgeCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTemplatesUpdatedIterator{contract: _BridgeCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *BridgeCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorTemplatesUpdated)
				if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*BridgeCreatorTemplatesUpdated, error) {
	event := new(BridgeCreatorTemplatesUpdated)
	if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupAdminMetaData contains all meta data concerning the IRollupAdmin contract.
var IRollupAdminMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stacker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"miniStakeValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInbox\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupAdminMetaData.ABI instead.
var IRollupAdminABI = IRollupAdminMetaData.ABI

// IRollupAdmin is an auto generated Go binding around an Ethereum contract.
type IRollupAdmin struct {
	IRollupAdminCaller     // Read-only binding to the contract
	IRollupAdminTransactor // Write-only binding to the contract
	IRollupAdminFilterer   // Log filterer for contract events
}

// IRollupAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupAdminSession struct {
	Contract     *IRollupAdmin     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupAdminCallerSession struct {
	Contract *IRollupAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IRollupAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupAdminTransactorSession struct {
	Contract     *IRollupAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IRollupAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupAdminRaw struct {
	Contract *IRollupAdmin // Generic contract binding to access the raw methods on
}

// IRollupAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupAdminCallerRaw struct {
	Contract *IRollupAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupAdminTransactorRaw struct {
	Contract *IRollupAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupAdmin creates a new instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdmin(address common.Address, backend bind.ContractBackend) (*IRollupAdmin, error) {
	contract, err := bindIRollupAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupAdmin{IRollupAdminCaller: IRollupAdminCaller{contract: contract}, IRollupAdminTransactor: IRollupAdminTransactor{contract: contract}, IRollupAdminFilterer: IRollupAdminFilterer{contract: contract}}, nil
}

// NewIRollupAdminCaller creates a new read-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminCaller(address common.Address, caller bind.ContractCaller) (*IRollupAdminCaller, error) {
	contract, err := bindIRollupAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminCaller{contract: contract}, nil
}

// NewIRollupAdminTransactor creates a new write-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupAdminTransactor, error) {
	contract, err := bindIRollupAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminTransactor{contract: contract}, nil
}

// NewIRollupAdminFilterer creates a new log filterer instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupAdminFilterer, error) {
	contract, err := bindIRollupAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminFilterer{contract: contract}, nil
}

// bindIRollupAdmin binds a generic wrapper to an already deployed contract.
func bindIRollupAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupAdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.IRollupAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transact(opts, method, params...)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmAssertion(&_IRollupAdmin.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmAssertion(&_IRollupAdmin.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceCreateAssertion(opts *bind.TransactOpts, prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceCreateAssertion", prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateAssertion(&_IRollupAdmin.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateAssertion(&_IRollupAdmin.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceRefundStaker(opts *bind.TransactOpts, stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceRefundStaker", stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// Initialize is a paid mutator transaction binding the contract method 0xd74555d2.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,uint64,uint256,(uint256,uint256,uint256,uint256),uint256,uint256,uint256,address) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0xd74555d2.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,uint64,uint256,(uint256,uint256,uint256,uint256),uint256,uint256,uint256,address) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0xd74555d2.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,uint64,uint256,(uint256,uint256,uint256,uint256),uint256,uint256,uint256,address) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// IRollupAdminOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalledIterator struct {
	Event *IRollupAdminOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*IRollupAdminOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminOwnerFunctionCalledIterator{contract: _IRollupAdmin.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *IRollupAdminOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminOwnerFunctionCalled)
				if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) ParseOwnerFunctionCalled(log types.Log) (*IRollupAdminOwnerFunctionCalled, error) {
	event := new(IRollupAdminOwnerFunctionCalled)
	if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreMetaData contains all meta data concerning the IRollupCore contract.
var IRollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupCoreMetaData.ABI instead.
var IRollupCoreABI = IRollupCoreMetaData.ABI

// IRollupCore is an auto generated Go binding around an Ethereum contract.
type IRollupCore struct {
	IRollupCoreCaller     // Read-only binding to the contract
	IRollupCoreTransactor // Write-only binding to the contract
	IRollupCoreFilterer   // Log filterer for contract events
}

// IRollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupCoreSession struct {
	Contract     *IRollupCore      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupCoreCallerSession struct {
	Contract *IRollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupCoreTransactorSession struct {
	Contract     *IRollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupCoreRaw struct {
	Contract *IRollupCore // Generic contract binding to access the raw methods on
}

// IRollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupCoreCallerRaw struct {
	Contract *IRollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupCoreTransactorRaw struct {
	Contract *IRollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupCore creates a new instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCore(address common.Address, backend bind.ContractBackend) (*IRollupCore, error) {
	contract, err := bindIRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupCore{IRollupCoreCaller: IRollupCoreCaller{contract: contract}, IRollupCoreTransactor: IRollupCoreTransactor{contract: contract}, IRollupCoreFilterer: IRollupCoreFilterer{contract: contract}}, nil
}

// NewIRollupCoreCaller creates a new read-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*IRollupCoreCaller, error) {
	contract, err := bindIRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreCaller{contract: contract}, nil
}

// NewIRollupCoreTransactor creates a new write-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupCoreTransactor, error) {
	contract, err := bindIRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreTransactor{contract: contract}, nil
}

// NewIRollupCoreFilterer creates a new log filterer instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupCoreFilterer, error) {
	contract, err := bindIRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreFilterer{contract: contract}, nil
}

// bindIRollupCore binds a generic wrapper to an already deployed contract.
func bindIRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupCoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.IRollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupCore.Contract.GenesisAssertionHash(&_IRollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupCore.Contract.GenesisAssertionHash(&_IRollupCore.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupCore.Contract.GetAssertion(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupCore.Contract.GetAssertion(&_IRollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetFirstChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetFirstChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetSecondChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetSecondChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupCore *IRollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupCore *IRollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupCore *IRollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsFirstChild(&_IRollupCore.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsFirstChild(&_IRollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsPending(&_IRollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsPending(&_IRollupCore.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupCore.Contract.LatestStakedAssertion(&_IRollupCore.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupCore.Contract.LatestStakedAssertion(&_IRollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupCore.Contract.ValidateAssertionHash(&_IRollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupCore.Contract.ValidateAssertionHash(&_IRollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupCore.Contract.ValidateConfig(&_IRollupCore.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupCore.Contract.ValidateConfig(&_IRollupCore.CallOpts, assertionHash, configData)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// IRollupCoreAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the IRollupCore contract.
type IRollupCoreAssertionConfirmedIterator struct {
	Event *IRollupCoreAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreAssertionConfirmed represents a AssertionConfirmed event raised by the IRollupCore contract.
type IRollupCoreAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupCoreAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreAssertionConfirmedIterator{contract: _IRollupCore.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupCoreAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreAssertionConfirmed)
				if err := _IRollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) ParseAssertionConfirmed(log types.Log) (*IRollupCoreAssertionConfirmed, error) {
	event := new(IRollupCoreAssertionConfirmed)
	if err := _IRollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the IRollupCore contract.
type IRollupCoreAssertionCreatedIterator struct {
	Event *IRollupCoreAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreAssertionCreated represents a AssertionCreated event raised by the IRollupCore contract.
type IRollupCoreAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*IRollupCoreAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreAssertionCreatedIterator{contract: _IRollupCore.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *IRollupCoreAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreAssertionCreated)
				if err := _IRollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) ParseAssertionCreated(log types.Log) (*IRollupCoreAssertionCreated, error) {
	event := new(IRollupCoreAssertionCreated)
	if err := _IRollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStartedIterator struct {
	Event *IRollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupChallengeStartedIterator{contract: _IRollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupChallengeStarted)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupCoreRollupChallengeStarted, error) {
	event := new(IRollupCoreRollupChallengeStarted)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupCore contract.
type IRollupCoreRollupInitializedIterator struct {
	Event *IRollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupInitialized represents a RollupInitialized event raised by the IRollupCore contract.
type IRollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupInitializedIterator{contract: _IRollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupInitialized)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupInitialized(log types.Log) (*IRollupCoreRollupInitialized, error) {
	event := new(IRollupCoreRollupInitialized)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdatedIterator struct {
	Event *IRollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserStakeUpdatedIterator{contract: _IRollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserStakeUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupCoreUserStakeUpdated, error) {
	event := new(IRollupCoreUserStakeUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserWithdrawableFundsUpdatedIterator{contract: _IRollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserWithdrawableFundsUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(IRollupCoreUserWithdrawableFundsUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupEventInboxMetaData contains all meta data concerning the IRollupEventInbox contract.
var IRollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupEventInboxMetaData.ABI instead.
var IRollupEventInboxABI = IRollupEventInboxMetaData.ABI

// IRollupEventInbox is an auto generated Go binding around an Ethereum contract.
type IRollupEventInbox struct {
	IRollupEventInboxCaller     // Read-only binding to the contract
	IRollupEventInboxTransactor // Write-only binding to the contract
	IRollupEventInboxFilterer   // Log filterer for contract events
}

// IRollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupEventInboxSession struct {
	Contract     *IRollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IRollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupEventInboxCallerSession struct {
	Contract *IRollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IRollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupEventInboxTransactorSession struct {
	Contract     *IRollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IRollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupEventInboxRaw struct {
	Contract *IRollupEventInbox // Generic contract binding to access the raw methods on
}

// IRollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupEventInboxCallerRaw struct {
	Contract *IRollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactorRaw struct {
	Contract *IRollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupEventInbox creates a new instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInbox(address common.Address, backend bind.ContractBackend) (*IRollupEventInbox, error) {
	contract, err := bindIRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInbox{IRollupEventInboxCaller: IRollupEventInboxCaller{contract: contract}, IRollupEventInboxTransactor: IRollupEventInboxTransactor{contract: contract}, IRollupEventInboxFilterer: IRollupEventInboxFilterer{contract: contract}}, nil
}

// NewIRollupEventInboxCaller creates a new read-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*IRollupEventInboxCaller, error) {
	contract, err := bindIRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxCaller{contract: contract}, nil
}

// NewIRollupEventInboxTransactor creates a new write-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupEventInboxTransactor, error) {
	contract, err := bindIRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxTransactor{contract: contract}, nil
}

// NewIRollupEventInboxFilterer creates a new log filterer instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupEventInboxFilterer, error) {
	contract, err := bindIRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxFilterer{contract: contract}, nil
}

// bindIRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindIRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupEventInboxABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.IRollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) RollupInitialized(chainId *big.Int) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId)
}

// IRollupUserMetaData contains all meta data concerning the IRollupUser contract.
var IRollupUserMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"winningEdgeId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"prevConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"confirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserMetaData.ABI instead.
var IRollupUserABI = IRollupUserMetaData.ABI

// IRollupUser is an auto generated Go binding around an Ethereum contract.
type IRollupUser struct {
	IRollupUserCaller     // Read-only binding to the contract
	IRollupUserTransactor // Write-only binding to the contract
	IRollupUserFilterer   // Log filterer for contract events
}

// IRollupUserCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserSession struct {
	Contract     *IRollupUser      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserCallerSession struct {
	Contract *IRollupUserCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupUserTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserTransactorSession struct {
	Contract     *IRollupUserTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupUserRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserRaw struct {
	Contract *IRollupUser // Generic contract binding to access the raw methods on
}

// IRollupUserCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserCallerRaw struct {
	Contract *IRollupUserCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserTransactorRaw struct {
	Contract *IRollupUserTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUser creates a new instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUser(address common.Address, backend bind.ContractBackend) (*IRollupUser, error) {
	contract, err := bindIRollupUser(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUser{IRollupUserCaller: IRollupUserCaller{contract: contract}, IRollupUserTransactor: IRollupUserTransactor{contract: contract}, IRollupUserFilterer: IRollupUserFilterer{contract: contract}}, nil
}

// NewIRollupUserCaller creates a new read-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserCaller(address common.Address, caller bind.ContractCaller) (*IRollupUserCaller, error) {
	contract, err := bindIRollupUser(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserCaller{contract: contract}, nil
}

// NewIRollupUserTransactor creates a new write-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserTransactor, error) {
	contract, err := bindIRollupUser(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserTransactor{contract: contract}, nil
}

// NewIRollupUserFilterer creates a new log filterer instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserFilterer, error) {
	contract, err := bindIRollupUser(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserFilterer{contract: contract}, nil
}

// bindIRollupUser binds a generic wrapper to an already deployed contract.
func bindIRollupUser(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRollupUserABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.IRollupUserCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupUser.Contract.GenesisAssertionHash(&_IRollupUser.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupUser.Contract.GenesisAssertionHash(&_IRollupUser.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupUser.Contract.GetAssertion(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupUser.Contract.GetAssertion(&_IRollupUser.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetFirstChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetFirstChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetSecondChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetSecondChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupUser *IRollupUserCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupUser *IRollupUserSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupUser *IRollupUserCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsFirstChild(&_IRollupUser.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsFirstChild(&_IRollupUser.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsPending(&_IRollupUser.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsPending(&_IRollupUser.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupUser.Contract.LatestStakedAssertion(&_IRollupUser.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupUser.Contract.LatestStakedAssertion(&_IRollupUser.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupUser.Contract.ValidateAssertionHash(&_IRollupUser.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupUser.Contract.ValidateAssertionHash(&_IRollupUser.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupUser.Contract.ValidateConfig(&_IRollupUser.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupUser.Contract.ValidateConfig(&_IRollupUser.CallOpts, assertionHash, configData)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserTransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress, tokenAmount)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserTransactor) ConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "confirmAssertion", assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmAssertion(&_IRollupUser.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserTransactorSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmAssertion(&_IRollupUser.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnNewAssertion(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnNewAssertion", tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnNewAssertion(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnNewAssertion(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserTransactor) ReturnOldDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "returnOldDeposit")
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserTransactorSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactor) StakeOnNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "stakeOnNewAssertion", assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewAssertion(&_IRollupUser.TransactOpts, assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewAssertion(&_IRollupUser.TransactOpts, assertion, expectedAssertionHash)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// IRollupUserAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the IRollupUser contract.
type IRollupUserAssertionConfirmedIterator struct {
	Event *IRollupUserAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAssertionConfirmed represents a AssertionConfirmed event raised by the IRollupUser contract.
type IRollupUserAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupUserAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAssertionConfirmedIterator{contract: _IRollupUser.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAssertionConfirmed)
				if err := _IRollupUser.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) ParseAssertionConfirmed(log types.Log) (*IRollupUserAssertionConfirmed, error) {
	event := new(IRollupUserAssertionConfirmed)
	if err := _IRollupUser.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the IRollupUser contract.
type IRollupUserAssertionCreatedIterator struct {
	Event *IRollupUserAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAssertionCreated represents a AssertionCreated event raised by the IRollupUser contract.
type IRollupUserAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*IRollupUserAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAssertionCreatedIterator{contract: _IRollupUser.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAssertionCreated)
				if err := _IRollupUser.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) ParseAssertionCreated(log types.Log) (*IRollupUserAssertionCreated, error) {
	event := new(IRollupUserAssertionCreated)
	if err := _IRollupUser.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUser contract.
type IRollupUserRollupChallengeStartedIterator struct {
	Event *IRollupUserRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUser contract.
type IRollupUserRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupChallengeStartedIterator{contract: _IRollupUser.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupChallengeStarted)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserRollupChallengeStarted, error) {
	event := new(IRollupUserRollupChallengeStarted)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUser contract.
type IRollupUserRollupInitializedIterator struct {
	Event *IRollupUserRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupInitialized represents a RollupInitialized event raised by the IRollupUser contract.
type IRollupUserRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserRollupInitializedIterator, error) {

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupInitializedIterator{contract: _IRollupUser.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupInitialized)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) ParseRollupInitialized(log types.Log) (*IRollupUserRollupInitialized, error) {
	event := new(IRollupUserRollupInitialized)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUser contract.
type IRollupUserUserStakeUpdatedIterator struct {
	Event *IRollupUserUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUser contract.
type IRollupUserUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserStakeUpdatedIterator{contract: _IRollupUser.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserStakeUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserUserStakeUpdated, error) {
	event := new(IRollupUserUserStakeUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserWithdrawableFundsUpdatedIterator{contract: _IRollupUser.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserWithdrawableFundsUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserUserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserUserWithdrawableFundsUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicMetaData contains all meta data concerning the RollupAdminLogic contract.
var RollupAdminLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"miniStakeValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInbox\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyTrustFastConfirmer\",\"type\":\"address\"}],\"name\":\"setAnyTrustFastConfirmer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"newInbox\",\"type\":\"address\"}],\"name\":\"setInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeSecondaryTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeSecondaryToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// RollupAdminLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupAdminLogicMetaData.ABI instead.
var RollupAdminLogicABI = RollupAdminLogicMetaData.ABI

// RollupAdminLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupAdminLogicMetaData.Bin instead.
var RollupAdminLogicBin = RollupAdminLogicMetaData.Bin

// DeployRollupAdminLogic deploys a new Ethereum contract, binding an instance of RollupAdminLogic to it.
func DeployRollupAdminLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupAdminLogic, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupAdminLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// RollupAdminLogic is an auto generated Go binding around an Ethereum contract.
type RollupAdminLogic struct {
	RollupAdminLogicCaller     // Read-only binding to the contract
	RollupAdminLogicTransactor // Write-only binding to the contract
	RollupAdminLogicFilterer   // Log filterer for contract events
}

// RollupAdminLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupAdminLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupAdminLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupAdminLogicSession struct {
	Contract     *RollupAdminLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupAdminLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupAdminLogicCallerSession struct {
	Contract *RollupAdminLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupAdminLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupAdminLogicTransactorSession struct {
	Contract     *RollupAdminLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupAdminLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupAdminLogicRaw struct {
	Contract *RollupAdminLogic // Generic contract binding to access the raw methods on
}

// RollupAdminLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupAdminLogicCallerRaw struct {
	Contract *RollupAdminLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupAdminLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactorRaw struct {
	Contract *RollupAdminLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupAdminLogic creates a new instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogic(address common.Address, backend bind.ContractBackend) (*RollupAdminLogic, error) {
	contract, err := bindRollupAdminLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// NewRollupAdminLogicCaller creates a new read-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupAdminLogicCaller, error) {
	contract, err := bindRollupAdminLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicCaller{contract: contract}, nil
}

// NewRollupAdminLogicTransactor creates a new write-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupAdminLogicTransactor, error) {
	contract, err := bindRollupAdminLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicTransactor{contract: contract}, nil
}

// NewRollupAdminLogicFilterer creates a new log filterer instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupAdminLogicFilterer, error) {
	contract, err := bindRollupAdminLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicFilterer{contract: contract}, nil
}

// bindRollupAdminLogic binds a generic wrapper to an already deployed contract.
func bindRollupAdminLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupAdminLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.RollupAdminLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupAdminLogic.Contract.AnyTrustFastConfirmer(&_RollupAdminLogic.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupAdminLogic.Contract.AnyTrustFastConfirmer(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupAdminLogic.Contract.GenesisAssertionHash(&_RollupAdminLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupAdminLogic.Contract.GenesisAssertionHash(&_RollupAdminLogic.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupAdminLogic.Contract.GetAssertion(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupAdminLogic.Contract.GetAssertion(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetFirstChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetFirstChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetSecondChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetSecondChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsFirstChild(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsFirstChild(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsPending(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsPending(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestConfirmed() ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestStakedAssertion(&_RollupAdminLogic.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestStakedAssertion(&_RollupAdminLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupAdminLogic.Contract.ValidateAssertionHash(&_RollupAdminLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupAdminLogic.Contract.ValidateAssertionHash(&_RollupAdminLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupAdminLogic.Contract.ValidateConfig(&_RollupAdminLogic.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupAdminLogic.Contract.ValidateConfig(&_RollupAdminLogic.CallOpts, assertionHash, configData)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorUtils() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorUtils(&_RollupAdminLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorUtils(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmAssertion(&_RollupAdminLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmAssertion(&_RollupAdminLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceCreateAssertion(opts *bind.TransactOpts, prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceCreateAssertion", prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateAssertion(&_RollupAdminLogic.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateAssertion(&_RollupAdminLogic.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceRefundStaker(opts *bind.TransactOpts, staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceRefundStaker", staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// Initialize is a paid mutator transaction binding the contract method 0xd74555d2.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,uint64,uint256,(uint256,uint256,uint256,uint256),uint256,uint256,uint256,address) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0xd74555d2.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,uint64,uint256,(uint256,uint256,uint256,uint256),uint256,uint256,uint256,address) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0xd74555d2.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,uint64,uint256,(uint256,uint256,uint256,uint256),uint256,uint256,uint256,address) config, (address,address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetAnyTrustFastConfirmer(opts *bind.TransactOpts, _anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setAnyTrustFastConfirmer", _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetAnyTrustFastConfirmer(&_RollupAdminLogic.TransactOpts, _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetAnyTrustFastConfirmer(&_RollupAdminLogic.TransactOpts, _anyTrustFastConfirmer)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetInbox(opts *bind.TransactOpts, newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setInbox", newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryTo", newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryToAndCall", newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// RollupAdminLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChangedIterator struct {
	Event *RollupAdminLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAdminChanged represents a AdminChanged event raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupAdminLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAdminChangedIterator{contract: _RollupAdminLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAdminChanged)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAdminChanged(log types.Log) (*RollupAdminLogicAdminChanged, error) {
	event := new(RollupAdminLogicAdminChanged)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionConfirmedIterator struct {
	Event *RollupAdminLogicAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionConfirmed represents a AssertionConfirmed event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupAdminLogicAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionConfirmedIterator{contract: _RollupAdminLogic.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionConfirmed)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionConfirmed(log types.Log) (*RollupAdminLogicAssertionConfirmed, error) {
	event := new(RollupAdminLogicAssertionConfirmed)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionCreatedIterator struct {
	Event *RollupAdminLogicAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionCreated represents a AssertionCreated event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupAdminLogicAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionCreatedIterator{contract: _RollupAdminLogic.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionCreated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionCreated(log types.Log) (*RollupAdminLogicAssertionCreated, error) {
	event := new(RollupAdminLogicAssertionCreated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgradedIterator struct {
	Event *RollupAdminLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupAdminLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicBeaconUpgradedIterator{contract: _RollupAdminLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicBeaconUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupAdminLogicBeaconUpgraded, error) {
	event := new(RollupAdminLogicBeaconUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicInitializedIterator struct {
	Event *RollupAdminLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicInitialized represents a Initialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupAdminLogicInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicInitializedIterator{contract: _RollupAdminLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseInitialized(log types.Log) (*RollupAdminLogicInitialized, error) {
	event := new(RollupAdminLogicInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalledIterator struct {
	Event *RollupAdminLogicOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*RollupAdminLogicOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicOwnerFunctionCalledIterator{contract: _RollupAdminLogic.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicOwnerFunctionCalled)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseOwnerFunctionCalled(log types.Log) (*RollupAdminLogicOwnerFunctionCalled, error) {
	event := new(RollupAdminLogicOwnerFunctionCalled)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupAdminLogic contract.
type RollupAdminLogicPausedIterator struct {
	Event *RollupAdminLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicPaused represents a Paused event raised by the RollupAdminLogic contract.
type RollupAdminLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupAdminLogicPausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicPausedIterator{contract: _RollupAdminLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicPaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParsePaused(log types.Log) (*RollupAdminLogicPaused, error) {
	event := new(RollupAdminLogicPaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStartedIterator struct {
	Event *RollupAdminLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupAdminLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupChallengeStartedIterator{contract: _RollupAdminLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupChallengeStarted)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupAdminLogicRollupChallengeStarted, error) {
	event := new(RollupAdminLogicRollupChallengeStarted)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitializedIterator struct {
	Event *RollupAdminLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupInitialized represents a RollupInitialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupAdminLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupInitializedIterator{contract: _RollupAdminLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupAdminLogicRollupInitialized, error) {
	event := new(RollupAdminLogicRollupInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpausedIterator struct {
	Event *RollupAdminLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUnpaused represents a Unpaused event raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupAdminLogicUnpausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUnpausedIterator{contract: _RollupAdminLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUnpaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUnpaused(log types.Log) (*RollupAdminLogicUnpaused, error) {
	event := new(RollupAdminLogicUnpaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedIterator struct {
	Event *RollupAdminLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgraded represents a Upgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedIterator{contract: _RollupAdminLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgraded(log types.Log) (*RollupAdminLogicUpgraded, error) {
	event := new(RollupAdminLogicUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondaryIterator struct {
	Event *RollupAdminLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedSecondaryIterator{contract: _RollupAdminLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgradedSecondary)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupAdminLogicUpgradedSecondary, error) {
	event := new(RollupAdminLogicUpgradedSecondary)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdatedIterator struct {
	Event *RollupAdminLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserStakeUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserStakeUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupAdminLogicUserStakeUpdated, error) {
	event := new(RollupAdminLogicUserStakeUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupAdminLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupAdminLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreMetaData contains all meta data concerning the RollupCore contract.
var RollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// RollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCoreMetaData.ABI instead.
var RollupCoreABI = RollupCoreMetaData.ABI

// RollupCore is an auto generated Go binding around an Ethereum contract.
type RollupCore struct {
	RollupCoreCaller     // Read-only binding to the contract
	RollupCoreTransactor // Write-only binding to the contract
	RollupCoreFilterer   // Log filterer for contract events
}

// RollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCoreSession struct {
	Contract     *RollupCore       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCoreCallerSession struct {
	Contract *RollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// RollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCoreTransactorSession struct {
	Contract     *RollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCoreRaw struct {
	Contract *RollupCore // Generic contract binding to access the raw methods on
}

// RollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCoreCallerRaw struct {
	Contract *RollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCoreTransactorRaw struct {
	Contract *RollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCore creates a new instance of RollupCore, bound to a specific deployed contract.
func NewRollupCore(address common.Address, backend bind.ContractBackend) (*RollupCore, error) {
	contract, err := bindRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCore{RollupCoreCaller: RollupCoreCaller{contract: contract}, RollupCoreTransactor: RollupCoreTransactor{contract: contract}, RollupCoreFilterer: RollupCoreFilterer{contract: contract}}, nil
}

// NewRollupCoreCaller creates a new read-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*RollupCoreCaller, error) {
	contract, err := bindRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreCaller{contract: contract}, nil
}

// NewRollupCoreTransactor creates a new write-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCoreTransactor, error) {
	contract, err := bindRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreTransactor{contract: contract}, nil
}

// NewRollupCoreFilterer creates a new log filterer instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCoreFilterer, error) {
	contract, err := bindRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCoreFilterer{contract: contract}, nil
}

// bindRollupCore binds a generic wrapper to an already deployed contract.
func bindRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupCoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.RollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupCore *RollupCoreCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupCore *RollupCoreSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupCore *RollupCoreCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupCore.Contract.AnyTrustFastConfirmer(&_RollupCore.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupCore.Contract.AnyTrustFastConfirmer(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupCore.Contract.GenesisAssertionHash(&_RollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupCore.Contract.GenesisAssertionHash(&_RollupCore.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupCore.Contract.GetAssertion(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupCore.Contract.GetAssertion(&_RollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetFirstChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetFirstChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetSecondChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetSecondChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupCore *RollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupCore *RollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupCore *RollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsFirstChild(&_RollupCore.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsFirstChild(&_RollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsPending(&_RollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsPending(&_RollupCore.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreSession) LatestConfirmed() ([32]byte, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupCore.Contract.LatestStakedAssertion(&_RollupCore.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupCore.Contract.LatestStakedAssertion(&_RollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupCore.Contract.ValidateAssertionHash(&_RollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupCore.Contract.ValidateAssertionHash(&_RollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupCore.Contract.ValidateConfig(&_RollupCore.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupCore.Contract.ValidateConfig(&_RollupCore.CallOpts, assertionHash, configData)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCore *RollupCoreCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCore *RollupCoreSession) ValidatorUtils() (common.Address, error) {
	return _RollupCore.Contract.ValidatorUtils(&_RollupCore.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupCore.Contract.ValidatorUtils(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// RollupCoreAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupCore contract.
type RollupCoreAssertionConfirmedIterator struct {
	Event *RollupCoreAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreAssertionConfirmed represents a AssertionConfirmed event raised by the RollupCore contract.
type RollupCoreAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupCoreAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreAssertionConfirmedIterator{contract: _RollupCore.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupCoreAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreAssertionConfirmed)
				if err := _RollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) ParseAssertionConfirmed(log types.Log) (*RollupCoreAssertionConfirmed, error) {
	event := new(RollupCoreAssertionConfirmed)
	if err := _RollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupCore contract.
type RollupCoreAssertionCreatedIterator struct {
	Event *RollupCoreAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreAssertionCreated represents a AssertionCreated event raised by the RollupCore contract.
type RollupCoreAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupCoreAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreAssertionCreatedIterator{contract: _RollupCore.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupCoreAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreAssertionCreated)
				if err := _RollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) ParseAssertionCreated(log types.Log) (*RollupCoreAssertionCreated, error) {
	event := new(RollupCoreAssertionCreated)
	if err := _RollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupCore contract.
type RollupCoreInitializedIterator struct {
	Event *RollupCoreInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreInitialized represents a Initialized event raised by the RollupCore contract.
type RollupCoreInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupCoreInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreInitializedIterator{contract: _RollupCore.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) ParseInitialized(log types.Log) (*RollupCoreInitialized, error) {
	event := new(RollupCoreInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCorePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupCore contract.
type RollupCorePausedIterator struct {
	Event *RollupCorePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCorePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCorePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCorePaused represents a Paused event raised by the RollupCore contract.
type RollupCorePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupCorePausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupCorePausedIterator{contract: _RollupCore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupCorePaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCorePaused)
				if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) ParsePaused(log types.Log) (*RollupCorePaused, error) {
	event := new(RollupCorePaused)
	if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupCore contract.
type RollupCoreRollupChallengeStartedIterator struct {
	Event *RollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupCore contract.
type RollupCoreRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupChallengeStartedIterator{contract: _RollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupChallengeStarted)
				if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupCoreRollupChallengeStarted, error) {
	event := new(RollupCoreRollupChallengeStarted)
	if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupCore contract.
type RollupCoreRollupInitializedIterator struct {
	Event *RollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupInitialized represents a RollupInitialized event raised by the RollupCore contract.
type RollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupInitializedIterator{contract: _RollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) ParseRollupInitialized(log types.Log) (*RollupCoreRollupInitialized, error) {
	event := new(RollupCoreRollupInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupCore contract.
type RollupCoreUnpausedIterator struct {
	Event *RollupCoreUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUnpaused represents a Unpaused event raised by the RollupCore contract.
type RollupCoreUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupCoreUnpausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupCoreUnpausedIterator{contract: _RollupCore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupCoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUnpaused)
				if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) ParseUnpaused(log types.Log) (*RollupCoreUnpaused, error) {
	event := new(RollupCoreUnpaused)
	if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupCore contract.
type RollupCoreUserStakeUpdatedIterator struct {
	Event *RollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the RollupCore contract.
type RollupCoreUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserStakeUpdatedIterator{contract: _RollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserStakeUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*RollupCoreUserStakeUpdated, error) {
	event := new(RollupCoreUserStakeUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserWithdrawableFundsUpdatedIterator{contract: _RollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserWithdrawableFundsUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(RollupCoreUserWithdrawableFundsUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorMetaData contains all meta data concerning the RollupCreator contract.
var RollupCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rollupAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inboxAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"RollupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeCreator\",\"outputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManagerTemplate\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"miniStakeValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"expectedRollupAddr\",\"type\":\"address\"}],\"name\":\"createRollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupAdminLogic\",\"outputs\":[{\"internalType\":\"contractIRollupAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupUserLogic\",\"outputs\":[{\"internalType\":\"contractIRollupUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"_bridgeCreator\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"_osp\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"_challengeManagerLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupAdmin\",\"name\":\"_rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"_rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorWalletCreator\",\"type\":\"address\"}],\"name\":\"setTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6134558061007e6000396000f3fe60806040523480156200001157600080fd5b5060043610620000c35760003560e01c80639dba3241116200007a5780639dba32411462000155578063bc45e0ae1462000169578063e8a1a09f146200017d578063f26a62c61462000194578063f2fde38b14620001a8578063f860cefa14620001bf57600080fd5b8063014cc92c14620000c857806304f1244814620000f8578063715018a6146200010f5780638da5cb5b146200011b5780639c683d10146200012d5780639d4798e31462000141575b600080fd5b600654620000dc906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b620000dc620001093660046200093f565b620001d3565b620001196200062b565b005b6000546001600160a01b0316620000dc565b600354620000dc906001600160a01b031681565b600554620000dc906001600160a01b031681565b600454620000dc906001600160a01b031681565b600754620000dc906001600160a01b031681565b620001196200018e36600462000a5d565b62000643565b600254620000dc906001600160a01b031681565b62000119620001b936600462000b02565b620006ed565b600154620000dc906001600160a01b031681565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101829052604051620002199062000818565b604051809103906000f08015801562000236573d6000803e3d6000fd5b506001600160a01b039081168083526001546101208701516040516301b1b91f60e61b81529190931692636c6e47c09262000278929091889160040162000b29565b60a0604051808303816000875af115801562000298573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002be919062000b78565b6001600160a01b0390811660a087015290811660808087019190915291811660608601529182166040808601919091529282166020850152835190870151925163f2fde38b60e01b81529282166004840152169063f2fde38b90602401600060405180830381600087803b1580156200033657600080fd5b505af11580156200034b573d6000803e3d6000fd5b50506003548351604051600094506001600160a01b03909216925090620003729062000826565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f080158015620003b5573d6000803e3d6000fd5b5085516002546101408801516101608901516101808a015160208b01516101008c015160808d015160405163453e969b60e01b81526001600160a01b038e8116600483015267ffffffffffffffff909916602482015296881660448801526064870195909552608486019390935260a4850191909152841660c484015260e4830152821661010482015291925082169063453e969b9061012401600060405180830381600087803b1580156200046a57600080fd5b505af11580156200047f573d6000803e3d6000fd5b505060408051610140810182526020808701516001600160a01b0390811683528784015181169183019190915260608088015182168385015260a08089015183169184019190915260808089015183169084015286821690830152600454811660c0830152600554811660e08301526006548116610100830152600754166101208201529051889350909150620005169062000834565b6200052392919062000cca565b604051809103906000f08015801562000540573d6000803e3d6000fd5b506001600160a01b0390811660c08401819052908516146200059d5760405162461bcd60e51b81526020600482015260116024820152702ba927a723afa927a6262aa82fa0a2222960791b60448201526064015b60405180910390fd5b8160c001516001600160a01b03167f9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc983606001518460000151856040015186602001516040516200061794939291906001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b60405180910390a25060c001519392505050565b620006356200076c565b620006416000620007c8565b565b6200064d6200076c565b600180546001600160a01b03199081166001600160a01b038a811691909117909255600280548216898416179055600380548216888416179055600480548216878416179055600580548216868416179055600680548216858416179055600780549091169183169190911790556040517fc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b90600090a150505050505050565b620006f76200076c565b6001600160a01b0381166200075e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000594565b6200076981620007c8565b50565b6000546001600160a01b03163314620006415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000594565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61070f8062000ddf83390190565b610e3080620014ee83390190565b611102806200231e83390190565b6001600160a01b03169052565b6040516101c0810167ffffffffffffffff811182821017156200088257634e487b7160e01b600052604160045260246000fd5b60405290565b803567ffffffffffffffff81168114620008a157600080fd5b919050565b6001600160a01b03811681146200076957600080fd5b8035620008a181620008a6565b600060808284031215620008dc57600080fd5b6040516080810181811067ffffffffffffffff821117156200090e57634e487b7160e01b600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b6000808284036102408112156200095557600080fd5b610220808212156200096657600080fd5b620009706200084f565b91506200097d8562000888565b82526200098d60208601620008bc565b60208301526040850135604083015260608501356060830152620009b460808601620008bc565b6080830152620009c760a08601620008bc565b60a083015260c085013560c0830152620009e460e0860162000888565b60e0830152610100858101359083015261012062000a0587828801620008c9565b908301526101a0858101356101408401526101c08601356101608401526101e086013561018084015262000a3d6102008701620008bc565b818401525081935062000a52818601620008bc565b925050509250929050565b600080600080600080600060e0888a03121562000a7957600080fd5b873562000a8681620008a6565b9650602088013562000a9881620008a6565b9550604088013562000aaa81620008a6565b9450606088013562000abc81620008a6565b9350608088013562000ace81620008a6565b925060a088013562000ae081620008a6565b915060c088013562000af281620008a6565b8091505092959891949750929550565b60006020828403121562000b1557600080fd5b813562000b2281620008a6565b9392505050565b6001600160a01b0384811682528316602082015260c0810162000b706040830184805182526020810151602083015260408101516040830152606081015160608301525050565b949350505050565b600080600080600060a0868803121562000b9157600080fd5b855162000b9e81620008a6565b602087015190955062000bb181620008a6565b604087015190945062000bc481620008a6565b606087015190935062000bd781620008a6565b608087015190925062000bea81620008a6565b809150509295509295909350565b62000c0582825162000842565b602081015162000c19602084018262000842565b50604081015162000c2e604084018262000842565b50606081015162000c43606084018262000842565b50608081015162000c58608084018262000842565b5060a081015162000c6d60a084018262000842565b5060c081015162000c8260c084018262000842565b5060e081015162000c9760e084018262000842565b506101008082015162000cad8285018262000842565b50506101208082015162000cc48285018262000842565b50505050565b825167ffffffffffffffff1681526103608101602084015162000cf1602084018262000842565b506040840151604083015260608401516060830152608084015162000d1a608084018262000842565b5060a084015162000d2f60a084018262000842565b5060c084015160c083015260e084015162000d5660e084018267ffffffffffffffff169052565b5061010084810151908301526101208085015180518285015260208101516101408501526040810151610160850152606081015161018085015250506101408401516101a0838101919091526101608501516101c08401526101808501516101e084015284015162000dcd61020084018262000842565b5062000b2261022083018462000bf856fe608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106918061007e6000396000f3fe60806040526004361061006b5760003560e01c8063204e1c7a14610070578063715018a6146100a65780637eff275e146100bd5780638da5cb5b146100dd5780639623609d146100fb57806399a88ec41461010e578063f2fde38b1461012e578063f3b7dead1461014e575b600080fd5b34801561007c57600080fd5b5061009061008b366004610483565b61016e565b60405161009d91906104a7565b60405180910390f35b3480156100b257600080fd5b506100bb6101ff565b005b3480156100c957600080fd5b506100bb6100d83660046104bb565b610213565b3480156100e957600080fd5b506000546001600160a01b0316610090565b6100bb61010936600461050a565b61027d565b34801561011a57600080fd5b506100bb6101293660046104bb565b6102ec565b34801561013a57600080fd5b506100bb610149366004610483565b610320565b34801561015a57600080fd5b50610090610169366004610483565b61039e565b6000806000836001600160a01b031660405161019490635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101cf576040519150601f19603f3d011682016040523d82523d6000602084013e6101d4565b606091505b5091509150816101e357600080fd5b808060200190518101906101f791906105e0565b949350505050565b6102076103c4565b610211600061041e565b565b61021b6103c4565b6040516308f2839760e41b81526001600160a01b03831690638f283970906102479084906004016104a7565b600060405180830381600087803b15801561026157600080fd5b505af1158015610275573d6000803e3d6000fd5b505050505050565b6102856103c4565b60405163278f794360e11b81526001600160a01b03841690634f1ef2869034906102b590869086906004016105fd565b6000604051808303818588803b1580156102ce57600080fd5b505af11580156102e2573d6000803e3d6000fd5b5050505050505050565b6102f46103c4565b604051631b2ce7f360e11b81526001600160a01b03831690633659cfe6906102479084906004016104a7565b6103286103c4565b6001600160a01b0381166103925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61039b8161041e565b50565b6000806000836001600160a01b0316604051610194906303e1469160e61b815260040190565b6000546001600160a01b031633146102115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610389565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461039b57600080fd5b60006020828403121561049557600080fd5b81356104a08161046e565b9392505050565b6001600160a01b0391909116815260200190565b600080604083850312156104ce57600080fd5b82356104d98161046e565b915060208301356104e98161046e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561051f57600080fd5b833561052a8161046e565b9250602084013561053a8161046e565b9150604084013567ffffffffffffffff8082111561055757600080fd5b818601915086601f83011261056b57600080fd5b81358181111561057d5761057d6104f4565b604051601f8201601f19908116603f011681019083821181831017156105a5576105a56104f4565b816040528281528960208487010111156105be57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156105f257600080fd5b81516104a08161046e565b60018060a01b038316815260006020604081840152835180604085015260005b818110156106395785810183015185820160600152820161061d565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220f5a0c1f96550a26c450231ceae844397fc23d429a52f9808d99552350772e88464736f6c63430008110033608060405260405162000e3038038062000e30833981016040819052620000269162000487565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ba565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b6200022e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000e0960279139620002f8565b9392505050565b60006200018060008051602062000de983398151915260001b620003de60201b620001ea1760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000de983398151915260001b620003de60201b620001ea1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200025a1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620001ea1760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000567565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f1919062000585565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b50506000910152565b6000806000606084860312156200049d57600080fd5b620004a8846200042e565b9250620004b8602085016200042e565b60408501519092506001600160401b0380821115620004d657600080fd5b818601915086601f830112620004eb57600080fd5b8151818111156200050057620005006200044b565b604051601f8201601f19908116603f011681019083821181831017156200052b576200052b6200044b565b816040528281528960208487010111156200054557600080fd5b6200055883602083016020880162000461565b80955050505050509250925092565b600082516200057b81846020870162000461565b9190910192915050565b6020815260008251806020840152620005a681604085016020870162000461565b601f01601f19169190910160400192915050565b61081f80620005ca6000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106b1565b610118565b61005b6100933660046106cc565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106b1565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107c3602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd6104b9565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b610368836104e1565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a81610521565b60606103e98461025a565b6104445760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016102f5565b600080856001600160a01b03168560405161045f9190610773565b600060405180830381855af49150503d806000811461049a576040519150601f19603f3d011682016040523d82523d6000602084013e61049f565b606091505b50915091506104af8282866105ca565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b6104ea81610603565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105865760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d9575081610253565b8251156105e95782518084602001fd5b8160405162461bcd60e51b81526004016102f5919061078f565b61060c8161025a565b61066e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105a9565b80356001600160a01b03811681146106ac57600080fd5b919050565b6000602082840312156106c357600080fd5b61025382610695565b6000806000604084860312156106e157600080fd5b6106ea84610695565b9250602084013567ffffffffffffffff8082111561070757600080fd5b818601915086601f83011261071b57600080fd5b81358181111561072a57600080fd5b87602082850101111561073c57600080fd5b6020830194508093505050509250925092565b60005b8381101561076a578181015183820152602001610752565b50506000910152565b6000825161078581846020870161074f565b9190910192915050565b60208152600082518060208401526107ae81604085016020870161074f565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e728ac68270132d34277bbf3be5409d2bbc23056dfe0d68964e9aec3ca8d7e0864736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656460806040523480156200001157600080fd5b5060405162001102380380620011028339810160408190526200003491620008b9565b60c0810151604051636ba2aae960e11b9062000057908590859060240162000adb565b60408051808303601f19018152918152602080830180516001600160e01b0319959095166001600160e01b0395861617905260e08601518782015183516001600160a01b03909116602480830191909152845180830390910181526044909101909352908201805190941663189acdbd60e31b1790935260808601519192916200010360017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610462000c02565b6000805160206200107b8339815191521462000123576200012362000c24565b6200015060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd62000c02565b6000805160206200109b8339815191521462000170576200017062000c24565b6200019d60017f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546e62000c02565b600080516020620010e283398151915214620001bd57620001bd62000c24565b620001c881620001f1565b620001d6858560006200024c565b620001e48383600062000289565b5050505050505062000cb3565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200021c62000294565b604080516001600160a01b03928316815291841660208301520160405180910390a16200024981620002cd565b50565b620002578362000382565b600082511180620002655750805b156200028457620002828383620003c460201b620000291760201c565b505b505050565b6200025783620003f5565b6000620002be6000805160206200107b83398151915260001b6200043760201b620000551760201c565b546001600160a01b0316919050565b6001600160a01b038116620003385760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620003616000805160206200107b83398151915260001b6200043760201b620000551760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200038d816200043a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620003ec8383604051806060016040528060278152602001620010bb60279139620004dd565b90505b92915050565b6200040081620005c5565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b90565b62000450816200067860201b620000581760201c565b620004b45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200032f565b80620003616000805160206200109b83398151915260001b6200043760201b620000551760201c565b60606001600160a01b0384163b620005475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200032f565b600080856001600160a01b03168560405162000564919062000c60565b600060405180830381855af49150503d8060008114620005a1576040519150601f19603f3d011682016040523d82523d6000602084013e620005a6565b606091505b509092509050620005b982828662000687565b925050505b9392505050565b620005db816200067860201b620000581760201c565b6200064f5760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e747261637400000000000000000060648201526084016200032f565b8062000361600080516020620010e283398151915260001b6200043760201b620000551760201c565b6001600160a01b03163b151590565b6060831562000698575081620005be565b825115620006a95782518084602001fd5b8160405162461bcd60e51b81526004016200032f919062000c7e565b60405161014081016001600160401b0381118282101715620006f757634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101c081016001600160401b0381118282101715620006f757634e487b7160e01b600052604160045260246000fd5b80516001600160401b03811681146200074757600080fd5b919050565b80516001600160a01b03811681146200074757600080fd5b6000608082840312156200077757600080fd5b604051608081016001600160401b0381118282101715620007a857634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006101408284031215620007ed57600080fd5b620007f7620006c5565b905062000804826200074c565b815262000814602083016200074c565b602082015262000827604083016200074c565b60408201526200083a606083016200074c565b60608201526200084d608083016200074c565b60808201526200086060a083016200074c565b60a08201526200087360c083016200074c565b60c08201526200088660e083016200074c565b60e08201526101006200089b8184016200074c565b90820152610120620008af8382016200074c565b9082015292915050565b600080828403610360811215620008cf57600080fd5b61022080821215620008e057600080fd5b620008ea620006fd565b9150620008f7856200072f565b825262000907602086016200074c565b602083015260408501516040830152606085015160608301526200092e608086016200074c565b60808301526200094160a086016200074c565b60a083015260c085015160c08301526200095e60e086016200072f565b60e083015261010085810151908301526101206200097f8782880162000764565b908301526101a0858101516101408401526101c08601516101608401526101e0860151610180840152620009b761020087016200074c565b8184015250819350620009cd86828701620007d9565b925050509250929050565b80516001600160a01b03168252602081015162000a0060208401826001600160a01b03169052565b50604081015162000a1c60408401826001600160a01b03169052565b50606081015162000a3860608401826001600160a01b03169052565b50608081015162000a5460808401826001600160a01b03169052565b5060a081015162000a7060a08401826001600160a01b03169052565b5060c081015162000a8c60c08401826001600160a01b03169052565b5060e081015162000aa860e08401826001600160a01b03169052565b50610100818101516001600160a01b038116848301525050610120818101516001600160a01b0381168483015262000282565b82516001600160401b031681526103608101602084015162000b0860208401826001600160a01b03169052565b506040840151604083015260608401516060830152608084015162000b3860808401826001600160a01b03169052565b5060a084015162000b5460a08401826001600160a01b03169052565b5060c084015160c083015260e084015162000b7a60e08401826001600160401b03169052565b5061010084810151908301526101208085015180518285015260208101516101408501526040810151610160850152606081015161018085015250506101408401516101a0838101919091526101608501516101c08401526101808501516101e08401528401516001600160a01b03811661020084015250620005be610220830184620009d8565b81810381811115620003ef57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b60005b8381101562000c5757818101518382015260200162000c3d565b50506000910152565b6000825162000c7481846020870162000c3a565b9190910192915050565b602081526000825180602084015262000c9f81604085016020870162000c3a565b601f01601f19169190910160400192915050565b6103b88062000cc36000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61012d565b565b606061004e838360405180606001604052806027815260200161035c60279139610151565b9392505050565b90565b6001600160a01b03163b151590565b600060043610156100ad5760405162461bcd60e51b815260206004820152600b60248201526a4e4f5f46554e435f53494760a81b60448201526064015b60405180910390fd5b6000336100b861022c565b6001600160a01b0316036100d3576100ce61025f565b6100db565b6100db610287565b90506100e681610058565b6101285760405162461bcd60e51b815260206004820152601360248201527215105491d15517d393d517d0d3d395149050d5606a1b60448201526064016100a4565b919050565b3660008037600080366000845af43d6000803e80801561014c573d6000f35b3d6000fd5b606061015c84610058565b6101b75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100a4565b600080856001600160a01b0316856040516101d2919061030c565b600060405180830381855af49150503d806000811461020d576040519150601f19603f3d011682016040523d82523d6000602084013e610212565b606091505b50915091506102228282866102af565b9695505050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610250565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d610250565b606083156102be57508161004e565b8251156102ce5782518084602001fd5b8160405162461bcd60e51b81526004016100a49190610328565b60005b838110156103035781810151838201526020016102eb565b50506000910152565b6000825161031e8184602087016102e8565b9190910192915050565b60208152600082518060208401526103478160408501602087016102e8565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205653f15162c8a9cf6623c39ebf7abda3d788133d4d4a8daa4db0188b4d038a3964736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65642b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546da26469706673582212206affd7f0f1a7949556dbf26b2a2b6f3e966bd4bff5879c688ba43b280a830b8564736f6c63430008110033",
}

// RollupCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCreatorMetaData.ABI instead.
var RollupCreatorABI = RollupCreatorMetaData.ABI

// RollupCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupCreatorMetaData.Bin instead.
var RollupCreatorBin = RollupCreatorMetaData.Bin

// DeployRollupCreator deploys a new Ethereum contract, binding an instance of RollupCreator to it.
func DeployRollupCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupCreator, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// RollupCreator is an auto generated Go binding around an Ethereum contract.
type RollupCreator struct {
	RollupCreatorCaller     // Read-only binding to the contract
	RollupCreatorTransactor // Write-only binding to the contract
	RollupCreatorFilterer   // Log filterer for contract events
}

// RollupCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCreatorSession struct {
	Contract     *RollupCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCreatorCallerSession struct {
	Contract *RollupCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// RollupCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCreatorTransactorSession struct {
	Contract     *RollupCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// RollupCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCreatorRaw struct {
	Contract *RollupCreator // Generic contract binding to access the raw methods on
}

// RollupCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCreatorCallerRaw struct {
	Contract *RollupCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCreatorTransactorRaw struct {
	Contract *RollupCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCreator creates a new instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreator(address common.Address, backend bind.ContractBackend) (*RollupCreator, error) {
	contract, err := bindRollupCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// NewRollupCreatorCaller creates a new read-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorCaller(address common.Address, caller bind.ContractCaller) (*RollupCreatorCaller, error) {
	contract, err := bindRollupCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorCaller{contract: contract}, nil
}

// NewRollupCreatorTransactor creates a new write-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCreatorTransactor, error) {
	contract, err := bindRollupCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTransactor{contract: contract}, nil
}

// NewRollupCreatorFilterer creates a new log filterer instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCreatorFilterer, error) {
	contract, err := bindRollupCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorFilterer{contract: contract}, nil
}

// bindRollupCreator binds a generic wrapper to an already deployed contract.
func bindRollupCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupCreatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.RollupCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transact(opts, method, params...)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) BridgeCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "bridgeCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ChallengeManagerTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "challengeManagerTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Osp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "osp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupAdminLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupAdminLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupUserLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupUserLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCreator *RollupCreatorSession) ValidatorUtils() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorUtils(&_RollupCreator.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorUtils(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x04f12448.
//
// Solidity: function createRollup((uint64,address,uint256,bytes32,address,address,uint256,uint64,uint256,(uint256,uint256,uint256,uint256),uint256,uint256,uint256,address) config, address expectedRollupAddr) returns(address)
func (_RollupCreator *RollupCreatorTransactor) CreateRollup(opts *bind.TransactOpts, config Config, expectedRollupAddr common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "createRollup", config, expectedRollupAddr)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x04f12448.
//
// Solidity: function createRollup((uint64,address,uint256,bytes32,address,address,uint256,uint64,uint256,(uint256,uint256,uint256,uint256),uint256,uint256,uint256,address) config, address expectedRollupAddr) returns(address)
func (_RollupCreator *RollupCreatorSession) CreateRollup(config Config, expectedRollupAddr common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, config, expectedRollupAddr)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x04f12448.
//
// Solidity: function createRollup((uint64,address,uint256,bytes32,address,address,uint256,uint64,uint256,(uint256,uint256,uint256,uint256),uint256,uint256,uint256,address) config, address expectedRollupAddr) returns(address)
func (_RollupCreator *RollupCreatorTransactorSession) CreateRollup(config Config, expectedRollupAddr common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, config, expectedRollupAddr)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xe8a1a09f.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _validatorUtils, address _validatorWalletCreator) returns()
func (_RollupCreator *RollupCreatorTransactor) SetTemplates(opts *bind.TransactOpts, _bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _validatorUtils common.Address, _validatorWalletCreator common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "setTemplates", _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _validatorUtils, _validatorWalletCreator)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xe8a1a09f.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _validatorUtils, address _validatorWalletCreator) returns()
func (_RollupCreator *RollupCreatorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _validatorUtils common.Address, _validatorWalletCreator common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _validatorUtils, _validatorWalletCreator)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xe8a1a09f.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _validatorUtils, address _validatorWalletCreator) returns()
func (_RollupCreator *RollupCreatorTransactorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _validatorUtils common.Address, _validatorWalletCreator common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _validatorUtils, _validatorWalletCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// RollupCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferredIterator struct {
	Event *RollupCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RollupCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorOwnershipTransferredIterator{contract: _RollupCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RollupCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorOwnershipTransferred)
				if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*RollupCreatorOwnershipTransferred, error) {
	event := new(RollupCreatorOwnershipTransferred)
	if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorRollupCreatedIterator is returned from FilterRollupCreated and is used to iterate over the raw logs and unpacked data for RollupCreated events raised by the RollupCreator contract.
type RollupCreatorRollupCreatedIterator struct {
	Event *RollupCreatorRollupCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorRollupCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorRollupCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorRollupCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorRollupCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorRollupCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorRollupCreated represents a RollupCreated event raised by the RollupCreator contract.
type RollupCreatorRollupCreated struct {
	RollupAddress  common.Address
	InboxAddress   common.Address
	AdminProxy     common.Address
	SequencerInbox common.Address
	Bridge         common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupCreated is a free log retrieval operation binding the contract event 0x9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc9.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address inboxAddress, address adminProxy, address sequencerInbox, address bridge)
func (_RollupCreator *RollupCreatorFilterer) FilterRollupCreated(opts *bind.FilterOpts, rollupAddress []common.Address) (*RollupCreatorRollupCreatedIterator, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "RollupCreated", rollupAddressRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorRollupCreatedIterator{contract: _RollupCreator.contract, event: "RollupCreated", logs: logs, sub: sub}, nil
}

// WatchRollupCreated is a free log subscription operation binding the contract event 0x9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc9.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address inboxAddress, address adminProxy, address sequencerInbox, address bridge)
func (_RollupCreator *RollupCreatorFilterer) WatchRollupCreated(opts *bind.WatchOpts, sink chan<- *RollupCreatorRollupCreated, rollupAddress []common.Address) (event.Subscription, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "RollupCreated", rollupAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorRollupCreated)
				if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupCreated is a log parse operation binding the contract event 0x9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc9.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address inboxAddress, address adminProxy, address sequencerInbox, address bridge)
func (_RollupCreator *RollupCreatorFilterer) ParseRollupCreated(log types.Log) (*RollupCreatorRollupCreated, error) {
	event := new(RollupCreatorRollupCreated)
	if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdatedIterator struct {
	Event *RollupCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*RollupCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTemplatesUpdatedIterator{contract: _RollupCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *RollupCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorTemplatesUpdated)
				if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*RollupCreatorTemplatesUpdated, error) {
	event := new(RollupCreatorTemplatesUpdated)
	if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxMetaData contains all meta data concerning the RollupEventInbox contract.
var RollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b5060805161047e61002f600039600060c5015261047e6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063c4d66de814610051578063cb23bcb514610066578063e199be3514610095578063e78cea92146100a8575b600080fd5b61006461005f366004610387565b6100bb565b005b600154610079906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100646100a33660046103ab565b61023e565b600054610079906001600160a01b031681565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361014d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b6000546001600160a01b03161561017757604051633bcd329760e21b815260040160405180910390fd5b6001600160a01b03811661019e57604051631ad0f74360e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040805163cb23bcb560e01b8152905163cb23bcb5916004808201926020929091908290030181865afa1580156101f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021b91906103c4565b600180546001600160a01b0319166001600160a01b039290921691909117905550565b6001546001600160a01b031633146102865760405162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b6044820152606401610144565b60008160405160200161029b91815260200190565b60408051808303601f19018152908290526000805482516020840120638db5993b60e01b8552600b6004860152602485018390526044850152919350916001600160a01b0390911690638db5993b906064016020604051808303816000875af115801561030c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033091906103e1565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b8360405161036291906103fa565b60405180910390a2505050565b6001600160a01b038116811461038457600080fd5b50565b60006020828403121561039957600080fd5b81356103a48161036f565b9392505050565b6000602082840312156103bd57600080fd5b5035919050565b6000602082840312156103d657600080fd5b81516103a48161036f565b6000602082840312156103f357600080fd5b5051919050565b600060208083528351808285015260005b818110156104275785810183015185820160400152820161040b565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220f0778262e2de511e4e15006f21bb2404f2a31f356f394e3dfaa5d318799ed93664736f6c63430008110033",
}

// RollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupEventInboxMetaData.ABI instead.
var RollupEventInboxABI = RollupEventInboxMetaData.ABI

// RollupEventInboxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupEventInboxMetaData.Bin instead.
var RollupEventInboxBin = RollupEventInboxMetaData.Bin

// DeployRollupEventInbox deploys a new Ethereum contract, binding an instance of RollupEventInbox to it.
func DeployRollupEventInbox(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupEventInbox, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupEventInboxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// RollupEventInbox is an auto generated Go binding around an Ethereum contract.
type RollupEventInbox struct {
	RollupEventInboxCaller     // Read-only binding to the contract
	RollupEventInboxTransactor // Write-only binding to the contract
	RollupEventInboxFilterer   // Log filterer for contract events
}

// RollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupEventInboxSession struct {
	Contract     *RollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupEventInboxCallerSession struct {
	Contract *RollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupEventInboxTransactorSession struct {
	Contract     *RollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupEventInboxRaw struct {
	Contract *RollupEventInbox // Generic contract binding to access the raw methods on
}

// RollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupEventInboxCallerRaw struct {
	Contract *RollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// RollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactorRaw struct {
	Contract *RollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupEventInbox creates a new instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInbox(address common.Address, backend bind.ContractBackend) (*RollupEventInbox, error) {
	contract, err := bindRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// NewRollupEventInboxCaller creates a new read-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*RollupEventInboxCaller, error) {
	contract, err := bindRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxCaller{contract: contract}, nil
}

// NewRollupEventInboxTransactor creates a new write-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupEventInboxTransactor, error) {
	contract, err := bindRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxTransactor{contract: contract}, nil
}

// NewRollupEventInboxFilterer creates a new log filterer instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupEventInboxFilterer, error) {
	contract, err := bindRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxFilterer{contract: contract}, nil
}

// bindRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupEventInboxABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.RollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_RollupEventInbox *RollupEventInboxSession) RollupInitialized(chainId *big.Int) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xe199be35.
//
// Solidity: function rollupInitialized(uint256 chainId) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId)
}

// RollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredIterator struct {
	Event *RollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDelivered)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*RollupEventInboxInboxMessageDelivered, error) {
	event := new(RollupEventInboxInboxMessageDelivered)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *RollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*RollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupLibMetaData contains all meta data concerning the RollupLib contract.
var RollupLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e2b3da9838d484172651e07cb4d3529e92a54dca9796a0313fcdda3f2aa26bd64736f6c63430008110033",
}

// RollupLibABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupLibMetaData.ABI instead.
var RollupLibABI = RollupLibMetaData.ABI

// RollupLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupLibMetaData.Bin instead.
var RollupLibBin = RollupLibMetaData.Bin

// DeployRollupLib deploys a new Ethereum contract, binding an instance of RollupLib to it.
func DeployRollupLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupLib, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// RollupLib is an auto generated Go binding around an Ethereum contract.
type RollupLib struct {
	RollupLibCaller     // Read-only binding to the contract
	RollupLibTransactor // Write-only binding to the contract
	RollupLibFilterer   // Log filterer for contract events
}

// RollupLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupLibSession struct {
	Contract     *RollupLib        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupLibCallerSession struct {
	Contract *RollupLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// RollupLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupLibTransactorSession struct {
	Contract     *RollupLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// RollupLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupLibRaw struct {
	Contract *RollupLib // Generic contract binding to access the raw methods on
}

// RollupLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupLibCallerRaw struct {
	Contract *RollupLibCaller // Generic read-only contract binding to access the raw methods on
}

// RollupLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupLibTransactorRaw struct {
	Contract *RollupLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupLib creates a new instance of RollupLib, bound to a specific deployed contract.
func NewRollupLib(address common.Address, backend bind.ContractBackend) (*RollupLib, error) {
	contract, err := bindRollupLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// NewRollupLibCaller creates a new read-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibCaller(address common.Address, caller bind.ContractCaller) (*RollupLibCaller, error) {
	contract, err := bindRollupLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibCaller{contract: contract}, nil
}

// NewRollupLibTransactor creates a new write-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupLibTransactor, error) {
	contract, err := bindRollupLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibTransactor{contract: contract}, nil
}

// NewRollupLibFilterer creates a new log filterer instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupLibFilterer, error) {
	contract, err := bindRollupLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupLibFilterer{contract: contract}, nil
}

// bindRollupLib binds a generic wrapper to an already deployed contract.
func bindRollupLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupLibABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.RollupLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transact(opts, method, params...)
}

// RollupProxyMetaData contains all meta data concerning the RollupProxy contract.
var RollupProxyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"genesisBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"miniStakeValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInbox\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162001102380380620011028339810160408190526200003491620008b9565b60c0810151604051636ba2aae960e11b9062000057908590859060240162000adb565b60408051808303601f19018152918152602080830180516001600160e01b0319959095166001600160e01b0395861617905260e08601518782015183516001600160a01b03909116602480830191909152845180830390910181526044909101909352908201805190941663189acdbd60e31b1790935260808601519192916200010360017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610462000c02565b6000805160206200107b8339815191521462000123576200012362000c24565b6200015060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd62000c02565b6000805160206200109b8339815191521462000170576200017062000c24565b6200019d60017f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546e62000c02565b600080516020620010e283398151915214620001bd57620001bd62000c24565b620001c881620001f1565b620001d6858560006200024c565b620001e48383600062000289565b5050505050505062000cb3565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200021c62000294565b604080516001600160a01b03928316815291841660208301520160405180910390a16200024981620002cd565b50565b620002578362000382565b600082511180620002655750805b156200028457620002828383620003c460201b620000291760201c565b505b505050565b6200025783620003f5565b6000620002be6000805160206200107b83398151915260001b6200043760201b620000551760201c565b546001600160a01b0316919050565b6001600160a01b038116620003385760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620003616000805160206200107b83398151915260001b6200043760201b620000551760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200038d816200043a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620003ec8383604051806060016040528060278152602001620010bb60279139620004dd565b90505b92915050565b6200040081620005c5565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b90565b62000450816200067860201b620000581760201c565b620004b45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200032f565b80620003616000805160206200109b83398151915260001b6200043760201b620000551760201c565b60606001600160a01b0384163b620005475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200032f565b600080856001600160a01b03168560405162000564919062000c60565b600060405180830381855af49150503d8060008114620005a1576040519150601f19603f3d011682016040523d82523d6000602084013e620005a6565b606091505b509092509050620005b982828662000687565b925050505b9392505050565b620005db816200067860201b620000581760201c565b6200064f5760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e747261637400000000000000000060648201526084016200032f565b8062000361600080516020620010e283398151915260001b6200043760201b620000551760201c565b6001600160a01b03163b151590565b6060831562000698575081620005be565b825115620006a95782518084602001fd5b8160405162461bcd60e51b81526004016200032f919062000c7e565b60405161014081016001600160401b0381118282101715620006f757634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101c081016001600160401b0381118282101715620006f757634e487b7160e01b600052604160045260246000fd5b80516001600160401b03811681146200074757600080fd5b919050565b80516001600160a01b03811681146200074757600080fd5b6000608082840312156200077757600080fd5b604051608081016001600160401b0381118282101715620007a857634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006101408284031215620007ed57600080fd5b620007f7620006c5565b905062000804826200074c565b815262000814602083016200074c565b602082015262000827604083016200074c565b60408201526200083a606083016200074c565b60608201526200084d608083016200074c565b60808201526200086060a083016200074c565b60a08201526200087360c083016200074c565b60c08201526200088660e083016200074c565b60e08201526101006200089b8184016200074c565b90820152610120620008af8382016200074c565b9082015292915050565b600080828403610360811215620008cf57600080fd5b61022080821215620008e057600080fd5b620008ea620006fd565b9150620008f7856200072f565b825262000907602086016200074c565b602083015260408501516040830152606085015160608301526200092e608086016200074c565b60808301526200094160a086016200074c565b60a083015260c085015160c08301526200095e60e086016200072f565b60e083015261010085810151908301526101206200097f8782880162000764565b908301526101a0858101516101408401526101c08601516101608401526101e0860151610180840152620009b761020087016200074c565b8184015250819350620009cd86828701620007d9565b925050509250929050565b80516001600160a01b03168252602081015162000a0060208401826001600160a01b03169052565b50604081015162000a1c60408401826001600160a01b03169052565b50606081015162000a3860608401826001600160a01b03169052565b50608081015162000a5460808401826001600160a01b03169052565b5060a081015162000a7060a08401826001600160a01b03169052565b5060c081015162000a8c60c08401826001600160a01b03169052565b5060e081015162000aa860e08401826001600160a01b03169052565b50610100818101516001600160a01b038116848301525050610120818101516001600160a01b0381168483015262000282565b82516001600160401b031681526103608101602084015162000b0860208401826001600160a01b03169052565b506040840151604083015260608401516060830152608084015162000b3860808401826001600160a01b03169052565b5060a084015162000b5460a08401826001600160a01b03169052565b5060c084015160c083015260e084015162000b7a60e08401826001600160401b03169052565b5061010084810151908301526101208085015180518285015260208101516101408501526040810151610160850152606081015161018085015250506101408401516101a0838101919091526101608501516101c08401526101808501516101e08401528401516001600160a01b03811661020084015250620005be610220830184620009d8565b81810381811115620003ef57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b60005b8381101562000c5757818101518382015260200162000c3d565b50506000910152565b6000825162000c7481846020870162000c3a565b9190910192915050565b602081526000825180602084015262000c9f81604085016020870162000c3a565b601f01601f19169190910160400192915050565b6103b88062000cc36000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b61012d565b565b606061004e838360405180606001604052806027815260200161035c60279139610151565b9392505050565b90565b6001600160a01b03163b151590565b600060043610156100ad5760405162461bcd60e51b815260206004820152600b60248201526a4e4f5f46554e435f53494760a81b60448201526064015b60405180910390fd5b6000336100b861022c565b6001600160a01b0316036100d3576100ce61025f565b6100db565b6100db610287565b90506100e681610058565b6101285760405162461bcd60e51b815260206004820152601360248201527215105491d15517d393d517d0d3d395149050d5606a1b60448201526064016100a4565b919050565b3660008037600080366000845af43d6000803e80801561014c573d6000f35b3d6000fd5b606061015c84610058565b6101b75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100a4565b600080856001600160a01b0316856040516101d2919061030c565b600060405180830381855af49150503d806000811461020d576040519150601f19603f3d011682016040523d82523d6000602084013e610212565b606091505b50915091506102228282866102af565b9695505050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610250565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d610250565b606083156102be57508161004e565b8251156102ce5782518084602001fd5b8160405162461bcd60e51b81526004016100a49190610328565b60005b838110156103035781810151838201526020016102eb565b50506000910152565b6000825161031e8184602087016102e8565b9190910192915050565b60208152600082518060208401526103478160408501602087016102e8565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205653f15162c8a9cf6623c39ebf7abda3d788133d4d4a8daa4db0188b4d038a3964736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65642b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d",
}

// RollupProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupProxyMetaData.ABI instead.
var RollupProxyABI = RollupProxyMetaData.ABI

// RollupProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupProxyMetaData.Bin instead.
var RollupProxyBin = RollupProxyMetaData.Bin

// DeployRollupProxy deploys a new Ethereum contract, binding an instance of RollupProxy to it.
func DeployRollupProxy(auth *bind.TransactOpts, backend bind.ContractBackend, config Config, connectedContracts ContractDependencies) (common.Address, *types.Transaction, *RollupProxy, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupProxyBin), backend, config, connectedContracts)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// RollupProxy is an auto generated Go binding around an Ethereum contract.
type RollupProxy struct {
	RollupProxyCaller     // Read-only binding to the contract
	RollupProxyTransactor // Write-only binding to the contract
	RollupProxyFilterer   // Log filterer for contract events
}

// RollupProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupProxySession struct {
	Contract     *RollupProxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupProxyCallerSession struct {
	Contract *RollupProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// RollupProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupProxyTransactorSession struct {
	Contract     *RollupProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// RollupProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupProxyRaw struct {
	Contract *RollupProxy // Generic contract binding to access the raw methods on
}

// RollupProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupProxyCallerRaw struct {
	Contract *RollupProxyCaller // Generic read-only contract binding to access the raw methods on
}

// RollupProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupProxyTransactorRaw struct {
	Contract *RollupProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupProxy creates a new instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxy(address common.Address, backend bind.ContractBackend) (*RollupProxy, error) {
	contract, err := bindRollupProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// NewRollupProxyCaller creates a new read-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyCaller(address common.Address, caller bind.ContractCaller) (*RollupProxyCaller, error) {
	contract, err := bindRollupProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyCaller{contract: contract}, nil
}

// NewRollupProxyTransactor creates a new write-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupProxyTransactor, error) {
	contract, err := bindRollupProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyTransactor{contract: contract}, nil
}

// NewRollupProxyFilterer creates a new log filterer instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupProxyFilterer, error) {
	contract, err := bindRollupProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupProxyFilterer{contract: contract}, nil
}

// bindRollupProxy binds a generic wrapper to an already deployed contract.
func bindRollupProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.RollupProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxySession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// RollupProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupProxy contract.
type RollupProxyAdminChangedIterator struct {
	Event *RollupProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyAdminChanged represents a AdminChanged event raised by the RollupProxy contract.
type RollupProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupProxyAdminChangedIterator, error) {

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupProxyAdminChangedIterator{contract: _RollupProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyAdminChanged)
				if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) ParseAdminChanged(log types.Log) (*RollupProxyAdminChanged, error) {
	event := new(RollupProxyAdminChanged)
	if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupProxy contract.
type RollupProxyBeaconUpgradedIterator struct {
	Event *RollupProxyBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyBeaconUpgraded represents a BeaconUpgraded event raised by the RollupProxy contract.
type RollupProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyBeaconUpgradedIterator{contract: _RollupProxy.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyBeaconUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) ParseBeaconUpgraded(log types.Log) (*RollupProxyBeaconUpgraded, error) {
	event := new(RollupProxyBeaconUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupProxy contract.
type RollupProxyUpgradedIterator struct {
	Event *RollupProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgraded represents a Upgraded event raised by the RollupProxy contract.
type RollupProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedIterator{contract: _RollupProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgraded(log types.Log) (*RollupProxyUpgraded, error) {
	event := new(RollupProxyUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupProxy contract.
type RollupProxyUpgradedSecondaryIterator struct {
	Event *RollupProxyUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgradedSecondary represents a UpgradedSecondary event raised by the RollupProxy contract.
type RollupProxyUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedSecondaryIterator{contract: _RollupProxy.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgradedSecondary)
				if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgradedSecondary(log types.Log) (*RollupProxyUpgradedSecondary, error) {
	event := new(RollupProxyUpgradedSecondary)
	if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicMetaData contains all meta data concerning the RollupUserLogic contract.
var RollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"computeAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"winningEdgeId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"prevConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"confirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"fastConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"fastConfirmNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// RollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupUserLogicMetaData.ABI instead.
var RollupUserLogicABI = RollupUserLogicMetaData.ABI

// RollupUserLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupUserLogicMetaData.Bin instead.
var RollupUserLogicBin = RollupUserLogicMetaData.Bin

// DeployRollupUserLogic deploys a new Ethereum contract, binding an instance of RollupUserLogic to it.
func DeployRollupUserLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupUserLogic, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupUserLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// RollupUserLogic is an auto generated Go binding around an Ethereum contract.
type RollupUserLogic struct {
	RollupUserLogicCaller     // Read-only binding to the contract
	RollupUserLogicTransactor // Write-only binding to the contract
	RollupUserLogicFilterer   // Log filterer for contract events
}

// RollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupUserLogicSession struct {
	Contract     *RollupUserLogic  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupUserLogicCallerSession struct {
	Contract *RollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// RollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupUserLogicTransactorSession struct {
	Contract     *RollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// RollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupUserLogicRaw struct {
	Contract *RollupUserLogic // Generic contract binding to access the raw methods on
}

// RollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupUserLogicCallerRaw struct {
	Contract *RollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactorRaw struct {
	Contract *RollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupUserLogic creates a new instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogic(address common.Address, backend bind.ContractBackend) (*RollupUserLogic, error) {
	contract, err := bindRollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// NewRollupUserLogicCaller creates a new read-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupUserLogicCaller, error) {
	contract, err := bindRollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicCaller{contract: contract}, nil
}

// NewRollupUserLogicTransactor creates a new write-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupUserLogicTransactor, error) {
	contract, err := bindRollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicTransactor{contract: contract}, nil
}

// NewRollupUserLogicFilterer creates a new log filterer instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupUserLogicFilterer, error) {
	contract, err := bindRollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicFilterer{contract: contract}, nil
}

// bindRollupUserLogic binds a generic wrapper to an already deployed contract.
func bindRollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RollupUserLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.RollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupUserLogic *RollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupUserLogic *RollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupUserLogic.Contract.AnyTrustFastConfirmer(&_RollupUserLogic.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupUserLogic.Contract.AnyTrustFastConfirmer(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x6b00cea9.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ComputeAssertionHash(opts *bind.CallOpts, prevAssertionHash [32]byte, state ExecutionState, inboxAcc [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "computeAssertionHash", prevAssertionHash, state, inboxAcc)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x6b00cea9.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ComputeAssertionHash(prevAssertionHash [32]byte, state ExecutionState, inboxAcc [32]byte) ([32]byte, error) {
	return _RollupUserLogic.Contract.ComputeAssertionHash(&_RollupUserLogic.CallOpts, prevAssertionHash, state, inboxAcc)
}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x6b00cea9.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ComputeAssertionHash(prevAssertionHash [32]byte, state ExecutionState, inboxAcc [32]byte) ([32]byte, error) {
	return _RollupUserLogic.Contract.ComputeAssertionHash(&_RollupUserLogic.CallOpts, prevAssertionHash, state, inboxAcc)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupUserLogic.Contract.GenesisAssertionHash(&_RollupUserLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupUserLogic.Contract.GenesisAssertionHash(&_RollupUserLogic.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupUserLogic.Contract.GetAssertion(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupUserLogic.Contract.GetAssertion(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetFirstChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetFirstChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetSecondChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetSecondChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupUserLogic *RollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupUserLogic *RollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) Initialize(opts *bind.CallOpts, _stakeToken common.Address) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "initialize", _stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsFirstChild(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsFirstChild(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsPending(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsPending(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) LatestConfirmed() ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestStakedAssertion(&_RollupUserLogic.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestStakedAssertion(&_RollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupUserLogic.Contract.ValidateAssertionHash(&_RollupUserLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupUserLogic.Contract.ValidateAssertionHash(&_RollupUserLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupUserLogic.Contract.ValidateConfig(&_RollupUserLogic.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupUserLogic.Contract.ValidateConfig(&_RollupUserLogic.CallOpts, assertionHash, configData)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorUtils(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorUtils")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorUtils() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorUtils(&_RollupUserLogic.CallOpts)
}

// ValidatorUtils is a free data retrieval call binding the contract method 0x014cc92c.
//
// Solidity: function validatorUtils() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorUtils() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorUtils(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "confirmAssertion", assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x42500b85.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) FastConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "fastConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x42500b85.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicSession) FastConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x42500b85.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) FastConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6e981c75.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) FastConfirmNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "fastConfirmNewAssertion", assertion, expectedAssertionHash)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6e981c75.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) FastConfirmNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6e981c75.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) FastConfirmNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnNewAssertion(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnNewAssertion", tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnNewAssertion(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnNewAssertion(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "returnOldDeposit")
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) StakeOnNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "stakeOnNewAssertion", assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// RollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupUserLogic contract.
type RollupUserLogicAdminChangedIterator struct {
	Event *RollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAdminChanged represents a AdminChanged event raised by the RollupUserLogic contract.
type RollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAdminChangedIterator{contract: _RollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAdminChanged)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*RollupUserLogicAdminChanged, error) {
	event := new(RollupUserLogicAdminChanged)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupUserLogic contract.
type RollupUserLogicAssertionConfirmedIterator struct {
	Event *RollupUserLogicAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAssertionConfirmed represents a AssertionConfirmed event raised by the RollupUserLogic contract.
type RollupUserLogicAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupUserLogicAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAssertionConfirmedIterator{contract: _RollupUserLogic.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAssertionConfirmed)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAssertionConfirmed(log types.Log) (*RollupUserLogicAssertionConfirmed, error) {
	event := new(RollupUserLogicAssertionConfirmed)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupUserLogic contract.
type RollupUserLogicAssertionCreatedIterator struct {
	Event *RollupUserLogicAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAssertionCreated represents a AssertionCreated event raised by the RollupUserLogic contract.
type RollupUserLogicAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupUserLogicAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAssertionCreatedIterator{contract: _RollupUserLogic.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAssertionCreated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAssertionCreated(log types.Log) (*RollupUserLogicAssertionCreated, error) {
	event := new(RollupUserLogicAssertionCreated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgradedIterator struct {
	Event *RollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicBeaconUpgradedIterator{contract: _RollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicBeaconUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupUserLogicBeaconUpgraded, error) {
	event := new(RollupUserLogicBeaconUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupUserLogic contract.
type RollupUserLogicInitializedIterator struct {
	Event *RollupUserLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicInitialized represents a Initialized event raised by the RollupUserLogic contract.
type RollupUserLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupUserLogicInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicInitializedIterator{contract: _RollupUserLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseInitialized(log types.Log) (*RollupUserLogicInitialized, error) {
	event := new(RollupUserLogicInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupUserLogic contract.
type RollupUserLogicPausedIterator struct {
	Event *RollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicPaused represents a Paused event raised by the RollupUserLogic contract.
type RollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupUserLogicPausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicPausedIterator{contract: _RollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicPaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParsePaused(log types.Log) (*RollupUserLogicPaused, error) {
	event := new(RollupUserLogicPaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStartedIterator struct {
	Event *RollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupChallengeStartedIterator{contract: _RollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupChallengeStarted)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupUserLogicRollupChallengeStarted, error) {
	event := new(RollupUserLogicRollupChallengeStarted)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitializedIterator struct {
	Event *RollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupInitialized represents a RollupInitialized event raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupInitializedIterator{contract: _RollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupUserLogicRollupInitialized, error) {
	event := new(RollupUserLogicRollupInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupUserLogic contract.
type RollupUserLogicUnpausedIterator struct {
	Event *RollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUnpaused represents a Unpaused event raised by the RollupUserLogic contract.
type RollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUnpausedIterator{contract: _RollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUnpaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUnpaused(log types.Log) (*RollupUserLogicUnpaused, error) {
	event := new(RollupUserLogicUnpaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedIterator struct {
	Event *RollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgraded represents a Upgraded event raised by the RollupUserLogic contract.
type RollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedIterator{contract: _RollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgraded(log types.Log) (*RollupUserLogicUpgraded, error) {
	event := new(RollupUserLogicUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondaryIterator struct {
	Event *RollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedSecondaryIterator{contract: _RollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgradedSecondary)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupUserLogicUpgradedSecondary, error) {
	event := new(RollupUserLogicUpgradedSecondary)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdatedIterator struct {
	Event *RollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserStakeUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserStakeUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupUserLogicUserStakeUpdated, error) {
	event := new(RollupUserLogicUserStakeUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserWithdrawableFundsUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupUserLogicUserWithdrawableFundsUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletMetaData contains all meta data concerning the ValidatorWallet contract.
var ValidatorWalletMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"BadArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"NotExecutorOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"OnlyOwnerDestination\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawEthFail\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AllowedExecutorDestinationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExecutor\",\"type\":\"bool\"}],\"name\":\"ExecutorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedExecutorDestinations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransactionWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactionsWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isSet\",\"type\":\"bool[]\"}],\"name\":\"setAllowedExecutorDestinations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newExecutors\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isExecutor\",\"type\":\"bool[]\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOldChallengeManager\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"challenges\",\"type\":\"uint64[]\"}],\"name\":\"timeoutChallenges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"contractIOldChallengeManager\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"challenges\",\"type\":\"uint64[]\"}],\"name\":\"timeoutChallengesWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"validateExecuteTransaction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051611a5161003060003960006108a10152611a516000f3fe6080604052600436106100d75760003560e01c80639ac2a0111161007a5780639ac2a011146101e75780639be7bbd214610217578063a158657c14610237578063af1b9a0714610257578063c179f1d914610277578063ce1d571f1461028a578063d327821a1461029d578063f2fde38b146102bd57600080fd5b8063097da1f8146100e35780630a2435f8146100f8578063193c8edd146101185780633a7c721a1461015d578063715018a61461017d57806372f458661461019257806377a24f36146101a55780638da5cb5b146101c557600080fd5b366100de57005b600080fd5b6100f66100f136600461134f565b6102dd565b005b34801561010457600080fd5b506100f6610113366004611402565b6104e3565b34801561012457600080fd5b5061014861013336600461146d565b60666020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561016957600080fd5b506100f6610178366004611402565b610661565b34801561018957600080fd5b506100f66107ab565b6100f66101a0366004611491565b6107bf565b3480156101b157600080fd5b506100f66101c036600461152a565b6107d7565b3480156101d157600080fd5b506101da610acb565b6040516101549190611582565b3480156101f357600080fd5b5061014861020236600461146d565b60656020526000908152604090205460ff1681565b34801561022357600080fd5b506100f661023236600461146d565b610ada565b34801561024357600080fd5b506100f6610252366004611596565b610b56565b34801561026357600080fd5b506100f66102723660046115c6565b610bd9565b6100f661028536600461161a565b610be6565b6100f66102983660046116c6565b610f1a565b3480156102a957600080fd5b506100f66102b836600461152a565b610f2e565b3480156102c957600080fd5b506100f66102d836600461146d565b611171565b3360009081526065602052604090205460ff1615801561030d575033610301610acb565b6001600160a01b031614155b1561033757335b60405163f26aea8b60e01b815260040161032e9190611582565b60405180910390fd5b8460005a9050841561036a576001600160a01b0384163b61036a5760405162461bcd60e51b815260040161032e90611722565b61037384610ada565b6000846001600160a01b031684888860405161039092919061174b565b60006040518083038185875af1925050503d80600081146103cd576040519150601f19603f3d011682016040523d82523d6000602084013e6103d2565b606091505b50509050806103e8576040513d806000833e8082fd5b506001600160a01b038216156104da57366000602061040883601f611771565b610412919061178a565b9050610200610422600283611890565b61042c919061178a565b61043782600661189f565b6104419190611771565b61044b9084611771565b925033321461045957600091505b836001600160a01b031663e3db8a49335a61047490876118b6565b856040518463ffffffff1660e01b8152600401610493939291906118c9565b6020604051808303816000875af11580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d691906118f8565b5050505b50505050505050565b6104eb6111e7565b8281146105155760405163088253c360e11b8152600481018490526024810182905260440161032e565b60005b6001600160401b03811684111561065a578282826001600160401b031681811061054457610544611915565b9050602002016020810190610559919061192b565b606560008787856001600160401b031681811061057857610578611915565b905060200201602081019061058d919061146d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905584846001600160401b0383168181106105d0576105d0611915565b90506020020160208101906105e5919061146d565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea28484846001600160401b031681811061062a5761062a611915565b905060200201602081019061063f919061192b565b604051901515815260200160405180910390a2600101610518565b5050505050565b6106696111e7565b8281146106935760405163088253c360e11b8152600481018490526024810182905260440161032e565b60005b8381101561065a578282828181106106b0576106b0611915565b90506020020160208101906106c5919061192b565b606660008787858181106106db576106db611915565b90506020020160208101906106f0919061146d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905584848281811061072a5761072a611915565b905060200201602081019061073f919061146d565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a484848481811061077b5761077b611915565b9050602002016020810190610790919061192b565b604051901515815260200160405180910390a2600101610696565b6107b36111e7565b6107bd6000611246565b565b6107cf6000878787878787610be6565b505050505050565b600054610100900460ff16158080156107f75750600054600160ff909116105b806108115750303b158015610811575060005460ff166001145b6108745760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161032e565b6000805460ff191660011790558015610897576000805461ff0019166101001790555b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109245760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161032e565b61092c611298565b61093584611171565b6001600160a01b038516600081815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a260005b6001600160401b038116831115610a7e576001606660008686856001600160401b03168181106109c4576109c4611915565b90506020020160208101906109d9919061146d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905583836001600160401b038316818110610a1c57610a1c611915565b9050602002016020810190610a31919061146d565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610a6e911515815260200190565b60405180910390a2600101610992565b50801561065a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6033546001600160a01b031690565b6001600160a01b03811660009081526066602052604090205460ff16158015610b13575033610b07610acb565b6001600160a01b031614155b15610b5357610b20610acb565b6040516320fe37c560e11b81526001600160a01b039182166004820152336024820152908216604482015260640161032e565b50565b610b5e6111e7565b6000816001600160a01b03168360405160006040518083038185875af1925050503d8060008114610bab576040519150601f19603f3d011682016040523d82523d6000602084013e610bb0565b606091505b5050905080610bd45781604051630fdb769360e31b815260040161032e9190611582565b505050565b610bd46000848484610f2e565b3360009081526065602052604090205460ff16158015610c16575033610c0a610acb565b6001600160a01b031614155b15610c215733610314565b8660005a905086858114610c525760405163088253c360e11b8152600481018290526024810187905260440161032e565b808414610c7c5760405163088253c360e11b8152600481018290526024810185905260440161032e565b60005b81811015610e1c5760008a8a83818110610c9b57610c9b611915565b9050602002810190610cad9190611948565b90501115610d0a57610cee888883818110610cca57610cca611915565b9050602002016020810190610cdf919061146d565b6001600160a01b03163b151590565b610d0a5760405162461bcd60e51b815260040161032e90611722565b610d34888883818110610d1f57610d1f611915565b9050602002016020810190610232919061146d565b6000888883818110610d4857610d48611915565b9050602002016020810190610d5d919061146d565b6001600160a01b0316878784818110610d7857610d78611915565b905060200201358c8c85818110610d9157610d91611915565b9050602002810190610da39190611948565b604051610db192919061174b565b60006040518083038185875af1925050503d8060008114610dee576040519150601f19603f3d011682016040523d82523d6000602084013e610df3565b606091505b5050905080610e09576040513d806000833e8082fd5b5080610e148161198e565b915050610c7f565b50506001600160a01b03821615610f0f573660006020610e3d83601f611771565b610e47919061178a565b9050610200610e57600283611890565b610e61919061178a565b610e6c82600661189f565b610e769190611771565b610e809084611771565b9250333214610e8e57600091505b836001600160a01b031663e3db8a49335a610ea990876118b6565b856040518463ffffffff1660e01b8152600401610ec8939291906118c9565b6020604051808303816000875af1158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b91906118f8565b5050505b505050505050505050565b610f286000858585856102dd565b50505050565b3360009081526065602052604090205460ff16158015610f5e575033610f52610acb565b6001600160a01b031614155b15610f695733610314565b8360005a90508260005b8181101561108257866001600160a01b0316631b45c86a878784818110610f9c57610f9c611915565b9050602002016020810190610fb191906119a7565b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b158015610ff257600080fd5b505af1925050508015611003575060015b611070573d808015611031576040519150601f19603f3d011682016040523d82523d6000602084013e611036565b606091505b50805160000361106e5760405162461bcd60e51b815260206004820152600360248201526247415360e81b604482015260640161032e565b505b8061107a8161198e565b915050610f73565b50506001600160a01b038216156107cf5736600060206110a383601f611771565b6110ad919061178a565b90506102006110bd600283611890565b6110c7919061178a565b6110d282600661189f565b6110dc9190611771565b6110e69084611771565b92503332146110f457600091505b836001600160a01b031663e3db8a49335a61110f90876118b6565b856040518463ffffffff1660e01b815260040161112e939291906118c9565b6020604051808303816000875af115801561114d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f91906118f8565b6111796111e7565b6001600160a01b0381166111de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032e565b610b5381611246565b336111f0610acb565b6001600160a01b0316146107bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112bf5760405162461bcd60e51b815260040161032e906119d0565b6107bd600054610100900460ff166112e95760405162461bcd60e51b815260040161032e906119d0565b6107bd33611246565b6001600160a01b0381168114610b5357600080fd5b60008083601f84011261131957600080fd5b5081356001600160401b0381111561133057600080fd5b60208301915083602082850101111561134857600080fd5b9250929050565b60008060008060006080868803121561136757600080fd5b8535611372816112f2565b945060208601356001600160401b0381111561138d57600080fd5b61139988828901611307565b90955093505060408601356113ad816112f2565b949793965091946060013592915050565b60008083601f8401126113d057600080fd5b5081356001600160401b038111156113e757600080fd5b6020830191508360208260051b850101111561134857600080fd5b6000806000806040858703121561141857600080fd5b84356001600160401b038082111561142f57600080fd5b61143b888389016113be565b9096509450602087013591508082111561145457600080fd5b50611461878288016113be565b95989497509550505050565b60006020828403121561147f57600080fd5b813561148a816112f2565b9392505050565b600080600080600080606087890312156114aa57600080fd5b86356001600160401b03808211156114c157600080fd5b6114cd8a838b016113be565b909850965060208901359150808211156114e657600080fd5b6114f28a838b016113be565b9096509450604089013591508082111561150b57600080fd5b5061151889828a016113be565b979a9699509497509295939492505050565b6000806000806060858703121561154057600080fd5b843561154b816112f2565b9350602085013561155b816112f2565b925060408501356001600160401b0381111561157657600080fd5b611461878288016113be565b6001600160a01b0391909116815260200190565b600080604083850312156115a957600080fd5b8235915060208301356115bb816112f2565b809150509250929050565b6000806000604084860312156115db57600080fd5b83356115e6816112f2565b925060208401356001600160401b0381111561160157600080fd5b61160d868287016113be565b9497909650939450505050565b60008060008060008060006080888a03121561163557600080fd5b8735611640816112f2565b965060208801356001600160401b038082111561165c57600080fd5b6116688b838c016113be565b909850965060408a013591508082111561168157600080fd5b61168d8b838c016113be565b909650945060608a01359150808211156116a657600080fd5b506116b38a828b016113be565b989b979a50959850939692959293505050565b600080600080606085870312156116dc57600080fd5b84356001600160401b038111156116f257600080fd5b6116fe87828801611307565b9095509350506020850135611712816112f2565b9396929550929360400135925050565b6020808252600f908201526e2727afa1a7a222afa0aa2fa0a2222960891b604082015260600190565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156117845761178461175b565b92915050565b6000826117a757634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156117e75781600019048211156117cd576117cd61175b565b808516156117da57918102915b93841c93908002906117b1565b509250929050565b6000826117fe57506001611784565b8161180b57506000611784565b8160018114611821576002811461182b57611847565b6001915050611784565b60ff84111561183c5761183c61175b565b50506001821b611784565b5060208310610133831016604e8410600b841016171561186a575081810a611784565b61187483836117ac565b80600019048211156118885761188861175b565b029392505050565b600061148a60ff8416836117ef565b80820281158282048414176117845761178461175b565b818103818111156117845761178461175b565b6001600160a01b039390931683526020830191909152604082015260600190565b8015158114610b5357600080fd5b60006020828403121561190a57600080fd5b815161148a816118ea565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561193d57600080fd5b813561148a816118ea565b6000808335601e1984360301811261195f57600080fd5b8301803591506001600160401b0382111561197957600080fd5b60200191503681900382131561134857600080fd5b6000600182016119a0576119a061175b565b5060010190565b6000602082840312156119b957600080fd5b81356001600160401b038116811461148a57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205e61fd5a439127d97b428328c77d1703af5e33811458690229463771d3d46a1d64736f6c63430008110033",
}

// ValidatorWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletMetaData.ABI instead.
var ValidatorWalletABI = ValidatorWalletMetaData.ABI

// ValidatorWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletMetaData.Bin instead.
var ValidatorWalletBin = ValidatorWalletMetaData.Bin

// DeployValidatorWallet deploys a new Ethereum contract, binding an instance of ValidatorWallet to it.
func DeployValidatorWallet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWallet, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// ValidatorWallet is an auto generated Go binding around an Ethereum contract.
type ValidatorWallet struct {
	ValidatorWalletCaller     // Read-only binding to the contract
	ValidatorWalletTransactor // Write-only binding to the contract
	ValidatorWalletFilterer   // Log filterer for contract events
}

// ValidatorWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletSession struct {
	Contract     *ValidatorWallet  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCallerSession struct {
	Contract *ValidatorWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ValidatorWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletTransactorSession struct {
	Contract     *ValidatorWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletRaw struct {
	Contract *ValidatorWallet // Generic contract binding to access the raw methods on
}

// ValidatorWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCallerRaw struct {
	Contract *ValidatorWalletCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactorRaw struct {
	Contract *ValidatorWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWallet creates a new instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWallet(address common.Address, backend bind.ContractBackend) (*ValidatorWallet, error) {
	contract, err := bindValidatorWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// NewValidatorWalletCaller creates a new read-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCaller, error) {
	contract, err := bindValidatorWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCaller{contract: contract}, nil
}

// NewValidatorWalletTransactor creates a new write-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletTransactor, error) {
	contract, err := bindValidatorWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletTransactor{contract: contract}, nil
}

// NewValidatorWalletFilterer creates a new log filterer instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletFilterer, error) {
	contract, err := bindValidatorWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletFilterer{contract: contract}, nil
}

// bindValidatorWallet binds a generic wrapper to an already deployed contract.
func bindValidatorWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorWalletABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.ValidatorWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transact(opts, method, params...)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) AllowedExecutorDestinations(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "allowedExecutorDestinations", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) Executors(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "executors", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCallerSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCaller) ValidateExecuteTransaction(opts *bind.CallOpts, destination common.Address) error {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "validateExecuteTransaction", destination)

	if err != nil {
		return err
	}

	return err

}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCallerSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransaction(opts *bind.TransactOpts, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransaction", data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactions(opts *bind.TransactOpts, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactions", data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionsWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionsWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Initialize(opts *bind.TransactOpts, _executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "initialize", _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetAllowedExecutorDestinations(opts *bind.TransactOpts, destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setAllowedExecutorDestinations", destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetExecutor(opts *bind.TransactOpts, newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setExecutor", newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TimeoutChallenges(opts *bind.TransactOpts, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "timeoutChallenges", manager, challenges)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletSession) TimeoutChallenges(manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallenges(&_ValidatorWallet.TransactOpts, manager, challenges)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TimeoutChallenges(manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallenges(&_ValidatorWallet.TransactOpts, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TimeoutChallengesWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "timeoutChallengesWithGasRefunder", gasRefunder, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletSession) TimeoutChallengesWithGasRefunder(gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallengesWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TimeoutChallengesWithGasRefunder(gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallengesWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, manager, challenges)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) WithdrawEth(opts *bind.TransactOpts, amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "withdrawEth", amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// ValidatorWalletAllowedExecutorDestinationsUpdatedIterator is returned from FilterAllowedExecutorDestinationsUpdated and is used to iterate over the raw logs and unpacked data for AllowedExecutorDestinationsUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdatedIterator struct {
	Event *ValidatorWalletAllowedExecutorDestinationsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletAllowedExecutorDestinationsUpdated represents a AllowedExecutorDestinationsUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdated struct {
	Destination common.Address
	IsSet       bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAllowedExecutorDestinationsUpdated is a free log retrieval operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterAllowedExecutorDestinationsUpdated(opts *bind.FilterOpts, destination []common.Address) (*ValidatorWalletAllowedExecutorDestinationsUpdatedIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletAllowedExecutorDestinationsUpdatedIterator{contract: _ValidatorWallet.contract, event: "AllowedExecutorDestinationsUpdated", logs: logs, sub: sub}, nil
}

// WatchAllowedExecutorDestinationsUpdated is a free log subscription operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchAllowedExecutorDestinationsUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletAllowedExecutorDestinationsUpdated, destination []common.Address) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowedExecutorDestinationsUpdated is a log parse operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseAllowedExecutorDestinationsUpdated(log types.Log) (*ValidatorWalletAllowedExecutorDestinationsUpdated, error) {
	event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletExecutorUpdatedIterator is returned from FilterExecutorUpdated and is used to iterate over the raw logs and unpacked data for ExecutorUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdatedIterator struct {
	Event *ValidatorWalletExecutorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletExecutorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletExecutorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletExecutorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletExecutorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletExecutorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletExecutorUpdated represents a ExecutorUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdated struct {
	Executor   common.Address
	IsExecutor bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecutorUpdated is a free log retrieval operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterExecutorUpdated(opts *bind.FilterOpts, executor []common.Address) (*ValidatorWalletExecutorUpdatedIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletExecutorUpdatedIterator{contract: _ValidatorWallet.contract, event: "ExecutorUpdated", logs: logs, sub: sub}, nil
}

// WatchExecutorUpdated is a free log subscription operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchExecutorUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletExecutorUpdated, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletExecutorUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutorUpdated is a log parse operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseExecutorUpdated(log types.Log) (*ValidatorWalletExecutorUpdated, error) {
	event := new(ValidatorWalletExecutorUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ValidatorWallet contract.
type ValidatorWalletInitializedIterator struct {
	Event *ValidatorWalletInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletInitialized represents a Initialized event raised by the ValidatorWallet contract.
type ValidatorWalletInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterInitialized(opts *bind.FilterOpts) (*ValidatorWalletInitializedIterator, error) {

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletInitializedIterator{contract: _ValidatorWallet.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ValidatorWalletInitialized) (event.Subscription, error) {

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletInitialized)
				if err := _ValidatorWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseInitialized(log types.Log) (*ValidatorWalletInitialized, error) {
	event := new(ValidatorWalletInitialized)
	if err := _ValidatorWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferredIterator struct {
	Event *ValidatorWalletOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletOwnershipTransferredIterator{contract: _ValidatorWallet.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletOwnershipTransferred)
				if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletOwnershipTransferred, error) {
	event := new(ValidatorWalletOwnershipTransferred)
	if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorMetaData contains all meta data concerning the ValidatorWalletCreator contract.
var ValidatorWalletCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"setTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a33610068565b604051610026906100b8565b604051809103906000f080158015610042573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03929092169190911790556100c5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611a8180611c0083390190565b611b2c806100d46000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80631cf89b4b146200006f5780636f2ddd93146200009e578063715018a614620000b257806389c716d114620000be5780638da5cb5b14620000d5578063f2fde38b14620000e7575b600080fd5b62000086620000803660046200047e565b620000fe565b604051620000959190620004f8565b60405180910390f35b60015462000086906001600160a01b031681565b620000bc620002ca565b005b620000bc620000cf36600462000529565b620002e2565b6000546001600160a01b031662000086565b620000bc620000f836600462000529565b62000333565b604051600090339081908390620001159062000462565b604051809103906000f08015801562000132573d6000803e3d6000fd5b506001546040519192506000916001600160a01b03909116908390620001589062000470565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f0801580156200019b573d6000803e3d6000fd5b5060405163f2fde38b60e01b81529091506001600160a01b0383169063f2fde38b90620001cd908690600401620004f8565b600060405180830381600087803b158015620001e857600080fd5b505af1158015620001fd573d6000803e3d6000fd5b5050604051633bd1279b60e11b81526001600160a01b03841692506377a24f3691506200023590879087908c908c906004016200054e565b600060405180830381600087803b1580156200025057600080fd5b505af115801562000265573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b0316826001600160a01b03167f7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee4885604051620002b89190620004f8565b60405180910390a49695505050505050565b620002d4620003b6565b620002e0600062000412565b565b620002ec620003b6565b600180546001600160a01b0319166001600160a01b0383161790556040517f6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc90600090a150565b6200033d620003b6565b6001600160a01b038116620003a85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620003b38162000412565b50565b6000546001600160a01b03163314620002e05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200039f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61070f80620005b883390190565b610e308062000cc783390190565b600080602083850312156200049257600080fd5b823567ffffffffffffffff80821115620004ab57600080fd5b818501915085601f830112620004c057600080fd5b813581811115620004d057600080fd5b8660208260051b8501011115620004e657600080fd5b60209290920196919550909350505050565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146200052457600080fd5b919050565b6000602082840312156200053c57600080fd5b62000547826200050c565b9392505050565b6001600160a01b0385811682528481166020808401919091526060604084018190528301849052600091859160808501845b87811015620005a9578362000595866200050c565b168252938201939082019060010162000580565b50999850505050505050505056fe608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106918061007e6000396000f3fe60806040526004361061006b5760003560e01c8063204e1c7a14610070578063715018a6146100a65780637eff275e146100bd5780638da5cb5b146100dd5780639623609d146100fb57806399a88ec41461010e578063f2fde38b1461012e578063f3b7dead1461014e575b600080fd5b34801561007c57600080fd5b5061009061008b366004610483565b61016e565b60405161009d91906104a7565b60405180910390f35b3480156100b257600080fd5b506100bb6101ff565b005b3480156100c957600080fd5b506100bb6100d83660046104bb565b610213565b3480156100e957600080fd5b506000546001600160a01b0316610090565b6100bb61010936600461050a565b61027d565b34801561011a57600080fd5b506100bb6101293660046104bb565b6102ec565b34801561013a57600080fd5b506100bb610149366004610483565b610320565b34801561015a57600080fd5b50610090610169366004610483565b61039e565b6000806000836001600160a01b031660405161019490635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101cf576040519150601f19603f3d011682016040523d82523d6000602084013e6101d4565b606091505b5091509150816101e357600080fd5b808060200190518101906101f791906105e0565b949350505050565b6102076103c4565b610211600061041e565b565b61021b6103c4565b6040516308f2839760e41b81526001600160a01b03831690638f283970906102479084906004016104a7565b600060405180830381600087803b15801561026157600080fd5b505af1158015610275573d6000803e3d6000fd5b505050505050565b6102856103c4565b60405163278f794360e11b81526001600160a01b03841690634f1ef2869034906102b590869086906004016105fd565b6000604051808303818588803b1580156102ce57600080fd5b505af11580156102e2573d6000803e3d6000fd5b5050505050505050565b6102f46103c4565b604051631b2ce7f360e11b81526001600160a01b03831690633659cfe6906102479084906004016104a7565b6103286103c4565b6001600160a01b0381166103925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61039b8161041e565b50565b6000806000836001600160a01b0316604051610194906303e1469160e61b815260040190565b6000546001600160a01b031633146102115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610389565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461039b57600080fd5b60006020828403121561049557600080fd5b81356104a08161046e565b9392505050565b6001600160a01b0391909116815260200190565b600080604083850312156104ce57600080fd5b82356104d98161046e565b915060208301356104e98161046e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561051f57600080fd5b833561052a8161046e565b9250602084013561053a8161046e565b9150604084013567ffffffffffffffff8082111561055757600080fd5b818601915086601f83011261056b57600080fd5b81358181111561057d5761057d6104f4565b604051601f8201601f19908116603f011681019083821181831017156105a5576105a56104f4565b816040528281528960208487010111156105be57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156105f257600080fd5b81516104a08161046e565b60018060a01b038316815260006020604081840152835180604085015260005b818110156106395785810183015185820160600152820161061d565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220f5a0c1f96550a26c450231ceae844397fc23d429a52f9808d99552350772e88464736f6c63430008110033608060405260405162000e3038038062000e30833981016040819052620000269162000487565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ba565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b6200022e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000e0960279139620002f8565b9392505050565b60006200018060008051602062000de983398151915260001b620003de60201b620001ea1760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000de983398151915260001b620003de60201b620001ea1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200025a1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620001ea1760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000567565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f1919062000585565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b50506000910152565b6000806000606084860312156200049d57600080fd5b620004a8846200042e565b9250620004b8602085016200042e565b60408501519092506001600160401b0380821115620004d657600080fd5b818601915086601f830112620004eb57600080fd5b8151818111156200050057620005006200044b565b604051601f8201601f19908116603f011681019083821181831017156200052b576200052b6200044b565b816040528281528960208487010111156200054557600080fd5b6200055883602083016020880162000461565b80955050505050509250925092565b600082516200057b81846020870162000461565b9190910192915050565b6020815260008251806020840152620005a681604085016020870162000461565b601f01601f19169190910160400192915050565b61081f80620005ca6000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106b1565b610118565b61005b6100933660046106cc565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106b1565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107c3602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd6104b9565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b610368836104e1565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a81610521565b60606103e98461025a565b6104445760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016102f5565b600080856001600160a01b03168560405161045f9190610773565b600060405180830381855af49150503d806000811461049a576040519150601f19603f3d011682016040523d82523d6000602084013e61049f565b606091505b50915091506104af8282866105ca565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b6104ea81610603565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105865760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d9575081610253565b8251156105e95782518084602001fd5b8160405162461bcd60e51b81526004016102f5919061078f565b61060c8161025a565b61066e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105a9565b80356001600160a01b03811681146106ac57600080fd5b919050565b6000602082840312156106c357600080fd5b61025382610695565b6000806000604084860312156106e157600080fd5b6106ea84610695565b9250602084013567ffffffffffffffff8082111561070757600080fd5b818601915086601f83011261071b57600080fd5b81358181111561072a57600080fd5b87602082850101111561073c57600080fd5b6020830194508093505050509250925092565b60005b8381101561076a578181015183820152602001610752565b50506000910152565b6000825161078581846020870161074f565b9190910192915050565b60208152600082518060208401526107ae81604085016020870161074f565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e728ac68270132d34277bbf3be5409d2bbc23056dfe0d68964e9aec3ca8d7e0864736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122004d8dae623d4f066a36d6dbca4f6b15c7e5d74d189ee61fb7ccc2dd2b0fadfdc64736f6c6343000811003360a06040523060805234801561001457600080fd5b50608051611a5161003060003960006108a10152611a516000f3fe6080604052600436106100d75760003560e01c80639ac2a0111161007a5780639ac2a011146101e75780639be7bbd214610217578063a158657c14610237578063af1b9a0714610257578063c179f1d914610277578063ce1d571f1461028a578063d327821a1461029d578063f2fde38b146102bd57600080fd5b8063097da1f8146100e35780630a2435f8146100f8578063193c8edd146101185780633a7c721a1461015d578063715018a61461017d57806372f458661461019257806377a24f36146101a55780638da5cb5b146101c557600080fd5b366100de57005b600080fd5b6100f66100f136600461134f565b6102dd565b005b34801561010457600080fd5b506100f6610113366004611402565b6104e3565b34801561012457600080fd5b5061014861013336600461146d565b60666020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561016957600080fd5b506100f6610178366004611402565b610661565b34801561018957600080fd5b506100f66107ab565b6100f66101a0366004611491565b6107bf565b3480156101b157600080fd5b506100f66101c036600461152a565b6107d7565b3480156101d157600080fd5b506101da610acb565b6040516101549190611582565b3480156101f357600080fd5b5061014861020236600461146d565b60656020526000908152604090205460ff1681565b34801561022357600080fd5b506100f661023236600461146d565b610ada565b34801561024357600080fd5b506100f6610252366004611596565b610b56565b34801561026357600080fd5b506100f66102723660046115c6565b610bd9565b6100f661028536600461161a565b610be6565b6100f66102983660046116c6565b610f1a565b3480156102a957600080fd5b506100f66102b836600461152a565b610f2e565b3480156102c957600080fd5b506100f66102d836600461146d565b611171565b3360009081526065602052604090205460ff1615801561030d575033610301610acb565b6001600160a01b031614155b1561033757335b60405163f26aea8b60e01b815260040161032e9190611582565b60405180910390fd5b8460005a9050841561036a576001600160a01b0384163b61036a5760405162461bcd60e51b815260040161032e90611722565b61037384610ada565b6000846001600160a01b031684888860405161039092919061174b565b60006040518083038185875af1925050503d80600081146103cd576040519150601f19603f3d011682016040523d82523d6000602084013e6103d2565b606091505b50509050806103e8576040513d806000833e8082fd5b506001600160a01b038216156104da57366000602061040883601f611771565b610412919061178a565b9050610200610422600283611890565b61042c919061178a565b61043782600661189f565b6104419190611771565b61044b9084611771565b925033321461045957600091505b836001600160a01b031663e3db8a49335a61047490876118b6565b856040518463ffffffff1660e01b8152600401610493939291906118c9565b6020604051808303816000875af11580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d691906118f8565b5050505b50505050505050565b6104eb6111e7565b8281146105155760405163088253c360e11b8152600481018490526024810182905260440161032e565b60005b6001600160401b03811684111561065a578282826001600160401b031681811061054457610544611915565b9050602002016020810190610559919061192b565b606560008787856001600160401b031681811061057857610578611915565b905060200201602081019061058d919061146d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905584846001600160401b0383168181106105d0576105d0611915565b90506020020160208101906105e5919061146d565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea28484846001600160401b031681811061062a5761062a611915565b905060200201602081019061063f919061192b565b604051901515815260200160405180910390a2600101610518565b5050505050565b6106696111e7565b8281146106935760405163088253c360e11b8152600481018490526024810182905260440161032e565b60005b8381101561065a578282828181106106b0576106b0611915565b90506020020160208101906106c5919061192b565b606660008787858181106106db576106db611915565b90506020020160208101906106f0919061146d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905584848281811061072a5761072a611915565b905060200201602081019061073f919061146d565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a484848481811061077b5761077b611915565b9050602002016020810190610790919061192b565b604051901515815260200160405180910390a2600101610696565b6107b36111e7565b6107bd6000611246565b565b6107cf6000878787878787610be6565b505050505050565b600054610100900460ff16158080156107f75750600054600160ff909116105b806108115750303b158015610811575060005460ff166001145b6108745760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161032e565b6000805460ff191660011790558015610897576000805461ff0019166101001790555b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109245760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161032e565b61092c611298565b61093584611171565b6001600160a01b038516600081815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a260005b6001600160401b038116831115610a7e576001606660008686856001600160401b03168181106109c4576109c4611915565b90506020020160208101906109d9919061146d565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905583836001600160401b038316818110610a1c57610a1c611915565b9050602002016020810190610a31919061146d565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610a6e911515815260200190565b60405180910390a2600101610992565b50801561065a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6033546001600160a01b031690565b6001600160a01b03811660009081526066602052604090205460ff16158015610b13575033610b07610acb565b6001600160a01b031614155b15610b5357610b20610acb565b6040516320fe37c560e11b81526001600160a01b039182166004820152336024820152908216604482015260640161032e565b50565b610b5e6111e7565b6000816001600160a01b03168360405160006040518083038185875af1925050503d8060008114610bab576040519150601f19603f3d011682016040523d82523d6000602084013e610bb0565b606091505b5050905080610bd45781604051630fdb769360e31b815260040161032e9190611582565b505050565b610bd46000848484610f2e565b3360009081526065602052604090205460ff16158015610c16575033610c0a610acb565b6001600160a01b031614155b15610c215733610314565b8660005a905086858114610c525760405163088253c360e11b8152600481018290526024810187905260440161032e565b808414610c7c5760405163088253c360e11b8152600481018290526024810185905260440161032e565b60005b81811015610e1c5760008a8a83818110610c9b57610c9b611915565b9050602002810190610cad9190611948565b90501115610d0a57610cee888883818110610cca57610cca611915565b9050602002016020810190610cdf919061146d565b6001600160a01b03163b151590565b610d0a5760405162461bcd60e51b815260040161032e90611722565b610d34888883818110610d1f57610d1f611915565b9050602002016020810190610232919061146d565b6000888883818110610d4857610d48611915565b9050602002016020810190610d5d919061146d565b6001600160a01b0316878784818110610d7857610d78611915565b905060200201358c8c85818110610d9157610d91611915565b9050602002810190610da39190611948565b604051610db192919061174b565b60006040518083038185875af1925050503d8060008114610dee576040519150601f19603f3d011682016040523d82523d6000602084013e610df3565b606091505b5050905080610e09576040513d806000833e8082fd5b5080610e148161198e565b915050610c7f565b50506001600160a01b03821615610f0f573660006020610e3d83601f611771565b610e47919061178a565b9050610200610e57600283611890565b610e61919061178a565b610e6c82600661189f565b610e769190611771565b610e809084611771565b9250333214610e8e57600091505b836001600160a01b031663e3db8a49335a610ea990876118b6565b856040518463ffffffff1660e01b8152600401610ec8939291906118c9565b6020604051808303816000875af1158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b91906118f8565b5050505b505050505050505050565b610f286000858585856102dd565b50505050565b3360009081526065602052604090205460ff16158015610f5e575033610f52610acb565b6001600160a01b031614155b15610f695733610314565b8360005a90508260005b8181101561108257866001600160a01b0316631b45c86a878784818110610f9c57610f9c611915565b9050602002016020810190610fb191906119a7565b6040516001600160e01b031960e084901b1681526001600160401b039091166004820152602401600060405180830381600087803b158015610ff257600080fd5b505af1925050508015611003575060015b611070573d808015611031576040519150601f19603f3d011682016040523d82523d6000602084013e611036565b606091505b50805160000361106e5760405162461bcd60e51b815260206004820152600360248201526247415360e81b604482015260640161032e565b505b8061107a8161198e565b915050610f73565b50506001600160a01b038216156107cf5736600060206110a383601f611771565b6110ad919061178a565b90506102006110bd600283611890565b6110c7919061178a565b6110d282600661189f565b6110dc9190611771565b6110e69084611771565b92503332146110f457600091505b836001600160a01b031663e3db8a49335a61110f90876118b6565b856040518463ffffffff1660e01b815260040161112e939291906118c9565b6020604051808303816000875af115801561114d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f91906118f8565b6111796111e7565b6001600160a01b0381166111de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161032e565b610b5381611246565b336111f0610acb565b6001600160a01b0316146107bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112bf5760405162461bcd60e51b815260040161032e906119d0565b6107bd600054610100900460ff166112e95760405162461bcd60e51b815260040161032e906119d0565b6107bd33611246565b6001600160a01b0381168114610b5357600080fd5b60008083601f84011261131957600080fd5b5081356001600160401b0381111561133057600080fd5b60208301915083602082850101111561134857600080fd5b9250929050565b60008060008060006080868803121561136757600080fd5b8535611372816112f2565b945060208601356001600160401b0381111561138d57600080fd5b61139988828901611307565b90955093505060408601356113ad816112f2565b949793965091946060013592915050565b60008083601f8401126113d057600080fd5b5081356001600160401b038111156113e757600080fd5b6020830191508360208260051b850101111561134857600080fd5b6000806000806040858703121561141857600080fd5b84356001600160401b038082111561142f57600080fd5b61143b888389016113be565b9096509450602087013591508082111561145457600080fd5b50611461878288016113be565b95989497509550505050565b60006020828403121561147f57600080fd5b813561148a816112f2565b9392505050565b600080600080600080606087890312156114aa57600080fd5b86356001600160401b03808211156114c157600080fd5b6114cd8a838b016113be565b909850965060208901359150808211156114e657600080fd5b6114f28a838b016113be565b9096509450604089013591508082111561150b57600080fd5b5061151889828a016113be565b979a9699509497509295939492505050565b6000806000806060858703121561154057600080fd5b843561154b816112f2565b9350602085013561155b816112f2565b925060408501356001600160401b0381111561157657600080fd5b611461878288016113be565b6001600160a01b0391909116815260200190565b600080604083850312156115a957600080fd5b8235915060208301356115bb816112f2565b809150509250929050565b6000806000604084860312156115db57600080fd5b83356115e6816112f2565b925060208401356001600160401b0381111561160157600080fd5b61160d868287016113be565b9497909650939450505050565b60008060008060008060006080888a03121561163557600080fd5b8735611640816112f2565b965060208801356001600160401b038082111561165c57600080fd5b6116688b838c016113be565b909850965060408a013591508082111561168157600080fd5b61168d8b838c016113be565b909650945060608a01359150808211156116a657600080fd5b506116b38a828b016113be565b989b979a50959850939692959293505050565b600080600080606085870312156116dc57600080fd5b84356001600160401b038111156116f257600080fd5b6116fe87828801611307565b9095509350506020850135611712816112f2565b9396929550929360400135925050565b6020808252600f908201526e2727afa1a7a222afa0aa2fa0a2222960891b604082015260600190565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156117845761178461175b565b92915050565b6000826117a757634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156117e75781600019048211156117cd576117cd61175b565b808516156117da57918102915b93841c93908002906117b1565b509250929050565b6000826117fe57506001611784565b8161180b57506000611784565b8160018114611821576002811461182b57611847565b6001915050611784565b60ff84111561183c5761183c61175b565b50506001821b611784565b5060208310610133831016604e8410600b841016171561186a575081810a611784565b61187483836117ac565b80600019048211156118885761188861175b565b029392505050565b600061148a60ff8416836117ef565b80820281158282048414176117845761178461175b565b818103818111156117845761178461175b565b6001600160a01b039390931683526020830191909152604082015260600190565b8015158114610b5357600080fd5b60006020828403121561190a57600080fd5b815161148a816118ea565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561193d57600080fd5b813561148a816118ea565b6000808335601e1984360301811261195f57600080fd5b8301803591506001600160401b0382111561197957600080fd5b60200191503681900382131561134857600080fd5b6000600182016119a0576119a061175b565b5060010190565b6000602082840312156119b957600080fd5b81356001600160401b038116811461148a57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205e61fd5a439127d97b428328c77d1703af5e33811458690229463771d3d46a1d64736f6c63430008110033",
}

// ValidatorWalletCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletCreatorMetaData.ABI instead.
var ValidatorWalletCreatorABI = ValidatorWalletCreatorMetaData.ABI

// ValidatorWalletCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletCreatorMetaData.Bin instead.
var ValidatorWalletCreatorBin = ValidatorWalletCreatorMetaData.Bin

// DeployValidatorWalletCreator deploys a new Ethereum contract, binding an instance of ValidatorWalletCreator to it.
func DeployValidatorWalletCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWalletCreator, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// ValidatorWalletCreator is an auto generated Go binding around an Ethereum contract.
type ValidatorWalletCreator struct {
	ValidatorWalletCreatorCaller     // Read-only binding to the contract
	ValidatorWalletCreatorTransactor // Write-only binding to the contract
	ValidatorWalletCreatorFilterer   // Log filterer for contract events
}

// ValidatorWalletCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletCreatorSession struct {
	Contract     *ValidatorWalletCreator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCreatorCallerSession struct {
	Contract *ValidatorWalletCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ValidatorWalletCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletCreatorTransactorSession struct {
	Contract     *ValidatorWalletCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletCreatorRaw struct {
	Contract *ValidatorWalletCreator // Generic contract binding to access the raw methods on
}

// ValidatorWalletCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCallerRaw struct {
	Contract *ValidatorWalletCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactorRaw struct {
	Contract *ValidatorWalletCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWalletCreator creates a new instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreator(address common.Address, backend bind.ContractBackend) (*ValidatorWalletCreator, error) {
	contract, err := bindValidatorWalletCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// NewValidatorWalletCreatorCaller creates a new read-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCreatorCaller, error) {
	contract, err := bindValidatorWalletCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorCaller{contract: contract}, nil
}

// NewValidatorWalletCreatorTransactor creates a new write-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletCreatorTransactor, error) {
	contract, err := bindValidatorWalletCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTransactor{contract: contract}, nil
}

// NewValidatorWalletCreatorFilterer creates a new log filterer instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletCreatorFilterer, error) {
	contract, err := bindValidatorWalletCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorFilterer{contract: contract}, nil
}

// bindValidatorWalletCreator binds a generic wrapper to an already deployed contract.
func bindValidatorWalletCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorWalletCreatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Template(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "template")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) CreateWallet(opts *bind.TransactOpts, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "createWallet", initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) SetTemplate(opts *bind.TransactOpts, _template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "setTemplate", _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// ValidatorWalletCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferredIterator struct {
	Event *ValidatorWalletCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorOwnershipTransferredIterator{contract: _ValidatorWalletCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorOwnershipTransferred)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletCreatorOwnershipTransferred, error) {
	event := new(ValidatorWalletCreatorOwnershipTransferred)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorTemplateUpdatedIterator is returned from FilterTemplateUpdated and is used to iterate over the raw logs and unpacked data for TemplateUpdated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdatedIterator struct {
	Event *ValidatorWalletCreatorTemplateUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorTemplateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorTemplateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorTemplateUpdated represents a TemplateUpdated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplateUpdated is a free log retrieval operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterTemplateUpdated(opts *bind.FilterOpts) (*ValidatorWalletCreatorTemplateUpdatedIterator, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTemplateUpdatedIterator{contract: _ValidatorWalletCreator.contract, event: "TemplateUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplateUpdated is a free log subscription operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchTemplateUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorTemplateUpdated) (event.Subscription, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorTemplateUpdated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplateUpdated is a log parse operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseTemplateUpdated(log types.Log) (*ValidatorWalletCreatorTemplateUpdated, error) {
	event := new(ValidatorWalletCreatorTemplateUpdated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorWalletCreatedIterator is returned from FilterWalletCreated and is used to iterate over the raw logs and unpacked data for WalletCreated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreatedIterator struct {
	Event *ValidatorWalletCreatorWalletCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorWalletCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorWalletCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorWalletCreated represents a WalletCreated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreated struct {
	WalletAddress   common.Address
	ExecutorAddress common.Address
	OwnerAddress    common.Address
	AdminProxy      common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWalletCreated is a free log retrieval operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterWalletCreated(opts *bind.FilterOpts, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (*ValidatorWalletCreatorWalletCreatedIterator, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorWalletCreatedIterator{contract: _ValidatorWalletCreator.contract, event: "WalletCreated", logs: logs, sub: sub}, nil
}

// WatchWalletCreated is a free log subscription operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchWalletCreated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorWalletCreated, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (event.Subscription, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorWalletCreated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWalletCreated is a log parse operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseWalletCreated(log types.Log) (*ValidatorWalletCreatorWalletCreated, error) {
	event := new(ValidatorWalletCreatorWalletCreated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
