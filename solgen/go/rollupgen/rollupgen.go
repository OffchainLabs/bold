// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rollupgen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AssertionInputs is an auto generated low-level Go binding around an user-defined struct.
type AssertionInputs struct {
	BeforeStateData BeforeStateData
	BeforeState     ExecutionState
	AfterState      ExecutionState
}

// AssertionNode is an auto generated low-level Go binding around an user-defined struct.
type AssertionNode struct {
	FirstChildBlock  uint64
	SecondChildBlock uint64
	CreatedAtBlock   uint64
	IsFirstChild     bool
	Status           uint8
	ConfigHash       [32]byte
}

// BOLDUpgradeActionContracts is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionContracts struct {
	L1Timelock       common.Address
	Rollup           common.Address
	Bridge           common.Address
	SequencerInbox   common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
	Inbox            common.Address
	Osp              common.Address
}

// BOLDUpgradeActionImplementations is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionImplementations struct {
	Bridge           common.Address
	SeqInbox         common.Address
	Rei              common.Address
	Outbox           common.Address
	OldRollupUser    common.Address
	NewRollupUser    common.Address
	NewRollupAdmin   common.Address
	ChallengeManager common.Address
}

// BOLDUpgradeActionProxyAdmins is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionProxyAdmins struct {
	Outbox   common.Address
	Bridge   common.Address
	Rei      common.Address
	SeqInbox common.Address
}

// BOLDUpgradeActionSettings is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionSettings struct {
	ConfirmPeriodBlocks        uint64
	ChallengePeriodBlocks      uint64
	StakeToken                 common.Address
	StakeAmt                   *big.Int
	MiniStakeAmounts           []*big.Int
	ChainId                    *big.Int
	AnyTrustFastConfirmer      common.Address
	DisableValidatorWhitelist  bool
	BlockLeafSize              *big.Int
	BigStepLeafSize            *big.Int
	SmallStepLeafSize          *big.Int
	NumBigStepLevel            uint8
	ChallengeGracePeriodBlocks uint64
}

// BeforeStateData is an auto generated low-level Go binding around an user-defined struct.
type BeforeStateData struct {
	PrevPrevAssertionHash [32]byte
	SequencerBatchAcc     [32]byte
	ConfigData            ConfigData
}

// Config is an auto generated low-level Go binding around an user-defined struct.
type Config struct {
	ConfirmPeriodBlocks            uint64
	StakeToken                     common.Address
	BaseStake                      *big.Int
	WasmModuleRoot                 [32]byte
	Owner                          common.Address
	LoserStakeEscrow               common.Address
	ChainId                        *big.Int
	ChainConfig                    string
	MiniStakeValues                []*big.Int
	SequencerInboxMaxTimeVariation ISequencerInboxMaxTimeVariation
	LayerZeroBlockEdgeHeight       *big.Int
	LayerZeroBigStepEdgeHeight     *big.Int
	LayerZeroSmallStepEdgeHeight   *big.Int
	GenesisExecutionState          ExecutionState
	GenesisInboxCount              *big.Int
	AnyTrustFastConfirmer          common.Address
	NumBigStepLevel                uint8
	ChallengeGracePeriodBlocks     uint64
}

// ConfigData is an auto generated low-level Go binding around an user-defined struct.
type ConfigData struct {
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	NextInboxPosition   uint64
}

// ContractDependencies is an auto generated low-level Go binding around an user-defined struct.
type ContractDependencies struct {
	Bridge                 common.Address
	SequencerInbox         common.Address
	Inbox                  common.Address
	Outbox                 common.Address
	RollupEventInbox       common.Address
	ChallengeManager       common.Address
	RollupAdminLogic       common.Address
	RollupUserLogic        common.Address
	ValidatorWalletCreator common.Address
}

// ExecutionState is an auto generated low-level Go binding around an user-defined struct.
type ExecutionState struct {
	GlobalState   GlobalState
	MachineStatus uint8
}

// GlobalState is an auto generated low-level Go binding around an user-defined struct.
type GlobalState struct {
	Bytes32Vals [2][32]byte
	U64Vals     [2]uint64
}

// IOldRollupAssertion is an auto generated low-level Go binding around an user-defined struct.
type IOldRollupAssertion struct {
	BeforeState ExecutionState
	AfterState  ExecutionState
	NumBlocks   uint64
}

// IRollupCoreStaker is an auto generated low-level Go binding around an user-defined struct.
type IRollupCoreStaker struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}

// ISequencerInboxMaxTimeVariation is an auto generated low-level Go binding around an user-defined struct.
type ISequencerInboxMaxTimeVariation struct {
	DelayBlocks   *big.Int
	FutureBlocks  *big.Int
	DelaySeconds  *big.Int
	FutureSeconds *big.Int
}

// Node is an auto generated low-level Go binding around an user-defined struct.
type Node struct {
	StateHash                   [32]byte
	ChallengeHash               [32]byte
	ConfirmData                 [32]byte
	PrevNum                     uint64
	DeadlineBlock               uint64
	NoChildConfirmedBeforeBlock uint64
	StakerCount                 uint64
	ChildStakerCount            uint64
	FirstChildBlock             uint64
	LatestChildNumber           uint64
	CreatedAtBlock              uint64
	NodeHash                    [32]byte
}

// OldStaker is an auto generated low-level Go binding around an user-defined struct.
type OldStaker struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}

// AssertionNodeLibMetaData contains all meta data concerning the AssertionNodeLib contract.
var AssertionNodeLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220867639e53332fe2ae962dfc6d5e5b89ceba5ccdd899d19abdda1c1ffa144831964736f6c63430008110033",
}

// AssertionNodeLibABI is the input ABI used to generate the binding from.
// Deprecated: Use AssertionNodeLibMetaData.ABI instead.
var AssertionNodeLibABI = AssertionNodeLibMetaData.ABI

// AssertionNodeLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AssertionNodeLibMetaData.Bin instead.
var AssertionNodeLibBin = AssertionNodeLibMetaData.Bin

// DeployAssertionNodeLib deploys a new Ethereum contract, binding an instance of AssertionNodeLib to it.
func DeployAssertionNodeLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AssertionNodeLib, error) {
	parsed, err := AssertionNodeLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AssertionNodeLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AssertionNodeLib{AssertionNodeLibCaller: AssertionNodeLibCaller{contract: contract}, AssertionNodeLibTransactor: AssertionNodeLibTransactor{contract: contract}, AssertionNodeLibFilterer: AssertionNodeLibFilterer{contract: contract}}, nil
}

// AssertionNodeLib is an auto generated Go binding around an Ethereum contract.
type AssertionNodeLib struct {
	AssertionNodeLibCaller     // Read-only binding to the contract
	AssertionNodeLibTransactor // Write-only binding to the contract
	AssertionNodeLibFilterer   // Log filterer for contract events
}

// AssertionNodeLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type AssertionNodeLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AssertionNodeLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AssertionNodeLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AssertionNodeLibSession struct {
	Contract     *AssertionNodeLib // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AssertionNodeLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AssertionNodeLibCallerSession struct {
	Contract *AssertionNodeLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// AssertionNodeLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AssertionNodeLibTransactorSession struct {
	Contract     *AssertionNodeLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// AssertionNodeLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type AssertionNodeLibRaw struct {
	Contract *AssertionNodeLib // Generic contract binding to access the raw methods on
}

// AssertionNodeLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AssertionNodeLibCallerRaw struct {
	Contract *AssertionNodeLibCaller // Generic read-only contract binding to access the raw methods on
}

// AssertionNodeLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AssertionNodeLibTransactorRaw struct {
	Contract *AssertionNodeLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAssertionNodeLib creates a new instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLib(address common.Address, backend bind.ContractBackend) (*AssertionNodeLib, error) {
	contract, err := bindAssertionNodeLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLib{AssertionNodeLibCaller: AssertionNodeLibCaller{contract: contract}, AssertionNodeLibTransactor: AssertionNodeLibTransactor{contract: contract}, AssertionNodeLibFilterer: AssertionNodeLibFilterer{contract: contract}}, nil
}

// NewAssertionNodeLibCaller creates a new read-only instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibCaller(address common.Address, caller bind.ContractCaller) (*AssertionNodeLibCaller, error) {
	contract, err := bindAssertionNodeLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibCaller{contract: contract}, nil
}

// NewAssertionNodeLibTransactor creates a new write-only instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibTransactor(address common.Address, transactor bind.ContractTransactor) (*AssertionNodeLibTransactor, error) {
	contract, err := bindAssertionNodeLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibTransactor{contract: contract}, nil
}

// NewAssertionNodeLibFilterer creates a new log filterer instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibFilterer(address common.Address, filterer bind.ContractFilterer) (*AssertionNodeLibFilterer, error) {
	contract, err := bindAssertionNodeLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibFilterer{contract: contract}, nil
}

// bindAssertionNodeLib binds a generic wrapper to an already deployed contract.
func bindAssertionNodeLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AssertionNodeLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionNodeLib *AssertionNodeLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionNodeLib.Contract.AssertionNodeLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionNodeLib *AssertionNodeLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.AssertionNodeLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionNodeLib *AssertionNodeLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.AssertionNodeLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionNodeLib *AssertionNodeLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionNodeLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionNodeLib *AssertionNodeLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionNodeLib *AssertionNodeLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.contract.Transact(opts, method, params...)
}

// BOLDUpgradeActionMetaData contains all meta data concerning the BOLDUpgradeAction contract.
var BOLDUpgradeActionMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Timelock\",\"type\":\"address\"},{\"internalType\":\"contractIOldRollup\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"osp\",\"type\":\"address\"}],\"internalType\":\"structBOLDUpgradeAction.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rei\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seqInbox\",\"type\":\"address\"}],\"internalType\":\"structBOLDUpgradeAction.ProxyAdmins\",\"name\":\"proxyAdmins\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seqInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rei\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldRollupUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRollupUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRollupAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"}],\"internalType\":\"structBOLDUpgradeAction.Implementations\",\"name\":\"implementations\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"challengePeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"disableValidatorWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeafSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bigStepLeafSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"smallStepLeafSize\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structBOLDUpgradeAction.Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"}],\"name\":\"RollupMigrated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANY_TRUST_FAST_CONFIRMER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BIGSTEP_LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCK_LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGE_GRACE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIRM_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLE_VALIDATOR_WHITELIST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_CHALLENGE_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_NEW_ROLLUP_ADMIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_NEW_ROLLUP_USER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_OUTBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_PATCHED_OLD_ROLLUP_USER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_REI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_SEQUENCER_INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L1_TIMELOCK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINI_STAKE_AMOUNTS_STORAGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_BIGSTEP_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLD_ROLLUP\",\"outputs\":[{\"internalType\":\"contractIOldRollup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OSP\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREIMAGE_LOOKUP\",\"outputs\":[{\"internalType\":\"contractStateHashPreImageLookup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_BRIDGE\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_OUTBOX\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_REI\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_SEQUENCER_INBOX\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLLUP_READER\",\"outputs\":[{\"internalType\":\"contractRollupReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQ_INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMALLSTEP_LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6104e06040523480156200001257600080fd5b50604051620077e4380380620077e4833981016040819052620000359162000670565b83516001600160a01b0390811661010052602080860151821661012052604080870151831661014052606080880151841661016052608088015184166101805260a088015184166101a05260c088015184166101c05260e088015184166103005286518416610320529186015183166103405285810151831661036052908501519091166103805251620000c99062000278565b604051809103906000f080158015620000e6573d6000803e3d6000fd5b506001600160a01b03166103a0526020840151604051620001079062000286565b6001600160a01b039091168152602001604051809103906000f08015801562000134573d6000803e3d6000fd5b506001600160a01b039081166103c052825181166103e05260208084015182166104005260408085015183166104205260608086015184166104405260808087015185166104605260a08088015186166104805260c088015186166104a05260e088015186166104c0528601516102605285516001600160401b039081166101e0529386015190931661020052848201519093166102205291830151610240528201519051620001e49062000294565b620001f0919062000797565b604051809103906000f0801580156200020d573d6000803e3d6000fd5b506001600160a01b039081166102e05260c0808301519091166102805260e08083015115156102a05261010083015160805261012083015160a05261014083015190915261016082015160ff16905261018001516001600160401b03166102c05250620007dd915050565b610a2d8062005f3483390190565b610be3806200696183390190565b6102a0806200754483390190565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715620002de57620002de620002a2565b60405290565b6040516101a081016001600160401b0381118282101715620002de57620002de620002a2565b6001600160a01b03811681146200032057600080fd5b50565b805162000330816200030a565b919050565b6000608082840312156200034857600080fd5b604051608081016001600160401b03811182821017156200036d576200036d620002a2565b8060405250809150825162000382816200030a565b8152602083015162000394816200030a565b60208201526040830151620003a9816200030a565b60408201526060830151620003be816200030a565b6060919091015292915050565b60006101008284031215620003df57600080fd5b620003e9620002b8565b90508151620003f8816200030a565b815260208201516200040a816200030a565b60208201526200041d6040830162000323565b6040820152620004306060830162000323565b6060820152620004436080830162000323565b60808201526200045660a0830162000323565b60a08201526200046960c0830162000323565b60c08201526200047c60e0830162000323565b60e082015292915050565b80516001600160401b03811681146200033057600080fd5b600082601f830112620004b157600080fd5b815160206001600160401b0380831115620004d057620004d0620002a2565b8260051b604051601f19603f83011681018181108482111715620004f857620004f8620002a2565b6040529384528581018301938381019250878511156200051757600080fd5b83870191505b8482101562000538578151835291830191908301906200051d565b979650505050505050565b805180151581146200033057600080fd5b805160ff811681146200033057600080fd5b60006101a082840312156200057a57600080fd5b62000584620002e4565b9050620005918262000487565b8152620005a16020830162000487565b6020820152620005b46040830162000323565b60408201526060828101519082015260808201516001600160401b03811115620005dd57600080fd5b620005eb848285016200049f565b60808301525060a082015160a08201526200060960c0830162000323565b60c08201526200061c60e0830162000543565b60e08201526101008281015190820152610120808301519082015261014080830151908201526101606200065281840162000554565b908201526101806200066683820162000487565b9082015292915050565b6000806000808486036102a08112156200068957600080fd5b610100808212156200069a57600080fd5b620006a4620002b8565b91508651620006b3816200030a565b8252620006c36020880162000323565b6020830152620006d66040880162000323565b6040830152620006e96060880162000323565b6060830152620006fc6080880162000323565b60808301526200070f60a0880162000323565b60a08301526200072260c0880162000323565b60c08301526200073560e0880162000323565b60e08301528195506200074b8882890162000335565b945050506200075f866101808701620003cb565b6102808601519092506001600160401b038111156200077d57600080fd5b6200078b8782880162000566565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015620007d157835183529284019291840191600101620007b3565b50909695505050505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e05161040051610420516104405161046051610480516104a0516104c05161542462000b106000396000818161036e01526108a80152600081816102970152610a460152600081816104950152610a75015260008181610445015261155001526000818161071101526124670152600081816106c1015261224e0152600081816106e901526120350152600081816107b10152611d850152600081816104bd01528181610aa401528181610e22015281816111e1015281816112d90152818161138d015281816115e70152818161161601526119730152600081816107390152818161175601526117d301526000818161041d0152818161200501526120b501526000818161046d015281816121590152818161221e015281816122ce0152612372015260008181610304015281816108c901528181611ce301528181611d5501528181611e9c0152611f400152600081816102dc0152818161243701526124e70152600081816105c00152610bdc0152600081816106210152611a760152600081816107f20152611be00152600081816105e801528181610fe801526110350152600081816107610152611b880152600081816105480152611a3b01526000818161086a015261194d0152600081816103be015261191e0152600081816105980152610bbb01526000818161032c01526118ee01526000818161064901526109aa015260008181610396015281816109d9015261234301526000818161067101528181610a08015261212a0152600081816107890152818161097b0152611f1101526000818161081a0152818161094c0152611cb60152600081816105700152818161116a01528181611498015261157801526000818161069901528181610c140152611a0c0152600081816104e50152611bb70152600081816108420152611b560152600081816103e60152611b300152600081816105200152611b0a01526154246000f3fe60806040523480156200001157600080fd5b50600436106200028c5760003560e01c80639f9854e5116200015f578063cc8089bb11620000cc578063ebe03a931162000097578063ee9a31a2116200007a578063ee9a31a21462000814578063fa287420146200083c578063faf5625f146200086457600080fd5b8063ebe03a9314620007d3578063ec4f74ce14620007ec57600080fd5b8063cc8089bb1462000733578063d1da2c5c146200075b578063d384cb951462000783578063dae7cb8b14620007ab57600080fd5b8063be41b367116200012a578063c21c4233116200010d578063c21c423314620006bb578063c519d15114620006e3578063c897f55e146200070b57600080fd5b8063be41b367146200066b578063bf5e3d52146200069357600080fd5b80639f9854e514620005ba578063b38d57f014620005e2578063b5e00c3f146200061b578063b7010697146200064357600080fd5b80632db93bdc11620001fe5780635d9e244411620001c957806385e1f4d011620001ac57806385e1f4d014620005425780638765240f146200056a57806391ddb285146200059257600080fd5b80635d9e244414620004df578063609fb503146200051a57600080fd5b80632db93bdc146200043f5780633c2b784014620004675780634692de5d146200048f5780634e0e75fb14620004b757600080fd5b806310a662e2116200025c5780631c39b672116200023f5780631c39b67214620003b85780631ccc2cd114620003e05780632cfb7ca3146200041757600080fd5b806310a662e214620003685780631b142ea7146200039057600080fd5b8062f9731e14620002915780630787484b14620002d65780630a54257d14620002fe5780631047fc521462000326575b600080fd5b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b6200034e7f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001620002cd565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620004087f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001620002cd565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620005077f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001620002cd565b620004087f000000000000000000000000000000000000000000000000000000000000000081565b620004087f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b6200034e7f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b6200060a7f000000000000000000000000000000000000000000000000000000000000000081565b6040519015158152602001620002cd565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620007ea620007e43660046200278f565b6200088c565b005b6200034e7f000000000000000000000000000000000000000000000000000000000000000081565b620002b97f000000000000000000000000000000000000000000000000000000000000000081565b620004087f000000000000000000000000000000000000000000000000000000000000000081565b620004087f000000000000000000000000000000000000000000000000000000000000000081565b6200089662001168565b6000620008a2620015d9565b905060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000604051620008f69062002552565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f08015801562000939573d6000803e3d6000fd5b50905060006040518061012001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001836001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc45e0ae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b01573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b2791906200283a565b6001600160a01b0316815250905060008360405160200162000b4a919062002b02565b604051602081830303815290604052805190602001209050600062000b9c826040518060200162000b7b9062002560565b6020820181038252601f19601f820116604052508051906020012062001c15565b905062000ba98162001c9f565b836001600160a01b0316631a72d54c827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008961014001518a61016001518b61018001518c602001517f00000000000000000000000000000000000000000000000000000000000000008e61020001518f61010001516040518b63ffffffff1660e01b815260040162000c669a9998979695949392919062002b17565b600060405180830381600087803b15801562000c8157600080fd5b505af115801562000c96573d6000803e3d6000fd5b5050505060008260405162000cab9062002560565b8190604051809103906000f590508015801562000ccc573d6000803e3d6000fd5b509050816001600160a01b0316816001600160a01b03161462000d365760405162461bcd60e51b815260206004820152601560248201527f554e455850435445445f524f4c4c55505f41444452000000000000000000000060448201526064015b60405180910390fd5b608086018051309091526040517f1868f9660000000000000000000000000000000000000000000000000000000081526001600160a01b03831690631868f9669062000d89908a90899060040162002b94565b600060405180830381600087803b15801562000da457600080fd5b505af115801562000db9573d6000803e3d6000fd5b50505050875160001462000fe6576000885167ffffffffffffffff81111562000de65762000de6620026b2565b60405190808252806020026020018201604052801562000e10578160200160208202803683370190505b50905060005b895181101562000f66577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663facd743b8b838151811062000e645762000e6462002c7a565b60200260200101516040518263ffffffff1660e01b815260040162000e9891906001600160a01b0391909116815260200190565b602060405180830381865afa15801562000eb6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000edc919062002ca6565b62000f2a5760405162461bcd60e51b815260206004820152601860248201527f554e45585045435445445f4e45575f56414c494441544f520000000000000000604482015260640162000d2d565b600182828151811062000f415762000f4162002c7a565b911515602092830291909101909101528062000f5d8162002cda565b91505062000e16565b506040517fa3ffb7720000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063a3ffb7729062000fb0908c90859060040162002d50565b600060405180830381600087803b15801562000fcb57600080fd5b505af115801562000fe0573d6000803e3d6000fd5b50505050505b7f000000000000000000000000000000000000000000000000000000000000000015620010a4576040517fa2b4f1d80000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000151560048201526001600160a01b0383169063a2b4f1d890602401600060405180830381600087803b1580156200108a57600080fd5b505af11580156200109f573d6000803e3d6000fd5b505050505b6040517f13af40350000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301528316906313af403590602401600060405180830381600087803b1580156200110157600080fd5b505af115801562001116573d6000803e3d6000fd5b5050604080516001600160a01b0380881682528a1660208201527f7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314935001905060405180910390a15050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620011c457600080fd5b505af1158015620011d9573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dff697876040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200123e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001264919062002dc6565b905060328167ffffffffffffffff1611156200127e575060325b60005b8167ffffffffffffffff168167ffffffffffffffff1610156200151f576040517f6ddd374400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ddd374490602401602060405180830381865afa15801562001329573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200134f91906200283a565b6040517fa23c44b10000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063a23c44b19060240160a060405180830381865afa158015620013d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013fb919062002de4565b9050806080015180156200141b5750606081015167ffffffffffffffff16155b1562001507576040805160018082528183019092526000916020808301908036833701905050905082816000815181106200145a576200145a62002c7a565b6001600160a01b0392831660209182029290920101526040517f7c75c2980000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000090911690637c75c29890620014d190849060040162002e77565b600060405180830381600087803b158015620014ec57600080fd5b505af115801562001501573d6000803e3d6000fd5b50505050505b50508080620015169062002e8c565b91505062001281565b506040517f0d40a0fd0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000001690630d40a0fd90602401600060405180830381600087803b158015620015bd57600080fd5b505af1158015620015d2573d6000803e3d6000fd5b5050505050565b620015e36200256e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166392c8134c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365f7f80d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001673573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001699919062002dc6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff909116600482015260240161018060405180830381865afa158015620016f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200171e919062002eb6565b516040517f8eaa6ac00000000000000000000000000000000000000000000000000000000081526004810182905290915060009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638eaa6ac09060240160c060405180830381865afa158015620017a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017cc91906200300a565b91509150827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633164413084846040518363ffffffff1660e01b815260040162001821929190620030db565b602060405180830381865afa1580156200183f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018659190620030f8565b14620018b45760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964206c617465737420657865637574696f6e2068617368000000604482015260640162000d2d565b620018e06040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518061024001604052807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ee1a1266040518163ffffffff1660e01b8152600401602060405180830381865afa158015620019d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019f69190620030f8565b8152602001306001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020016040518060200160405280600081525081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b0ec2ae16040518163ffffffff1660e01b8152600401600060405180830381865afa15801562001ad3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001afd919081019062003112565b81526020018281526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020018481526020018381526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000060ff1681526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1681525094505050505090565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b9392505050565b6040516310270e3d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008181166004840152916000917f0000000000000000000000000000000000000000000000000000000000000000169063204e1c7a90602401602060405180830381865afa15801562001d2b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d5191906200283a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639623609d837f000000000000000000000000000000000000000000000000000000000000000063919cc70660e01b8760405160240162001dcd91906001600160a01b0391909116815260200190565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e086901b909216825262001e43939291600401620031a1565b600060405180830381600087803b15801562001e5e57600080fd5b505af115801562001e73573d6000803e3d6000fd5b505060405163266a23b160e21b81526001600160a01b03858116600483015284811660248301527f00000000000000000000000000000000000000000000000000000000000000001692506399a88ec49150604401600060405180830381600087803b15801562001ee357600080fd5b505af115801562001ef8573d6000803e3d6000fd5b50506040516310270e3d60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081811660048401529350600092507f0000000000000000000000000000000000000000000000000000000000000000169063204e1c7a90602401602060405180830381865afa15801562001f88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001fae91906200283a565b6040805160048082526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166335738f8960e11b1790529151639623609d60e01b81529293506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639623609d926200205c9287927f00000000000000000000000000000000000000000000000000000000000000009201620031a1565b600060405180830381600087803b1580156200207757600080fd5b505af11580156200208c573d6000803e3d6000fd5b505060405163266a23b160e21b81526001600160a01b03858116600483015284811660248301527f00000000000000000000000000000000000000000000000000000000000000001692506399a88ec49150604401600060405180830381600087803b158015620020fc57600080fd5b505af115801562002111573d6000803e3d6000fd5b50506040516310270e3d60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081811660048401529350600092507f0000000000000000000000000000000000000000000000000000000000000000169063204e1c7a90602401602060405180830381865afa158015620021a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021c791906200283a565b6040805160048082526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166335738f8960e11b1790529151639623609d60e01b81529293506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639623609d92620022759287927f00000000000000000000000000000000000000000000000000000000000000009201620031a1565b600060405180830381600087803b1580156200229057600080fd5b505af1158015620022a5573d6000803e3d6000fd5b505060405163266a23b160e21b81526001600160a01b03858116600483015284811660248301527f00000000000000000000000000000000000000000000000000000000000000001692506399a88ec49150604401600060405180830381600087803b1580156200231557600080fd5b505af11580156200232a573d6000803e3d6000fd5b50506040516310270e3d60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081811660048401529350600092507f0000000000000000000000000000000000000000000000000000000000000000169063204e1c7a90602401602060405180830381865afa158015620023ba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023e091906200283a565b6040805160048082526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166335738f8960e11b1790529151639623609d60e01b81529293506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639623609d926200248e9287927f00000000000000000000000000000000000000000000000000000000000000009201620031a1565b600060405180830381600087803b158015620024a957600080fd5b505af1158015620024be573d6000803e3d6000fd5b505060405163266a23b160e21b81526001600160a01b03858116600483015284811660248301527f00000000000000000000000000000000000000000000000000000000000000001692506399a88ec49150604401600060405180830381600087803b1580156200252e57600080fd5b505af115801562002543573d6000803e3d6000fd5b50505050505050505050505050565b610ed380620031d983390190565b61134380620040ac83390190565b604051806102400160405280600067ffffffffffffffff16815260200160006001600160a01b03168152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016200260d6040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152602001600081526020016200263162002653565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806200266862002675565b815260200160005b905290565b60405180604001604052806200268a62002694565b8152602001620026705b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715620026ef57620026ef620026b2565b60405290565b6040805190810167ffffffffffffffff81118282101715620026ef57620026ef620026b2565b604051601f8201601f1916810167ffffffffffffffff81118282101715620027475762002747620026b2565b604052919050565b600067ffffffffffffffff8211156200276c576200276c620026b2565b5060051b60200190565b6001600160a01b03811681146200278c57600080fd5b50565b60006020808385031215620027a357600080fd5b823567ffffffffffffffff811115620027bb57600080fd5b8301601f81018513620027cd57600080fd5b8035620027e4620027de826200274f565b6200271b565b81815260059190911b820183019083810190878311156200280457600080fd5b928401925b828410156200282f5783356200281f8162002776565b8252928401929084019062002809565b979650505050505050565b6000602082840312156200284d57600080fd5b815162001c988162002776565b6000815180845260005b81811015620028825760208185018101518683018201520162002864565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015620028d457815187529582019590820190600101620028b6565b509495945050505050565b60038110620028fe57634e487b7160e01b600052602160045260246000fd5b9052565b805180518360005b60028110156200292b5782518252602092830192909101906001016200290a565b505050602090810151906040840160005b60028110156200296557835167ffffffffffffffff16825292820192908201906001016200293c565b505082015190506200297b6080840182620028df565b505050565b805167ffffffffffffffff16825260006103206020830151620029ae60208601826001600160a01b03169052565b5060408301516040850152606083015160608501526080830151620029de60808601826001600160a01b03169052565b5060a0830151620029fa60a08601826001600160a01b03169052565b5060c083015160c085015260e08301518160e086015262002a1e828601826200285a565b915050610100808401518583038287015262002a3b8382620028a2565b6101208681015180518983015260208101516101408a015260408101516101608a015260608101516101808a01529194509250905050506101408301516101a0818187015261016085015191506101c0828188015261018086015192506101e08381890152828701519350610200925062002ab98389018562002902565b908601516102a08801528501516001600160a01b03166102c087015284015160ff166102e08601525061022083015167ffffffffffffffff81166103008601525b509392505050565b60208152600062001c98602083018462002980565b60006101406001600160a01b03808e16845267ffffffffffffffff8d166020850152808c1660408501528a60608501528960808501528860a085015280881660c085015280871660e08501525060ff85166101008401528061012084015262002b8381840185620028a2565b9d9c50505050505050505050505050565b600061014080835262002baa8184018662002980565b9150506001600160a01b038351166020830152602083015162002bd860408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e083015161010062002c5f818501836001600160a01b03169052565b8401516001600160a01b038116610120850152905062002afa565b634e487b7160e01b600052603260045260246000fd5b8051801515811462002ca157600080fd5b919050565b60006020828403121562002cb957600080fd5b62001c988262002c90565b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362002d0e5762002d0e62002cc4565b5060010190565b600081518084526020808501945080840160005b83811015620028d45781516001600160a01b03168752958201959082019060010162002d29565b60408152600062002d65604083018562002d15565b82810360208481019190915284518083528582019282019060005b8181101562002da057845115158352938301939183019160010162002d80565b5090979650505050505050565b805167ffffffffffffffff8116811462002ca157600080fd5b60006020828403121562002dd957600080fd5b62001c988262002dad565b600060a0828403121562002df757600080fd5b60405160a0810181811067ffffffffffffffff8211171562002e1d5762002e1d620026b2565b6040528251815262002e326020840162002dad565b602082015262002e456040840162002dad565b604082015262002e586060840162002dad565b606082015262002e6b6080840162002c90565b60808201529392505050565b60208152600062001c98602083018462002d15565b600067ffffffffffffffff80831681810362002eac5762002eac62002cc4565b6001019392505050565b6000610180828403121562002eca57600080fd5b62002ed4620026c8565b82518152602083015160208201526040830151604082015262002efa6060840162002dad565b606082015262002f0d6080840162002dad565b608082015262002f2060a0840162002dad565b60a082015262002f3360c0840162002dad565b60c082015262002f4660e0840162002dad565b60e082015261010062002f5b81850162002dad565b9082015261012062002f6f84820162002dad565b9082015261014062002f8384820162002dad565b90820152610160928301519281019290925250919050565b600082601f83011262002fad57600080fd5b62002fb7620026f5565b80604084018581111562002fca57600080fd5b845b8181101562002fef5762002fe08162002dad565b84526020938401930162002fcc565b509095945050505050565b80516003811062002ca157600080fd5b60008082840360c08112156200301f57600080fd5b60a08112156200302e57600080fd5b62003038620026f5565b60808212156200304757600080fd5b62003051620026f5565b915085601f8601126200306357600080fd5b6200306d620026f5565b8060408701888111156200308057600080fd5b875b818110156200309c57805184526020938401930162003082565b50818552620030ac898262002f9b565b6020860152505050818152620030c56080860162002ffa565b602082015260a094909401519395939450505050565b60c08101620030eb828562002902565b8260a08301529392505050565b6000602082840312156200310b57600080fd5b5051919050565b600060208083850312156200312657600080fd5b825167ffffffffffffffff8111156200313e57600080fd5b8301601f810185136200315057600080fd5b805162003161620027de826200274f565b81815260059190911b820183019083810190878311156200318157600080fd5b928401925b828410156200282f5783518252928401929084019062003186565b60006001600160a01b03808616835280851660208401525060606040830152620031cf60608301846200285a565b9594505050505056fe608060405260405162000ed338038062000ed3833981016040819052620000269162000487565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ba565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b6200023e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000eac60279139620002f8565b9392505050565b60006200018060008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200026a1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620001fa1760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000567565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f1919062000585565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b50506000910152565b6000806000606084860312156200049d57600080fd5b620004a8846200042e565b9250620004b8602085016200042e565b60408501519092506001600160401b0380821115620004d657600080fd5b818601915086601f830112620004eb57600080fd5b8151818111156200050057620005006200044b565b604051601f8201601f19908116603f011681019083821181831017156200052b576200052b6200044b565b816040528281528960208487010111156200054557600080fd5b6200055883602083016020880162000461565b80955050505050509250925092565b600082516200057b81846020870162000461565b9190910192915050565b6020815260008251806020840152620005a681604085016020870162000461565b601f01601f19169190910160400192915050565b6108c280620005ca6000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100d9578063f851a440146100f95761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61010e565b005b61006b61010e565b34801561008157600080fd5b5061006b610090366004610736565b610128565b61006b6100a3366004610751565b610165565b3480156100b457600080fd5b506100bd6101cc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e557600080fd5b5061006b6100f4366004610736565b6101fd565b34801561010557600080fd5b506100bd61021d565b610116610279565b610126610121610329565b610333565b565b610130610357565b6001600160a01b0316330361015d5761015a8160405180602001604052806000815250600061038a565b50565b61015a61010e565b61016d610357565b6001600160a01b031633036101c4576101bf8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061038a915050565b505050565b6101bf61010e565b60006101d6610357565b6001600160a01b031633036101f2576101ed610329565b905090565b6101fa61010e565b90565b610205610357565b6001600160a01b0316330361015d5761015a816103b5565b6000610227610357565b6001600160a01b031633036101f2576101ed610357565b6060610263838360405180606001604052806027815260200161086660279139610409565b9392505050565b6001600160a01b03163b151590565b610281610357565b6001600160a01b031633036101265760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60006101ed6104fd565b3660008037600080366000845af43d6000803e808015610352573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039383610525565b6000825111806103a05750805b156101bf576103af838361023e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103de610357565b604080516001600160a01b03928316815291841660208301520160405180910390a161015a81610565565b60606001600160a01b0384163b6104885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610320565b600080856001600160a01b0316856040516104a391906107f8565b600060405180830381855af49150503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50915091506104f382828661063d565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61037b565b61052e81610676565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105e15760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610320565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6060831561064c575081610263565b82511561065c5782518084602001fd5b8160405162461bcd60e51b81526004016103209190610814565b6001600160a01b0381163b6106f35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610320565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610604565b80356001600160a01b038116811461073157600080fd5b919050565b60006020828403121561074857600080fd5b6102638261071a565b60008060006040848603121561076657600080fd5b61076f8461071a565b9250602084013567ffffffffffffffff8082111561078c57600080fd5b818601915086601f8301126107a057600080fd5b8135818111156107af57600080fd5b8760208285010111156107c157600080fd5b6020830194508093505050509250925092565b60005b838110156107ef5781810151838201526020016107d7565b50506000910152565b6000825161080a8184602087016107d4565b9190910192915050565b60208152600082518060208401526108338160408501602087016107d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c1888b421836e473bfc3e72d153dc5c76569ce769e37cfa444506490e142daa564736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564608060405234801561001057600080fd5b50611323806100206000396000f3fe6080604052600436106100225760003560e01c80631868f9661461003957610031565b366100315761002f610059565b005b61002f610059565b34801561004557600080fd5b5061002f610054366004610d18565b61006b565b6100696100646101bc565b6102a0565b565b60006100756102c9565b6001600160a01b031614801561009b575060006100906102fc565b6001600160a01b0316145b80156100b7575060006100ac610324565b6001600160a01b0316145b156101b4576101b08160c0015183836040516024016100d792919061109e565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e94978d0000000000000000000000000000000000000000000000000000000017905260e08601519087015191516001600160a01b0390921660248301529060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc4d66de800000000000000000000000000000000000000000000000000000000179052608087015161034c565b5050565b6101b0610059565b600060043610156102145760405162461bcd60e51b815260206004820152600b60248201527f4e4f5f46554e435f53494700000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60003361021f6102c9565b6001600160a01b03160361023a576102356102fc565b610242565b610242610324565b90506001600160a01b0381163b61029b5760405162461bcd60e51b815260206004820152601360248201527f5441524745545f4e4f545f434f4e545241435400000000000000000000000000604482015260640161020b565b919050565b3660008037600080366000845af43d6000803e8080156102bf573d6000f35b3d6000fd5b505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6102ed565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d6102ed565b61037760017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104611260565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103146103a5576103a5611281565b6103d060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd611260565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc146103fe576103fe611281565b61042960017f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546e611260565b7f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d1461045757610457611281565b6104608161047f565b61046c858560006104d6565b61047883836000610501565b5050505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104a86102c9565b604080516001600160a01b03928316815291841660208301520160405180910390a16104d38161050a565b50565b6104df836105e2565b6000825111806104ec5750805b156102c4576104fb8383610622565b50505050565b6104df83610650565b6001600160a01b0381166105865760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161020b565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6105eb81610690565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061064783836040518060600160405280602781526020016112c760279139610734565b90505b92915050565b6106598161082a565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b6001600160a01b0381163b61070d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161020b565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105a9565b60606001600160a01b0384163b6107b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161020b565b600080856001600160a01b0316856040516107ce9190611297565b600060405180830381855af49150503d8060008114610809576040519150601f19603f3d011682016040523d82523d6000602084013e61080e565b606091505b509150915061081e8282866108ce565b925050505b9392505050565b6001600160a01b0381163b6108a75760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e7472616374000000000000000000606482015260840161020b565b807f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d6105a9565b606083156108dd575081610823565b8251156108ed5782518084602001fd5b8160405162461bcd60e51b815260040161020b91906112b3565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561094057610940610907565b60405290565b604051610120810167ffffffffffffffff8111828210171561094057610940610907565b604051610240810167ffffffffffffffff8111828210171561094057610940610907565b604051601f8201601f1916810167ffffffffffffffff811182821017156109b7576109b7610907565b604052919050565b803567ffffffffffffffff8116811461029b57600080fd5b80356001600160a01b038116811461029b57600080fd5b600082601f8301126109ff57600080fd5b813567ffffffffffffffff811115610a1957610a19610907565b610a2c6020601f19601f8401160161098e565b818152846020838601011115610a4157600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610a6f57600080fd5b8135602067ffffffffffffffff821115610a8b57610a8b610907565b8160051b610a9a82820161098e565b9283528481018201928281019087851115610ab457600080fd5b83870192505b84831015610ad357823582529183019190830190610aba565b979650505050505050565b600060808284031215610af057600080fd5b6040516080810181811067ffffffffffffffff82111715610b1357610b13610907565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f830112610b5557600080fd5b610b5d61091d565b806040840185811115610b6f57600080fd5b845b81811015610b9057610b82816109bf565b845260209384019301610b71565b509095945050505050565b80356003811061029b57600080fd5b600081830360a0811215610bbd57600080fd5b610bc561091d565b91506080811215610bd557600080fd5b50610bde61091d565b83601f840112610bed57600080fd5b610bf561091d565b806040850186811115610c0757600080fd5b855b81811015610c21578035845260209384019301610c09565b50818452610c2f8782610b44565b60208501525050508152610c4560808301610b9b565b602082015292915050565b803560ff8116811461029b57600080fd5b60006101208284031215610c7457600080fd5b610c7c610946565b9050610c87826109d7565b8152610c95602083016109d7565b6020820152610ca6604083016109d7565b6040820152610cb7606083016109d7565b6060820152610cc8608083016109d7565b6080820152610cd960a083016109d7565b60a0820152610cea60c083016109d7565b60c0820152610cfb60e083016109d7565b60e0820152610100610d0e8184016109d7565b9082015292915050565b600080610140808486031215610d2d57600080fd5b833567ffffffffffffffff80821115610d4557600080fd5b908501906103208288031215610d5a57600080fd5b610d6261096a565b610d6b836109bf565b8152610d79602084016109d7565b60208201526040830135604082015260608301356060820152610d9e608084016109d7565b6080820152610daf60a084016109d7565b60a082015260c083013560c082015260e083013582811115610dd057600080fd5b610ddc898286016109ee565b60e0830152506101008084013583811115610df657600080fd5b610e028a828701610a5e565b8284015250506101209150610e1988838501610ade565b828201526101a0915081830135848201526101c09350838301356101608201526101e080840135610180830152610200610e558a828701610baa565b848401526102a085013586840152610e706102c086016109d7565b82840152610e816102e08601610c50565b9083015250610e9361030084016109bf565b61022082015280955050505050610ead8460208501610c61565b90509250929050565b60005b83811015610ed1578181015183820152602001610eb9565b50506000910152565b60008151808452610ef2816020860160208601610eb6565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015610f3657815187529582019590820190600101610f1a565b509495945050505050565b60038110610f5f57634e487b7160e01b600052602160045260246000fd5b9052565b805180518360005b6002811015610f8a578251825260209283019290910190600101610f6b565b505050602090810151906040840160005b6002811015610fc257835167ffffffffffffffff1682529282019290820190600101610f9b565b505082015190506102c46080840182610f41565b6001600160a01b0380825116835280602083015116602084015280604083015116604084015250606081015161101760608401826001600160a01b03169052565b50608081015161103260808401826001600160a01b03169052565b5060a081015161104d60a08401826001600160a01b03169052565b5060c081015161106860c08401826001600160a01b03169052565b5060e081015161108360e08401826001600160a01b03169052565b50610100818101516001600160a01b038116848301526104fb565b60006101408083526110bc818401865167ffffffffffffffff169052565b60208501516101606110d8818601836001600160a01b03169052565b604087015191506101808281870152606088015192506101a08381880152608089015193506101c0611114818901866001600160a01b03169052565b60a08a015194506101e0611132818a01876001600160a01b03169052565b60c08b0151955061020086818b015260e08c0151965061032061022081818d01526111616104608d018a610eda565b98506101008e01517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec08d8b03016102408e015261119e8a82610f06565b9950506101208e01516111d66102608e0182805182526020810151602083015260408101516040830152606081015160608301525050565b50988d01516102e08c0152868d01516103008c0152858d0151818c0152848d0151986112066103408d018b610f63565b938d01516103e08c015250908b01516001600160a01b03166104008a01528a015160ff1661042089015289015167ffffffffffffffff8116610440890152945061124f92505050565b915061082390506020830184610fd6565b8181038181111561064a57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b600082516112a9818460208701610eb6565b9190910192915050565b6020815260006106476020830184610eda56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220633a66e290971a5fc63ce94b2c31c55ef133528c17935d9519de13fb22940b7364736f6c63430008110033a2646970667358221220dcedc17cdccfc5c535899cbd845729eeddf2033f64206028680fe7aab2b6a82264736f6c63430008110033608060405234801561001057600080fd5b50610a0d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806331644130146100465780638eaa6ac01461006c578063945c94941461008d575b600080fd5b61005961005436600461041d565b6100a2565b6040519081526020015b60405180910390f35b61007f61007a366004610448565b610193565b604051610063929190610483565b6100a061009b36600461050a565b6102bf565b005b60006101526100b636859003850185610598565b8051805160209182015192820151805190830151604080517f476c6f62616c2073746174653a0000000000000000000000000000000000000081870152602d810194909452604d8401959095527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b8261016360a0860160808701610667565b6040516020016101759392919061068b565b60405160208183030381529060405280519060200120905092915050565b61019b6103ab565b600082815260208190526040812080546101b4906106c9565b80601f01602080910402602001604051908101604052809291908181526020018280546101e0906106c9565b801561022d5780601f106102025761010080835404028352916020019161022d565b820191906000526020600020905b81548152906001019060200180831161021057829003601f168201915b50505050508060200190518101906102459190610766565b909250905060008190036102ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f48617368206e6f7420796574207365740000000000000000000000000000000060448201526064015b60405180910390fd5b915091565b6102c982826100a2565b8314610331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642068617368000000000000000000000000000000000000000060448201526064016102b1565b818160405160200161034492919061088c565b60408051601f1981840301815291815260008581526020819052209061036a90826108f5565b507f14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad983838360405161039e939291906109b5565b60405180910390a1505050565b60405180604001604052806103be6103cb565b815260200160005b905290565b60405180604001604052806103de6103e7565b81526020016103c65b60405180604001604052806002906020820280368337509192915050565b600060a0828403121561041757600080fd5b50919050565b60008060c0838503121561043057600080fd5b61043a8484610405565b9460a0939093013593505050565b60006020828403121561045a57600080fd5b5035919050565b6003811061047f57634e487b7160e01b600052602160045260246000fd5b9052565b8251805160c0830191908360005b60028110156104b0578251825260209283019290910190600101610491565b505050602090810151906040840160005b60028110156104e857835167ffffffffffffffff16825292820192908201906001016104c1565b505085015190506104fc6080840182610461565b508260a08301529392505050565b600080600060e0848603121561051f57600080fd5b833592506105308560208601610405565b915060c084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561057957610579610540565b60405290565b67ffffffffffffffff8116811461059557600080fd5b50565b6000608082840312156105aa57600080fd5b6105b2610556565b83601f8401126105c157600080fd5b6105c9610556565b8060408501868111156105db57600080fd5b855b818110156105f55780358452602093840193016105dd565b5081845286605f87011261060857600080fd5b610610610556565b9250829150608086018781111561062657600080fd5b8082101561064b5781356106398161057f565b84526020938401939190910190610626565b50506020830152509392505050565b6003811061059557600080fd5b60006020828403121561067957600080fd5b81356106848161065a565b9392505050565b8381528260208201526000600383106106b457634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b600181811c908216806106dd57607f821691505b60208210810361041757634e487b7160e01b600052602260045260246000fd5b600082601f83011261070e57600080fd5b610716610556565b80604084018581111561072857600080fd5b845b8181101561074b57805161073d8161057f565b84526020938401930161072a565b509095945050505050565b80516107618161065a565b919050565b60008082840360c081121561077a57600080fd5b60a081121561078857600080fd5b610790610556565b608082121561079e57600080fd5b6107a6610556565b915085601f8601126107b757600080fd5b6107bf610556565b8060408701888111156107d157600080fd5b875b818110156107eb5780518452602093840193016107d3565b508185526107f989826106fd565b602086015250505081815261081060808601610756565b602082015260a094909401519395939450505050565b6040818337604082016040820160005b600281101561086957813561084a8161057f565b67ffffffffffffffff1683526020928301929190910190600101610836565b505050608081013561087a8161065a565b6108876080840182610461565b505050565b60c0810161089a8285610826565b8260a08301529392505050565b601f82111561088757600081815260208120601f850160051c810160208610156108ce5750805b601f850160051c820191505b818110156108ed578281556001016108da565b505050505050565b815167ffffffffffffffff81111561090f5761090f610540565b6109238161091d84546106c9565b846108a7565b602080601f83116001811461095857600084156109405750858301515b600019600386901b1c1916600185901b1785556108ed565b600085815260208120601f198616915b8281101561098757888601518255948401946001909101908401610968565b50858210156109a55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b83815260e081016109c96020830185610826565b8260c083015294935050505056fea2646970667358221220ad97beec20a6ef84efe62a198bb5494d56d46739a6a51a178b2cb58f8a758eb364736f6c6343000811003360a060405234801561001057600080fd5b50604051610be3380380610be383398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610b206100c3600039600081816101a5015281816101f6015281816102b601528181610333015281816104500152818161051b0152818161058a0152818161060e01526106a50152610b206000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a23c44b111610076578063cb23bcb51161005b578063cb23bcb5146101a0578063dff69787146101c7578063facd743b146101cf57600080fd5b8063a23c44b11461012f578063bc45e0ae1461019857600080fd5b806365f7f80d146100a85780636ddd3744146100ce5780638ee1a126146100f957806392c8134c1461010f575b600080fd5b6100b06101f2565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6100e16100dc36600461072b565b61027b565b6040516001600160a01b0390911681526020016100c5565b61010161032f565b6040519081526020016100c5565b61012261011d36600461072b565b6103b3565b6040516100c5919061074f565b61014261013d366004610868565b6104bc565b6040516100c59190600060a08201905082518252602083015167ffffffffffffffff8082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b6100e1610586565b6100e17f000000000000000000000000000000000000000000000000000000000000000081565b6100b061060a565b6101e26101dd366004610868565b61066a565b60405190151581526020016100c5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365f7f80d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102769190610895565b905090565b6040517f6ddd374400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ddd374490602401602060405180830381865afa158015610305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032991906108b2565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ee1a1266040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027691906108cf565b6040805161018081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820181905261016082015290517f92c8134c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906392c8134c9060240161018060405180830381865afa158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610939565b6040805160a08101825260008082526020820181905281830181905260608201819052608082015290517fa23c44b10000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a23c44b19060240160a060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610a1b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc45e0ae6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027691906108b2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dff697876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610252573d6000803e3d6000fd5b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063facd743b90602401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610acf565b67ffffffffffffffff8116811461072857600080fd5b50565b60006020828403121561073d57600080fd5b813561074881610712565b9392505050565b600061018082019050825182526020830151602083015260408301516040830152606083015161078b606084018267ffffffffffffffff169052565b5060808301516107a7608084018267ffffffffffffffff169052565b5060a08301516107c360a084018267ffffffffffffffff169052565b5060c08301516107df60c084018267ffffffffffffffff169052565b5060e08301516107fb60e084018267ffffffffffffffff169052565b506101008381015167ffffffffffffffff81168483015250506101208381015167ffffffffffffffff81168483015250506101408381015167ffffffffffffffff811684830152505061016092830151919092015290565b6001600160a01b038116811461072857600080fd5b60006020828403121561087a57600080fd5b813561074881610853565b805161089081610712565b919050565b6000602082840312156108a757600080fd5b815161074881610712565b6000602082840312156108c457600080fd5b815161074881610853565b6000602082840312156108e157600080fd5b5051919050565b604051610180810167ffffffffffffffff81118282101715610933577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b6000610180828403121561094c57600080fd5b6109546108e8565b82518152602083015160208201526040830151604082015261097860608401610885565b606082015261098960808401610885565b608082015261099a60a08401610885565b60a08201526109ab60c08401610885565b60c08201526109bc60e08401610885565b60e08201526101006109cf818501610885565b908201526101206109e1848201610885565b908201526101406109f3848201610885565b90820152610160928301519281019290925250919050565b8051801515811461089057600080fd5b600060a08284031215610a2d57600080fd5b60405160a0810181811067ffffffffffffffff82111715610a77577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052825181526020830151610a8c81610712565b60208201526040830151610a9f81610712565b60408201526060830151610ab281610712565b6060820152610ac360808401610a0b565b60808201529392505050565b600060208284031215610ae157600080fd5b61074882610a0b56fea2646970667358221220bf0bccc7c5c019193992c9fef437a5e097913274af11a1b0783fd855b4a3230b64736f6c63430008110033608060405234801561001057600080fd5b506040516102a03803806102a083398101604081905261002f916100bf565b8051610042906000906020840190610049565b505061017c565b828054828255906000526020600020908101928215610084579160200282015b82811115610084578251825591602001919060010190610069565b50610090929150610094565b5090565b5b808211156100905760008155600101610095565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156100d257600080fd5b82516001600160401b03808211156100e957600080fd5b818501915085601f8301126100fd57600080fd5b81518181111561010f5761010f6100a9565b8060051b604051601f19603f83011681018181108582111715610134576101346100a9565b60405291825284820192508381018501918883111561015257600080fd5b938501935b8285101561017057845184529385019392850192610157565b98975050505050505050565b6101158061018b6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063b0ec2ae114602d575b600080fd5b60336047565b604051603e9190609d565b60405180910390f35b60606000805480602002602001604051908101604052809291908181526020018280548015609357602002820191906000526020600020905b8154815260200190600101908083116080575b5050505050905090565b6020808252825182820181905260009190848201906040850190845b8181101560d35783518352928401929184019160010160b9565b5090969550505050505056fea26469706673582212206714ce4f3e585f9d18cae85a02cd7d72257af7f285c78131c02638e4985f787e64736f6c63430008110033",
}

// BOLDUpgradeActionABI is the input ABI used to generate the binding from.
// Deprecated: Use BOLDUpgradeActionMetaData.ABI instead.
var BOLDUpgradeActionABI = BOLDUpgradeActionMetaData.ABI

// BOLDUpgradeActionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BOLDUpgradeActionMetaData.Bin instead.
var BOLDUpgradeActionBin = BOLDUpgradeActionMetaData.Bin

// DeployBOLDUpgradeAction deploys a new Ethereum contract, binding an instance of BOLDUpgradeAction to it.
func DeployBOLDUpgradeAction(auth *bind.TransactOpts, backend bind.ContractBackend, contracts BOLDUpgradeActionContracts, proxyAdmins BOLDUpgradeActionProxyAdmins, implementations BOLDUpgradeActionImplementations, settings BOLDUpgradeActionSettings) (common.Address, *types.Transaction, *BOLDUpgradeAction, error) {
	parsed, err := BOLDUpgradeActionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BOLDUpgradeActionBin), backend, contracts, proxyAdmins, implementations, settings)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BOLDUpgradeAction{BOLDUpgradeActionCaller: BOLDUpgradeActionCaller{contract: contract}, BOLDUpgradeActionTransactor: BOLDUpgradeActionTransactor{contract: contract}, BOLDUpgradeActionFilterer: BOLDUpgradeActionFilterer{contract: contract}}, nil
}

// BOLDUpgradeAction is an auto generated Go binding around an Ethereum contract.
type BOLDUpgradeAction struct {
	BOLDUpgradeActionCaller     // Read-only binding to the contract
	BOLDUpgradeActionTransactor // Write-only binding to the contract
	BOLDUpgradeActionFilterer   // Log filterer for contract events
}

// BOLDUpgradeActionCaller is an auto generated read-only Go binding around an Ethereum contract.
type BOLDUpgradeActionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOLDUpgradeActionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BOLDUpgradeActionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOLDUpgradeActionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BOLDUpgradeActionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOLDUpgradeActionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BOLDUpgradeActionSession struct {
	Contract     *BOLDUpgradeAction // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BOLDUpgradeActionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BOLDUpgradeActionCallerSession struct {
	Contract *BOLDUpgradeActionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// BOLDUpgradeActionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BOLDUpgradeActionTransactorSession struct {
	Contract     *BOLDUpgradeActionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// BOLDUpgradeActionRaw is an auto generated low-level Go binding around an Ethereum contract.
type BOLDUpgradeActionRaw struct {
	Contract *BOLDUpgradeAction // Generic contract binding to access the raw methods on
}

// BOLDUpgradeActionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BOLDUpgradeActionCallerRaw struct {
	Contract *BOLDUpgradeActionCaller // Generic read-only contract binding to access the raw methods on
}

// BOLDUpgradeActionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BOLDUpgradeActionTransactorRaw struct {
	Contract *BOLDUpgradeActionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBOLDUpgradeAction creates a new instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeAction(address common.Address, backend bind.ContractBackend) (*BOLDUpgradeAction, error) {
	contract, err := bindBOLDUpgradeAction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeAction{BOLDUpgradeActionCaller: BOLDUpgradeActionCaller{contract: contract}, BOLDUpgradeActionTransactor: BOLDUpgradeActionTransactor{contract: contract}, BOLDUpgradeActionFilterer: BOLDUpgradeActionFilterer{contract: contract}}, nil
}

// NewBOLDUpgradeActionCaller creates a new read-only instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeActionCaller(address common.Address, caller bind.ContractCaller) (*BOLDUpgradeActionCaller, error) {
	contract, err := bindBOLDUpgradeAction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionCaller{contract: contract}, nil
}

// NewBOLDUpgradeActionTransactor creates a new write-only instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeActionTransactor(address common.Address, transactor bind.ContractTransactor) (*BOLDUpgradeActionTransactor, error) {
	contract, err := bindBOLDUpgradeAction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionTransactor{contract: contract}, nil
}

// NewBOLDUpgradeActionFilterer creates a new log filterer instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeActionFilterer(address common.Address, filterer bind.ContractFilterer) (*BOLDUpgradeActionFilterer, error) {
	contract, err := bindBOLDUpgradeAction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionFilterer{contract: contract}, nil
}

// bindBOLDUpgradeAction binds a generic wrapper to an already deployed contract.
func bindBOLDUpgradeAction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BOLDUpgradeActionMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BOLDUpgradeAction *BOLDUpgradeActionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BOLDUpgradeAction.Contract.BOLDUpgradeActionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BOLDUpgradeAction *BOLDUpgradeActionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.BOLDUpgradeActionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BOLDUpgradeAction *BOLDUpgradeActionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.BOLDUpgradeActionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BOLDUpgradeAction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.contract.Transact(opts, method, params...)
}

// ANYTRUSTFASTCONFIRMER is a free data retrieval call binding the contract method 0xd1da2c5c.
//
// Solidity: function ANY_TRUST_FAST_CONFIRMER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) ANYTRUSTFASTCONFIRMER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "ANY_TRUST_FAST_CONFIRMER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ANYTRUSTFASTCONFIRMER is a free data retrieval call binding the contract method 0xd1da2c5c.
//
// Solidity: function ANY_TRUST_FAST_CONFIRMER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) ANYTRUSTFASTCONFIRMER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ANYTRUSTFASTCONFIRMER(&_BOLDUpgradeAction.CallOpts)
}

// ANYTRUSTFASTCONFIRMER is a free data retrieval call binding the contract method 0xd1da2c5c.
//
// Solidity: function ANY_TRUST_FAST_CONFIRMER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) ANYTRUSTFASTCONFIRMER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ANYTRUSTFASTCONFIRMER(&_BOLDUpgradeAction.CallOpts)
}

// BIGSTEPLEAFSIZE is a free data retrieval call binding the contract method 0x1ccc2cd1.
//
// Solidity: function BIGSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) BIGSTEPLEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "BIGSTEP_LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BIGSTEPLEAFSIZE is a free data retrieval call binding the contract method 0x1ccc2cd1.
//
// Solidity: function BIGSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) BIGSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BIGSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BIGSTEPLEAFSIZE is a free data retrieval call binding the contract method 0x1ccc2cd1.
//
// Solidity: function BIGSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) BIGSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BIGSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BLOCKLEAFSIZE is a free data retrieval call binding the contract method 0x609fb503.
//
// Solidity: function BLOCK_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) BLOCKLEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "BLOCK_LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BLOCKLEAFSIZE is a free data retrieval call binding the contract method 0x609fb503.
//
// Solidity: function BLOCK_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) BLOCKLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BLOCKLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BLOCKLEAFSIZE is a free data retrieval call binding the contract method 0x609fb503.
//
// Solidity: function BLOCK_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) BLOCKLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BLOCKLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) BRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) BRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.BRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) BRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.BRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CHAINID() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.CHAINID(&_BOLDUpgradeAction.CallOpts)
}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CHAINID() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.CHAINID(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEGRACEPERIODBLOCKS is a free data retrieval call binding the contract method 0xec4f74ce.
//
// Solidity: function CHALLENGE_GRACE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CHALLENGEGRACEPERIODBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CHALLENGE_GRACE_PERIOD_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CHALLENGEGRACEPERIODBLOCKS is a free data retrieval call binding the contract method 0xec4f74ce.
//
// Solidity: function CHALLENGE_GRACE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CHALLENGEGRACEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEGRACEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEGRACEPERIODBLOCKS is a free data retrieval call binding the contract method 0xec4f74ce.
//
// Solidity: function CHALLENGE_GRACE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CHALLENGEGRACEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEGRACEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEPERIODBLOCKS is a free data retrieval call binding the contract method 0x91ddb285.
//
// Solidity: function CHALLENGE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CHALLENGEPERIODBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CHALLENGE_PERIOD_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CHALLENGEPERIODBLOCKS is a free data retrieval call binding the contract method 0x91ddb285.
//
// Solidity: function CHALLENGE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CHALLENGEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEPERIODBLOCKS is a free data retrieval call binding the contract method 0x91ddb285.
//
// Solidity: function CHALLENGE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CHALLENGEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CONFIRMPERIODBLOCKS is a free data retrieval call binding the contract method 0x1047fc52.
//
// Solidity: function CONFIRM_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CONFIRMPERIODBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CONFIRM_PERIOD_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CONFIRMPERIODBLOCKS is a free data retrieval call binding the contract method 0x1047fc52.
//
// Solidity: function CONFIRM_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CONFIRMPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CONFIRMPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CONFIRMPERIODBLOCKS is a free data retrieval call binding the contract method 0x1047fc52.
//
// Solidity: function CONFIRM_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CONFIRMPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CONFIRMPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// DISABLEVALIDATORWHITELIST is a free data retrieval call binding the contract method 0xb38d57f0.
//
// Solidity: function DISABLE_VALIDATOR_WHITELIST() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) DISABLEVALIDATORWHITELIST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "DISABLE_VALIDATOR_WHITELIST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DISABLEVALIDATORWHITELIST is a free data retrieval call binding the contract method 0xb38d57f0.
//
// Solidity: function DISABLE_VALIDATOR_WHITELIST() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) DISABLEVALIDATORWHITELIST() (bool, error) {
	return _BOLDUpgradeAction.Contract.DISABLEVALIDATORWHITELIST(&_BOLDUpgradeAction.CallOpts)
}

// DISABLEVALIDATORWHITELIST is a free data retrieval call binding the contract method 0xb38d57f0.
//
// Solidity: function DISABLE_VALIDATOR_WHITELIST() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) DISABLEVALIDATORWHITELIST() (bool, error) {
	return _BOLDUpgradeAction.Contract.DISABLEVALIDATORWHITELIST(&_BOLDUpgradeAction.CallOpts)
}

// IMPLBRIDGE is a free data retrieval call binding the contract method 0xdae7cb8b.
//
// Solidity: function IMPL_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLBRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLBRIDGE is a free data retrieval call binding the contract method 0xdae7cb8b.
//
// Solidity: function IMPL_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// IMPLBRIDGE is a free data retrieval call binding the contract method 0xdae7cb8b.
//
// Solidity: function IMPL_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// IMPLCHALLENGEMANAGER is a free data retrieval call binding the contract method 0x10a662e2.
//
// Solidity: function IMPL_CHALLENGE_MANAGER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLCHALLENGEMANAGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_CHALLENGE_MANAGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLCHALLENGEMANAGER is a free data retrieval call binding the contract method 0x10a662e2.
//
// Solidity: function IMPL_CHALLENGE_MANAGER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLCHALLENGEMANAGER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLCHALLENGEMANAGER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLCHALLENGEMANAGER is a free data retrieval call binding the contract method 0x10a662e2.
//
// Solidity: function IMPL_CHALLENGE_MANAGER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLCHALLENGEMANAGER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLCHALLENGEMANAGER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPADMIN is a free data retrieval call binding the contract method 0x00f9731e.
//
// Solidity: function IMPL_NEW_ROLLUP_ADMIN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLNEWROLLUPADMIN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_NEW_ROLLUP_ADMIN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLNEWROLLUPADMIN is a free data retrieval call binding the contract method 0x00f9731e.
//
// Solidity: function IMPL_NEW_ROLLUP_ADMIN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLNEWROLLUPADMIN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPADMIN(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPADMIN is a free data retrieval call binding the contract method 0x00f9731e.
//
// Solidity: function IMPL_NEW_ROLLUP_ADMIN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLNEWROLLUPADMIN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPADMIN(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPUSER is a free data retrieval call binding the contract method 0x4692de5d.
//
// Solidity: function IMPL_NEW_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLNEWROLLUPUSER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_NEW_ROLLUP_USER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLNEWROLLUPUSER is a free data retrieval call binding the contract method 0x4692de5d.
//
// Solidity: function IMPL_NEW_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLNEWROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPUSER is a free data retrieval call binding the contract method 0x4692de5d.
//
// Solidity: function IMPL_NEW_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLNEWROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLOUTBOX is a free data retrieval call binding the contract method 0xc897f55e.
//
// Solidity: function IMPL_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLOUTBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_OUTBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLOUTBOX is a free data retrieval call binding the contract method 0xc897f55e.
//
// Solidity: function IMPL_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLOUTBOX is a free data retrieval call binding the contract method 0xc897f55e.
//
// Solidity: function IMPL_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLPATCHEDOLDROLLUPUSER is a free data retrieval call binding the contract method 0x2db93bdc.
//
// Solidity: function IMPL_PATCHED_OLD_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLPATCHEDOLDROLLUPUSER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_PATCHED_OLD_ROLLUP_USER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLPATCHEDOLDROLLUPUSER is a free data retrieval call binding the contract method 0x2db93bdc.
//
// Solidity: function IMPL_PATCHED_OLD_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLPATCHEDOLDROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLPATCHEDOLDROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLPATCHEDOLDROLLUPUSER is a free data retrieval call binding the contract method 0x2db93bdc.
//
// Solidity: function IMPL_PATCHED_OLD_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLPATCHEDOLDROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLPATCHEDOLDROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLREI is a free data retrieval call binding the contract method 0xc21c4233.
//
// Solidity: function IMPL_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLREI(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_REI")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLREI is a free data retrieval call binding the contract method 0xc21c4233.
//
// Solidity: function IMPL_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLREI(&_BOLDUpgradeAction.CallOpts)
}

// IMPLREI is a free data retrieval call binding the contract method 0xc21c4233.
//
// Solidity: function IMPL_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLREI(&_BOLDUpgradeAction.CallOpts)
}

// IMPLSEQUENCERINBOX is a free data retrieval call binding the contract method 0xc519d151.
//
// Solidity: function IMPL_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLSEQUENCERINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_SEQUENCER_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLSEQUENCERINBOX is a free data retrieval call binding the contract method 0xc519d151.
//
// Solidity: function IMPL_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLSEQUENCERINBOX is a free data retrieval call binding the contract method 0xc519d151.
//
// Solidity: function IMPL_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// INBOX is a free data retrieval call binding the contract method 0xb7010697.
//
// Solidity: function INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) INBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// INBOX is a free data retrieval call binding the contract method 0xb7010697.
//
// Solidity: function INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) INBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.INBOX(&_BOLDUpgradeAction.CallOpts)
}

// INBOX is a free data retrieval call binding the contract method 0xb7010697.
//
// Solidity: function INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) INBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.INBOX(&_BOLDUpgradeAction.CallOpts)
}

// L1TIMELOCK is a free data retrieval call binding the contract method 0xbf5e3d52.
//
// Solidity: function L1_TIMELOCK() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) L1TIMELOCK(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "L1_TIMELOCK")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1TIMELOCK is a free data retrieval call binding the contract method 0xbf5e3d52.
//
// Solidity: function L1_TIMELOCK() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) L1TIMELOCK() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.L1TIMELOCK(&_BOLDUpgradeAction.CallOpts)
}

// L1TIMELOCK is a free data retrieval call binding the contract method 0xbf5e3d52.
//
// Solidity: function L1_TIMELOCK() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) L1TIMELOCK() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.L1TIMELOCK(&_BOLDUpgradeAction.CallOpts)
}

// MINISTAKEAMOUNTSSTORAGE is a free data retrieval call binding the contract method 0xb5e00c3f.
//
// Solidity: function MINI_STAKE_AMOUNTS_STORAGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) MINISTAKEAMOUNTSSTORAGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "MINI_STAKE_AMOUNTS_STORAGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MINISTAKEAMOUNTSSTORAGE is a free data retrieval call binding the contract method 0xb5e00c3f.
//
// Solidity: function MINI_STAKE_AMOUNTS_STORAGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) MINISTAKEAMOUNTSSTORAGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.MINISTAKEAMOUNTSSTORAGE(&_BOLDUpgradeAction.CallOpts)
}

// MINISTAKEAMOUNTSSTORAGE is a free data retrieval call binding the contract method 0xb5e00c3f.
//
// Solidity: function MINI_STAKE_AMOUNTS_STORAGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) MINISTAKEAMOUNTSSTORAGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.MINISTAKEAMOUNTSSTORAGE(&_BOLDUpgradeAction.CallOpts)
}

// NUMBIGSTEPLEVEL is a free data retrieval call binding the contract method 0x5d9e2444.
//
// Solidity: function NUM_BIGSTEP_LEVEL() view returns(uint8)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) NUMBIGSTEPLEVEL(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "NUM_BIGSTEP_LEVEL")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// NUMBIGSTEPLEVEL is a free data retrieval call binding the contract method 0x5d9e2444.
//
// Solidity: function NUM_BIGSTEP_LEVEL() view returns(uint8)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) NUMBIGSTEPLEVEL() (uint8, error) {
	return _BOLDUpgradeAction.Contract.NUMBIGSTEPLEVEL(&_BOLDUpgradeAction.CallOpts)
}

// NUMBIGSTEPLEVEL is a free data retrieval call binding the contract method 0x5d9e2444.
//
// Solidity: function NUM_BIGSTEP_LEVEL() view returns(uint8)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) NUMBIGSTEPLEVEL() (uint8, error) {
	return _BOLDUpgradeAction.Contract.NUMBIGSTEPLEVEL(&_BOLDUpgradeAction.CallOpts)
}

// OLDROLLUP is a free data retrieval call binding the contract method 0x8765240f.
//
// Solidity: function OLD_ROLLUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) OLDROLLUP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "OLD_ROLLUP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OLDROLLUP is a free data retrieval call binding the contract method 0x8765240f.
//
// Solidity: function OLD_ROLLUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) OLDROLLUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OLDROLLUP(&_BOLDUpgradeAction.CallOpts)
}

// OLDROLLUP is a free data retrieval call binding the contract method 0x8765240f.
//
// Solidity: function OLD_ROLLUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) OLDROLLUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OLDROLLUP(&_BOLDUpgradeAction.CallOpts)
}

// OSP is a free data retrieval call binding the contract method 0x9f9854e5.
//
// Solidity: function OSP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) OSP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "OSP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OSP is a free data retrieval call binding the contract method 0x9f9854e5.
//
// Solidity: function OSP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) OSP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OSP(&_BOLDUpgradeAction.CallOpts)
}

// OSP is a free data retrieval call binding the contract method 0x9f9854e5.
//
// Solidity: function OSP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) OSP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OSP(&_BOLDUpgradeAction.CallOpts)
}

// OUTBOX is a free data retrieval call binding the contract method 0x1b142ea7.
//
// Solidity: function OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) OUTBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "OUTBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OUTBOX is a free data retrieval call binding the contract method 0x1b142ea7.
//
// Solidity: function OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) OUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// OUTBOX is a free data retrieval call binding the contract method 0x1b142ea7.
//
// Solidity: function OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) OUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// PREIMAGELOOKUP is a free data retrieval call binding the contract method 0xcc8089bb.
//
// Solidity: function PREIMAGE_LOOKUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PREIMAGELOOKUP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PREIMAGE_LOOKUP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PREIMAGELOOKUP is a free data retrieval call binding the contract method 0xcc8089bb.
//
// Solidity: function PREIMAGE_LOOKUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PREIMAGELOOKUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PREIMAGELOOKUP(&_BOLDUpgradeAction.CallOpts)
}

// PREIMAGELOOKUP is a free data retrieval call binding the contract method 0xcc8089bb.
//
// Solidity: function PREIMAGE_LOOKUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PREIMAGELOOKUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PREIMAGELOOKUP(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINBRIDGE is a free data retrieval call binding the contract method 0x0a54257d.
//
// Solidity: function PROXY_ADMIN_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINBRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINBRIDGE is a free data retrieval call binding the contract method 0x0a54257d.
//
// Solidity: function PROXY_ADMIN_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINBRIDGE is a free data retrieval call binding the contract method 0x0a54257d.
//
// Solidity: function PROXY_ADMIN_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINOUTBOX is a free data retrieval call binding the contract method 0x0787484b.
//
// Solidity: function PROXY_ADMIN_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINOUTBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_OUTBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINOUTBOX is a free data retrieval call binding the contract method 0x0787484b.
//
// Solidity: function PROXY_ADMIN_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINOUTBOX is a free data retrieval call binding the contract method 0x0787484b.
//
// Solidity: function PROXY_ADMIN_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINREI is a free data retrieval call binding the contract method 0x3c2b7840.
//
// Solidity: function PROXY_ADMIN_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINREI(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_REI")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINREI is a free data retrieval call binding the contract method 0x3c2b7840.
//
// Solidity: function PROXY_ADMIN_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINREI(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINREI is a free data retrieval call binding the contract method 0x3c2b7840.
//
// Solidity: function PROXY_ADMIN_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINREI(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINSEQUENCERINBOX is a free data retrieval call binding the contract method 0x2cfb7ca3.
//
// Solidity: function PROXY_ADMIN_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINSEQUENCERINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_SEQUENCER_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINSEQUENCERINBOX is a free data retrieval call binding the contract method 0x2cfb7ca3.
//
// Solidity: function PROXY_ADMIN_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINSEQUENCERINBOX is a free data retrieval call binding the contract method 0x2cfb7ca3.
//
// Solidity: function PROXY_ADMIN_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// REI is a free data retrieval call binding the contract method 0xbe41b367.
//
// Solidity: function REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) REI(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "REI")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// REI is a free data retrieval call binding the contract method 0xbe41b367.
//
// Solidity: function REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) REI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.REI(&_BOLDUpgradeAction.CallOpts)
}

// REI is a free data retrieval call binding the contract method 0xbe41b367.
//
// Solidity: function REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) REI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.REI(&_BOLDUpgradeAction.CallOpts)
}

// ROLLUPREADER is a free data retrieval call binding the contract method 0x4e0e75fb.
//
// Solidity: function ROLLUP_READER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) ROLLUPREADER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "ROLLUP_READER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ROLLUPREADER is a free data retrieval call binding the contract method 0x4e0e75fb.
//
// Solidity: function ROLLUP_READER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) ROLLUPREADER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ROLLUPREADER(&_BOLDUpgradeAction.CallOpts)
}

// ROLLUPREADER is a free data retrieval call binding the contract method 0x4e0e75fb.
//
// Solidity: function ROLLUP_READER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) ROLLUPREADER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ROLLUPREADER(&_BOLDUpgradeAction.CallOpts)
}

// SEQINBOX is a free data retrieval call binding the contract method 0xd384cb95.
//
// Solidity: function SEQ_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) SEQINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "SEQ_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SEQINBOX is a free data retrieval call binding the contract method 0xd384cb95.
//
// Solidity: function SEQ_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) SEQINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.SEQINBOX(&_BOLDUpgradeAction.CallOpts)
}

// SEQINBOX is a free data retrieval call binding the contract method 0xd384cb95.
//
// Solidity: function SEQ_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) SEQINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.SEQINBOX(&_BOLDUpgradeAction.CallOpts)
}

// SMALLSTEPLEAFSIZE is a free data retrieval call binding the contract method 0xfa287420.
//
// Solidity: function SMALLSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) SMALLSTEPLEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "SMALLSTEP_LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SMALLSTEPLEAFSIZE is a free data retrieval call binding the contract method 0xfa287420.
//
// Solidity: function SMALLSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) SMALLSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.SMALLSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// SMALLSTEPLEAFSIZE is a free data retrieval call binding the contract method 0xfa287420.
//
// Solidity: function SMALLSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) SMALLSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.SMALLSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// STAKEAMOUNT is a free data retrieval call binding the contract method 0xfaf5625f.
//
// Solidity: function STAKE_AMOUNT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) STAKEAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "STAKE_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STAKEAMOUNT is a free data retrieval call binding the contract method 0xfaf5625f.
//
// Solidity: function STAKE_AMOUNT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) STAKEAMOUNT() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.STAKEAMOUNT(&_BOLDUpgradeAction.CallOpts)
}

// STAKEAMOUNT is a free data retrieval call binding the contract method 0xfaf5625f.
//
// Solidity: function STAKE_AMOUNT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) STAKEAMOUNT() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.STAKEAMOUNT(&_BOLDUpgradeAction.CallOpts)
}

// STAKETOKEN is a free data retrieval call binding the contract method 0x1c39b672.
//
// Solidity: function STAKE_TOKEN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) STAKETOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "STAKE_TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// STAKETOKEN is a free data retrieval call binding the contract method 0x1c39b672.
//
// Solidity: function STAKE_TOKEN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) STAKETOKEN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.STAKETOKEN(&_BOLDUpgradeAction.CallOpts)
}

// STAKETOKEN is a free data retrieval call binding the contract method 0x1c39b672.
//
// Solidity: function STAKE_TOKEN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) STAKETOKEN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.STAKETOKEN(&_BOLDUpgradeAction.CallOpts)
}

// Perform is a paid mutator transaction binding the contract method 0xebe03a93.
//
// Solidity: function perform(address[] validators) returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactor) Perform(opts *bind.TransactOpts, validators []common.Address) (*types.Transaction, error) {
	return _BOLDUpgradeAction.contract.Transact(opts, "perform", validators)
}

// Perform is a paid mutator transaction binding the contract method 0xebe03a93.
//
// Solidity: function perform(address[] validators) returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) Perform(validators []common.Address) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.Perform(&_BOLDUpgradeAction.TransactOpts, validators)
}

// Perform is a paid mutator transaction binding the contract method 0xebe03a93.
//
// Solidity: function perform(address[] validators) returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactorSession) Perform(validators []common.Address) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.Perform(&_BOLDUpgradeAction.TransactOpts, validators)
}

// BOLDUpgradeActionRollupMigratedIterator is returned from FilterRollupMigrated and is used to iterate over the raw logs and unpacked data for RollupMigrated events raised by the BOLDUpgradeAction contract.
type BOLDUpgradeActionRollupMigratedIterator struct {
	Event *BOLDUpgradeActionRollupMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BOLDUpgradeActionRollupMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BOLDUpgradeActionRollupMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BOLDUpgradeActionRollupMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BOLDUpgradeActionRollupMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BOLDUpgradeActionRollupMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BOLDUpgradeActionRollupMigrated represents a RollupMigrated event raised by the BOLDUpgradeAction contract.
type BOLDUpgradeActionRollupMigrated struct {
	Rollup           common.Address
	ChallengeManager common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterRollupMigrated is a free log retrieval operation binding the contract event 0x7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314.
//
// Solidity: event RollupMigrated(address rollup, address challengeManager)
func (_BOLDUpgradeAction *BOLDUpgradeActionFilterer) FilterRollupMigrated(opts *bind.FilterOpts) (*BOLDUpgradeActionRollupMigratedIterator, error) {

	logs, sub, err := _BOLDUpgradeAction.contract.FilterLogs(opts, "RollupMigrated")
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionRollupMigratedIterator{contract: _BOLDUpgradeAction.contract, event: "RollupMigrated", logs: logs, sub: sub}, nil
}

// WatchRollupMigrated is a free log subscription operation binding the contract event 0x7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314.
//
// Solidity: event RollupMigrated(address rollup, address challengeManager)
func (_BOLDUpgradeAction *BOLDUpgradeActionFilterer) WatchRollupMigrated(opts *bind.WatchOpts, sink chan<- *BOLDUpgradeActionRollupMigrated) (event.Subscription, error) {

	logs, sub, err := _BOLDUpgradeAction.contract.WatchLogs(opts, "RollupMigrated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BOLDUpgradeActionRollupMigrated)
				if err := _BOLDUpgradeAction.contract.UnpackLog(event, "RollupMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupMigrated is a log parse operation binding the contract event 0x7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314.
//
// Solidity: event RollupMigrated(address rollup, address challengeManager)
func (_BOLDUpgradeAction *BOLDUpgradeActionFilterer) ParseRollupMigrated(log types.Log) (*BOLDUpgradeActionRollupMigrated, error) {
	event := new(BOLDUpgradeActionRollupMigrated)
	if err := _BOLDUpgradeAction.contract.UnpackLog(event, "RollupMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorMetaData contains all meta data concerning the BridgeCreator contract.
var BridgeCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDataSize\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeTemplate\",\"outputs\":[{\"internalType\":\"contractBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation\",\"type\":\"tuple\"}],\"name\":\"createBridge\",\"outputs\":[{\"internalType\":\"contractBridge\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractSequencerInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractRollupEventInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contractOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inboxTemplate\",\"outputs\":[{\"internalType\":\"contractInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outboxTemplate\",\"outputs\":[{\"internalType\":\"contractOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInboxTemplate\",\"outputs\":[{\"internalType\":\"contractRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInboxTemplate\",\"outputs\":[{\"internalType\":\"contractSequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerInboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rollupEventInboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outboxTemplate\",\"type\":\"address\"}],\"name\":\"updateTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// BridgeCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeCreatorMetaData.ABI instead.
var BridgeCreatorABI = BridgeCreatorMetaData.ABI

// BridgeCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeCreatorMetaData.Bin instead.
var BridgeCreatorBin = BridgeCreatorMetaData.Bin

// DeployBridgeCreator deploys a new Ethereum contract, binding an instance of BridgeCreator to it.
func DeployBridgeCreator(auth *bind.TransactOpts, backend bind.ContractBackend, maxDataSize *big.Int) (common.Address, *types.Transaction, *BridgeCreator, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeCreatorBin), backend, maxDataSize)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// BridgeCreator is an auto generated Go binding around an Ethereum contract.
type BridgeCreator struct {
	BridgeCreatorCaller     // Read-only binding to the contract
	BridgeCreatorTransactor // Write-only binding to the contract
	BridgeCreatorFilterer   // Log filterer for contract events
}

// BridgeCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeCreatorSession struct {
	Contract     *BridgeCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCreatorCallerSession struct {
	Contract *BridgeCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// BridgeCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeCreatorTransactorSession struct {
	Contract     *BridgeCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BridgeCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeCreatorRaw struct {
	Contract *BridgeCreator // Generic contract binding to access the raw methods on
}

// BridgeCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCreatorCallerRaw struct {
	Contract *BridgeCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactorRaw struct {
	Contract *BridgeCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeCreator creates a new instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreator(address common.Address, backend bind.ContractBackend) (*BridgeCreator, error) {
	contract, err := bindBridgeCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// NewBridgeCreatorCaller creates a new read-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorCaller(address common.Address, caller bind.ContractCaller) (*BridgeCreatorCaller, error) {
	contract, err := bindBridgeCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorCaller{contract: contract}, nil
}

// NewBridgeCreatorTransactor creates a new write-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeCreatorTransactor, error) {
	contract, err := bindBridgeCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTransactor{contract: contract}, nil
}

// NewBridgeCreatorFilterer creates a new log filterer instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeCreatorFilterer, error) {
	contract, err := bindBridgeCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorFilterer{contract: contract}, nil
}

// bindBridgeCreator binds a generic wrapper to an already deployed contract.
func bindBridgeCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.BridgeCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transact(opts, method, params...)
}

// BridgeTemplate is a free data retrieval call binding the contract method 0x95fd089f.
//
// Solidity: function bridgeTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) BridgeTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "bridgeTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeTemplate is a free data retrieval call binding the contract method 0x95fd089f.
//
// Solidity: function bridgeTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) BridgeTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.BridgeTemplate(&_BridgeCreator.CallOpts)
}

// BridgeTemplate is a free data retrieval call binding the contract method 0x95fd089f.
//
// Solidity: function bridgeTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) BridgeTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.BridgeTemplate(&_BridgeCreator.CallOpts)
}

// InboxTemplate is a free data retrieval call binding the contract method 0x7ba0e857.
//
// Solidity: function inboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) InboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "inboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// InboxTemplate is a free data retrieval call binding the contract method 0x7ba0e857.
//
// Solidity: function inboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) InboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.InboxTemplate(&_BridgeCreator.CallOpts)
}

// InboxTemplate is a free data retrieval call binding the contract method 0x7ba0e857.
//
// Solidity: function inboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) InboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.InboxTemplate(&_BridgeCreator.CallOpts)
}

// OutboxTemplate is a free data retrieval call binding the contract method 0xfc6a2ed0.
//
// Solidity: function outboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) OutboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "outboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OutboxTemplate is a free data retrieval call binding the contract method 0xfc6a2ed0.
//
// Solidity: function outboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) OutboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.OutboxTemplate(&_BridgeCreator.CallOpts)
}

// OutboxTemplate is a free data retrieval call binding the contract method 0xfc6a2ed0.
//
// Solidity: function outboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) OutboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.OutboxTemplate(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// RollupEventInboxTemplate is a free data retrieval call binding the contract method 0xae583c03.
//
// Solidity: function rollupEventInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) RollupEventInboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "rollupEventInboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInboxTemplate is a free data retrieval call binding the contract method 0xae583c03.
//
// Solidity: function rollupEventInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) RollupEventInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.RollupEventInboxTemplate(&_BridgeCreator.CallOpts)
}

// RollupEventInboxTemplate is a free data retrieval call binding the contract method 0xae583c03.
//
// Solidity: function rollupEventInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) RollupEventInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.RollupEventInboxTemplate(&_BridgeCreator.CallOpts)
}

// SequencerInboxTemplate is a free data retrieval call binding the contract method 0xe6027a87.
//
// Solidity: function sequencerInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) SequencerInboxTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "sequencerInboxTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInboxTemplate is a free data retrieval call binding the contract method 0xe6027a87.
//
// Solidity: function sequencerInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) SequencerInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.SequencerInboxTemplate(&_BridgeCreator.CallOpts)
}

// SequencerInboxTemplate is a free data retrieval call binding the contract method 0xe6027a87.
//
// Solidity: function sequencerInboxTemplate() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) SequencerInboxTemplate() (common.Address, error) {
	return _BridgeCreator.Contract.SequencerInboxTemplate(&_BridgeCreator.CallOpts)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x6c6e47c0.
//
// Solidity: function createBridge(address adminProxy, address rollup, (uint256,uint256,uint256,uint256) maxTimeVariation) returns(address, address, address, address, address)
func (_BridgeCreator *BridgeCreatorTransactor) CreateBridge(opts *bind.TransactOpts, adminProxy common.Address, rollup common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "createBridge", adminProxy, rollup, maxTimeVariation)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x6c6e47c0.
//
// Solidity: function createBridge(address adminProxy, address rollup, (uint256,uint256,uint256,uint256) maxTimeVariation) returns(address, address, address, address, address)
func (_BridgeCreator *BridgeCreatorSession) CreateBridge(adminProxy common.Address, rollup common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, maxTimeVariation)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x6c6e47c0.
//
// Solidity: function createBridge(address adminProxy, address rollup, (uint256,uint256,uint256,uint256) maxTimeVariation) returns(address, address, address, address, address)
func (_BridgeCreator *BridgeCreatorTransactorSession) CreateBridge(adminProxy common.Address, rollup common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, maxTimeVariation)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0x2147e58e.
//
// Solidity: function updateTemplates(address _bridgeTemplate, address _sequencerInboxTemplate, address _inboxTemplate, address _rollupEventInboxTemplate, address _outboxTemplate) returns()
func (_BridgeCreator *BridgeCreatorTransactor) UpdateTemplates(opts *bind.TransactOpts, _bridgeTemplate common.Address, _sequencerInboxTemplate common.Address, _inboxTemplate common.Address, _rollupEventInboxTemplate common.Address, _outboxTemplate common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "updateTemplates", _bridgeTemplate, _sequencerInboxTemplate, _inboxTemplate, _rollupEventInboxTemplate, _outboxTemplate)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0x2147e58e.
//
// Solidity: function updateTemplates(address _bridgeTemplate, address _sequencerInboxTemplate, address _inboxTemplate, address _rollupEventInboxTemplate, address _outboxTemplate) returns()
func (_BridgeCreator *BridgeCreatorSession) UpdateTemplates(_bridgeTemplate common.Address, _sequencerInboxTemplate common.Address, _inboxTemplate common.Address, _rollupEventInboxTemplate common.Address, _outboxTemplate common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _bridgeTemplate, _sequencerInboxTemplate, _inboxTemplate, _rollupEventInboxTemplate, _outboxTemplate)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0x2147e58e.
//
// Solidity: function updateTemplates(address _bridgeTemplate, address _sequencerInboxTemplate, address _inboxTemplate, address _rollupEventInboxTemplate, address _outboxTemplate) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) UpdateTemplates(_bridgeTemplate common.Address, _sequencerInboxTemplate common.Address, _inboxTemplate common.Address, _rollupEventInboxTemplate common.Address, _outboxTemplate common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _bridgeTemplate, _sequencerInboxTemplate, _inboxTemplate, _rollupEventInboxTemplate, _outboxTemplate)
}

// BridgeCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferredIterator struct {
	Event *BridgeCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorOwnershipTransferredIterator{contract: _BridgeCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorOwnershipTransferred)
				if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeCreatorOwnershipTransferred, error) {
	event := new(BridgeCreatorOwnershipTransferred)
	if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdatedIterator struct {
	Event *BridgeCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*BridgeCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTemplatesUpdatedIterator{contract: _BridgeCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *BridgeCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorTemplatesUpdated)
				if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*BridgeCreatorTemplatesUpdated, error) {
	event := new(BridgeCreatorTemplatesUpdated)
	if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ConstantArrayStorageMetaData contains all meta data concerning the ConstantArrayStorage contract.
var ConstantArrayStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"__array\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"array\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506040516102a03803806102a083398101604081905261002f916100bf565b8051610042906000906020840190610049565b505061017c565b828054828255906000526020600020908101928215610084579160200282015b82811115610084578251825591602001919060010190610069565b50610090929150610094565b5090565b5b808211156100905760008155600101610095565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156100d257600080fd5b82516001600160401b03808211156100e957600080fd5b818501915085601f8301126100fd57600080fd5b81518181111561010f5761010f6100a9565b8060051b604051601f19603f83011681018181108582111715610134576101346100a9565b60405291825284820192508381018501918883111561015257600080fd5b938501935b8285101561017057845184529385019392850192610157565b98975050505050505050565b6101158061018b6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063b0ec2ae114602d575b600080fd5b60336047565b604051603e9190609d565b60405180910390f35b60606000805480602002602001604051908101604052809291908181526020018280548015609357602002820191906000526020600020905b8154815260200190600101908083116080575b5050505050905090565b6020808252825182820181905260009190848201906040850190845b8181101560d35783518352928401929184019160010160b9565b5090969550505050505056fea26469706673582212206714ce4f3e585f9d18cae85a02cd7d72257af7f285c78131c02638e4985f787e64736f6c63430008110033",
}

// ConstantArrayStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ConstantArrayStorageMetaData.ABI instead.
var ConstantArrayStorageABI = ConstantArrayStorageMetaData.ABI

// ConstantArrayStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ConstantArrayStorageMetaData.Bin instead.
var ConstantArrayStorageBin = ConstantArrayStorageMetaData.Bin

// DeployConstantArrayStorage deploys a new Ethereum contract, binding an instance of ConstantArrayStorage to it.
func DeployConstantArrayStorage(auth *bind.TransactOpts, backend bind.ContractBackend, __array []*big.Int) (common.Address, *types.Transaction, *ConstantArrayStorage, error) {
	parsed, err := ConstantArrayStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ConstantArrayStorageBin), backend, __array)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ConstantArrayStorage{ConstantArrayStorageCaller: ConstantArrayStorageCaller{contract: contract}, ConstantArrayStorageTransactor: ConstantArrayStorageTransactor{contract: contract}, ConstantArrayStorageFilterer: ConstantArrayStorageFilterer{contract: contract}}, nil
}

// ConstantArrayStorage is an auto generated Go binding around an Ethereum contract.
type ConstantArrayStorage struct {
	ConstantArrayStorageCaller     // Read-only binding to the contract
	ConstantArrayStorageTransactor // Write-only binding to the contract
	ConstantArrayStorageFilterer   // Log filterer for contract events
}

// ConstantArrayStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConstantArrayStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantArrayStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConstantArrayStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantArrayStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConstantArrayStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantArrayStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConstantArrayStorageSession struct {
	Contract     *ConstantArrayStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ConstantArrayStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConstantArrayStorageCallerSession struct {
	Contract *ConstantArrayStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ConstantArrayStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConstantArrayStorageTransactorSession struct {
	Contract     *ConstantArrayStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ConstantArrayStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConstantArrayStorageRaw struct {
	Contract *ConstantArrayStorage // Generic contract binding to access the raw methods on
}

// ConstantArrayStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConstantArrayStorageCallerRaw struct {
	Contract *ConstantArrayStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ConstantArrayStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConstantArrayStorageTransactorRaw struct {
	Contract *ConstantArrayStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConstantArrayStorage creates a new instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorage(address common.Address, backend bind.ContractBackend) (*ConstantArrayStorage, error) {
	contract, err := bindConstantArrayStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorage{ConstantArrayStorageCaller: ConstantArrayStorageCaller{contract: contract}, ConstantArrayStorageTransactor: ConstantArrayStorageTransactor{contract: contract}, ConstantArrayStorageFilterer: ConstantArrayStorageFilterer{contract: contract}}, nil
}

// NewConstantArrayStorageCaller creates a new read-only instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorageCaller(address common.Address, caller bind.ContractCaller) (*ConstantArrayStorageCaller, error) {
	contract, err := bindConstantArrayStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorageCaller{contract: contract}, nil
}

// NewConstantArrayStorageTransactor creates a new write-only instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ConstantArrayStorageTransactor, error) {
	contract, err := bindConstantArrayStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorageTransactor{contract: contract}, nil
}

// NewConstantArrayStorageFilterer creates a new log filterer instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ConstantArrayStorageFilterer, error) {
	contract, err := bindConstantArrayStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorageFilterer{contract: contract}, nil
}

// bindConstantArrayStorage binds a generic wrapper to an already deployed contract.
func bindConstantArrayStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ConstantArrayStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConstantArrayStorage *ConstantArrayStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ConstantArrayStorage.Contract.ConstantArrayStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConstantArrayStorage *ConstantArrayStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.ConstantArrayStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConstantArrayStorage *ConstantArrayStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.ConstantArrayStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConstantArrayStorage *ConstantArrayStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ConstantArrayStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConstantArrayStorage *ConstantArrayStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConstantArrayStorage *ConstantArrayStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.contract.Transact(opts, method, params...)
}

// Array is a free data retrieval call binding the contract method 0xb0ec2ae1.
//
// Solidity: function array() view returns(uint256[])
func (_ConstantArrayStorage *ConstantArrayStorageCaller) Array(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _ConstantArrayStorage.contract.Call(opts, &out, "array")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// Array is a free data retrieval call binding the contract method 0xb0ec2ae1.
//
// Solidity: function array() view returns(uint256[])
func (_ConstantArrayStorage *ConstantArrayStorageSession) Array() ([]*big.Int, error) {
	return _ConstantArrayStorage.Contract.Array(&_ConstantArrayStorage.CallOpts)
}

// Array is a free data retrieval call binding the contract method 0xb0ec2ae1.
//
// Solidity: function array() view returns(uint256[])
func (_ConstantArrayStorage *ConstantArrayStorageCallerSession) Array() ([]*big.Int, error) {
	return _ConstantArrayStorage.Contract.Array(&_ConstantArrayStorage.CallOpts)
}

// IOldRollupMetaData contains all meta data concerning the IOldRollup contract.
var IOldRollupMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structIOldRollup.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structOldStaker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IOldRollupABI is the input ABI used to generate the binding from.
// Deprecated: Use IOldRollupMetaData.ABI instead.
var IOldRollupABI = IOldRollupMetaData.ABI

// IOldRollup is an auto generated Go binding around an Ethereum contract.
type IOldRollup struct {
	IOldRollupCaller     // Read-only binding to the contract
	IOldRollupTransactor // Write-only binding to the contract
	IOldRollupFilterer   // Log filterer for contract events
}

// IOldRollupCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOldRollupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOldRollupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOldRollupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOldRollupSession struct {
	Contract     *IOldRollup       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOldRollupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOldRollupCallerSession struct {
	Contract *IOldRollupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// IOldRollupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOldRollupTransactorSession struct {
	Contract     *IOldRollupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IOldRollupRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOldRollupRaw struct {
	Contract *IOldRollup // Generic contract binding to access the raw methods on
}

// IOldRollupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOldRollupCallerRaw struct {
	Contract *IOldRollupCaller // Generic read-only contract binding to access the raw methods on
}

// IOldRollupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOldRollupTransactorRaw struct {
	Contract *IOldRollupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOldRollup creates a new instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollup(address common.Address, backend bind.ContractBackend) (*IOldRollup, error) {
	contract, err := bindIOldRollup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOldRollup{IOldRollupCaller: IOldRollupCaller{contract: contract}, IOldRollupTransactor: IOldRollupTransactor{contract: contract}, IOldRollupFilterer: IOldRollupFilterer{contract: contract}}, nil
}

// NewIOldRollupCaller creates a new read-only instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollupCaller(address common.Address, caller bind.ContractCaller) (*IOldRollupCaller, error) {
	contract, err := bindIOldRollup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupCaller{contract: contract}, nil
}

// NewIOldRollupTransactor creates a new write-only instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollupTransactor(address common.Address, transactor bind.ContractTransactor) (*IOldRollupTransactor, error) {
	contract, err := bindIOldRollup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupTransactor{contract: contract}, nil
}

// NewIOldRollupFilterer creates a new log filterer instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollupFilterer(address common.Address, filterer bind.ContractFilterer) (*IOldRollupFilterer, error) {
	contract, err := bindIOldRollup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOldRollupFilterer{contract: contract}, nil
}

// bindIOldRollup binds a generic wrapper to an already deployed contract.
func bindIOldRollup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IOldRollupMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollup *IOldRollupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollup.Contract.IOldRollupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollup *IOldRollupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollup.Contract.IOldRollupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollup *IOldRollupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollup.Contract.IOldRollupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollup *IOldRollupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollup *IOldRollupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollup *IOldRollupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollup.Contract.contract.Transact(opts, method, params...)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IOldRollup *IOldRollupCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IOldRollup *IOldRollupSession) GetNode(nodeNum uint64) (Node, error) {
	return _IOldRollup.Contract.GetNode(&_IOldRollup.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IOldRollup *IOldRollupCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IOldRollup.Contract.GetNode(&_IOldRollup.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IOldRollup *IOldRollupCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (OldStaker, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(OldStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(OldStaker)).(*OldStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IOldRollup *IOldRollupSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _IOldRollup.Contract.GetStaker(&_IOldRollup.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IOldRollup *IOldRollupCallerSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _IOldRollup.Contract.GetStaker(&_IOldRollup.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IOldRollup *IOldRollupCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IOldRollup *IOldRollupSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IOldRollup.Contract.GetStakerAddress(&_IOldRollup.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IOldRollup *IOldRollupCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IOldRollup.Contract.GetStakerAddress(&_IOldRollup.CallOpts, stakerNum)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_IOldRollup *IOldRollupCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_IOldRollup *IOldRollupSession) IsValidator(validator common.Address) (bool, error) {
	return _IOldRollup.Contract.IsValidator(&_IOldRollup.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_IOldRollup *IOldRollupCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _IOldRollup.Contract.IsValidator(&_IOldRollup.CallOpts, validator)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IOldRollup *IOldRollupCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IOldRollup *IOldRollupSession) LatestConfirmed() (uint64, error) {
	return _IOldRollup.Contract.LatestConfirmed(&_IOldRollup.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IOldRollup *IOldRollupCallerSession) LatestConfirmed() (uint64, error) {
	return _IOldRollup.Contract.LatestConfirmed(&_IOldRollup.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IOldRollup *IOldRollupCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IOldRollup *IOldRollupSession) StakerCount() (uint64, error) {
	return _IOldRollup.Contract.StakerCount(&_IOldRollup.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IOldRollup *IOldRollupCallerSession) StakerCount() (uint64, error) {
	return _IOldRollup.Contract.StakerCount(&_IOldRollup.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_IOldRollup *IOldRollupCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_IOldRollup *IOldRollupSession) ValidatorWalletCreator() (common.Address, error) {
	return _IOldRollup.Contract.ValidatorWalletCreator(&_IOldRollup.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_IOldRollup *IOldRollupCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _IOldRollup.Contract.ValidatorWalletCreator(&_IOldRollup.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IOldRollup *IOldRollupCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IOldRollup *IOldRollupSession) WasmModuleRoot() ([32]byte, error) {
	return _IOldRollup.Contract.WasmModuleRoot(&_IOldRollup.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IOldRollup *IOldRollupCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IOldRollup.Contract.WasmModuleRoot(&_IOldRollup.CallOpts)
}

// IOldRollupNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IOldRollup contract.
type IOldRollupNodeCreatedIterator struct {
	Event *IOldRollupNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOldRollupNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOldRollupNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOldRollupNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOldRollupNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOldRollupNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOldRollupNodeCreated represents a NodeCreated event raised by the IOldRollup contract.
type IOldRollupNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          IOldRollupAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IOldRollup *IOldRollupFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IOldRollupNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IOldRollup.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IOldRollupNodeCreatedIterator{contract: _IOldRollup.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IOldRollup *IOldRollupFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IOldRollupNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IOldRollup.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOldRollupNodeCreated)
				if err := _IOldRollup.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IOldRollup *IOldRollupFilterer) ParseNodeCreated(log types.Log) (*IOldRollupNodeCreated, error) {
	event := new(IOldRollupNodeCreated)
	if err := _IOldRollup.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOldRollupAdminMetaData contains all meta data concerning the IOldRollupAdmin contract.
var IOldRollupAdminMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stacker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IOldRollupAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IOldRollupAdminMetaData.ABI instead.
var IOldRollupAdminABI = IOldRollupAdminMetaData.ABI

// IOldRollupAdmin is an auto generated Go binding around an Ethereum contract.
type IOldRollupAdmin struct {
	IOldRollupAdminCaller     // Read-only binding to the contract
	IOldRollupAdminTransactor // Write-only binding to the contract
	IOldRollupAdminFilterer   // Log filterer for contract events
}

// IOldRollupAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOldRollupAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOldRollupAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOldRollupAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOldRollupAdminSession struct {
	Contract     *IOldRollupAdmin  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOldRollupAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOldRollupAdminCallerSession struct {
	Contract *IOldRollupAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IOldRollupAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOldRollupAdminTransactorSession struct {
	Contract     *IOldRollupAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IOldRollupAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOldRollupAdminRaw struct {
	Contract *IOldRollupAdmin // Generic contract binding to access the raw methods on
}

// IOldRollupAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOldRollupAdminCallerRaw struct {
	Contract *IOldRollupAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IOldRollupAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOldRollupAdminTransactorRaw struct {
	Contract *IOldRollupAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOldRollupAdmin creates a new instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdmin(address common.Address, backend bind.ContractBackend) (*IOldRollupAdmin, error) {
	contract, err := bindIOldRollupAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdmin{IOldRollupAdminCaller: IOldRollupAdminCaller{contract: contract}, IOldRollupAdminTransactor: IOldRollupAdminTransactor{contract: contract}, IOldRollupAdminFilterer: IOldRollupAdminFilterer{contract: contract}}, nil
}

// NewIOldRollupAdminCaller creates a new read-only instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdminCaller(address common.Address, caller bind.ContractCaller) (*IOldRollupAdminCaller, error) {
	contract, err := bindIOldRollupAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdminCaller{contract: contract}, nil
}

// NewIOldRollupAdminTransactor creates a new write-only instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IOldRollupAdminTransactor, error) {
	contract, err := bindIOldRollupAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdminTransactor{contract: contract}, nil
}

// NewIOldRollupAdminFilterer creates a new log filterer instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IOldRollupAdminFilterer, error) {
	contract, err := bindIOldRollupAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdminFilterer{contract: contract}, nil
}

// bindIOldRollupAdmin binds a generic wrapper to an already deployed contract.
func bindIOldRollupAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IOldRollupAdminMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollupAdmin *IOldRollupAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollupAdmin.Contract.IOldRollupAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollupAdmin *IOldRollupAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.IOldRollupAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollupAdmin *IOldRollupAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.IOldRollupAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollupAdmin *IOldRollupAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollupAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollupAdmin *IOldRollupAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollupAdmin *IOldRollupAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.contract.Transact(opts, method, params...)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactor) ForceRefundStaker(opts *bind.TransactOpts, stacker []common.Address) (*types.Transaction, error) {
	return _IOldRollupAdmin.contract.Transact(opts, "forceRefundStaker", stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IOldRollupAdmin *IOldRollupAdminSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.ForceRefundStaker(&_IOldRollupAdmin.TransactOpts, stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactorSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.ForceRefundStaker(&_IOldRollupAdmin.TransactOpts, stacker)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IOldRollupAdmin *IOldRollupAdminSession) Pause() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Pause(&_IOldRollupAdmin.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactorSession) Pause() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Pause(&_IOldRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IOldRollupAdmin *IOldRollupAdminSession) Resume() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Resume(&_IOldRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactorSession) Resume() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Resume(&_IOldRollupAdmin.TransactOpts)
}

// IRollupAdminMetaData contains all meta data concerning the IRollupAdmin contract.
var IRollupAdminMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stacker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"genesisExecutionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInbox\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_challengeManager\",\"type\":\"address\"}],\"name\":\"setChallengeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupAdminMetaData.ABI instead.
var IRollupAdminABI = IRollupAdminMetaData.ABI

// IRollupAdmin is an auto generated Go binding around an Ethereum contract.
type IRollupAdmin struct {
	IRollupAdminCaller     // Read-only binding to the contract
	IRollupAdminTransactor // Write-only binding to the contract
	IRollupAdminFilterer   // Log filterer for contract events
}

// IRollupAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupAdminSession struct {
	Contract     *IRollupAdmin     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupAdminCallerSession struct {
	Contract *IRollupAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IRollupAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupAdminTransactorSession struct {
	Contract     *IRollupAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IRollupAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupAdminRaw struct {
	Contract *IRollupAdmin // Generic contract binding to access the raw methods on
}

// IRollupAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupAdminCallerRaw struct {
	Contract *IRollupAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupAdminTransactorRaw struct {
	Contract *IRollupAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupAdmin creates a new instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdmin(address common.Address, backend bind.ContractBackend) (*IRollupAdmin, error) {
	contract, err := bindIRollupAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupAdmin{IRollupAdminCaller: IRollupAdminCaller{contract: contract}, IRollupAdminTransactor: IRollupAdminTransactor{contract: contract}, IRollupAdminFilterer: IRollupAdminFilterer{contract: contract}}, nil
}

// NewIRollupAdminCaller creates a new read-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminCaller(address common.Address, caller bind.ContractCaller) (*IRollupAdminCaller, error) {
	contract, err := bindIRollupAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminCaller{contract: contract}, nil
}

// NewIRollupAdminTransactor creates a new write-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupAdminTransactor, error) {
	contract, err := bindIRollupAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminTransactor{contract: contract}, nil
}

// NewIRollupAdminFilterer creates a new log filterer instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupAdminFilterer, error) {
	contract, err := bindIRollupAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminFilterer{contract: contract}, nil
}

// bindIRollupAdmin binds a generic wrapper to an already deployed contract.
func bindIRollupAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupAdminMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.IRollupAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transact(opts, method, params...)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmAssertion(&_IRollupAdmin.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmAssertion(&_IRollupAdmin.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceCreateAssertion(opts *bind.TransactOpts, prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceCreateAssertion", prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateAssertion(&_IRollupAdmin.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateAssertion(&_IRollupAdmin.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceRefundStaker(opts *bind.TransactOpts, stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceRefundStaker", stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// Initialize is a paid mutator transaction binding the contract method 0x0094978d.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x0094978d.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x0094978d.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetChallengeManager(opts *bind.TransactOpts, _challengeManager common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setChallengeManager", _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_IRollupAdmin *IRollupAdminSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetChallengeManager(&_IRollupAdmin.TransactOpts, _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetChallengeManager(&_IRollupAdmin.TransactOpts, _challengeManager)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// IRollupAdminOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalledIterator struct {
	Event *IRollupAdminOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*IRollupAdminOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminOwnerFunctionCalledIterator{contract: _IRollupAdmin.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *IRollupAdminOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminOwnerFunctionCalled)
				if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) ParseOwnerFunctionCalled(log types.Log) (*IRollupAdminOwnerFunctionCalled, error) {
	event := new(IRollupAdminOwnerFunctionCalled)
	if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreMetaData contains all meta data concerning the IRollupCore contract.
var IRollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupCoreMetaData.ABI instead.
var IRollupCoreABI = IRollupCoreMetaData.ABI

// IRollupCore is an auto generated Go binding around an Ethereum contract.
type IRollupCore struct {
	IRollupCoreCaller     // Read-only binding to the contract
	IRollupCoreTransactor // Write-only binding to the contract
	IRollupCoreFilterer   // Log filterer for contract events
}

// IRollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupCoreSession struct {
	Contract     *IRollupCore      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupCoreCallerSession struct {
	Contract *IRollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupCoreTransactorSession struct {
	Contract     *IRollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupCoreRaw struct {
	Contract *IRollupCore // Generic contract binding to access the raw methods on
}

// IRollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupCoreCallerRaw struct {
	Contract *IRollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupCoreTransactorRaw struct {
	Contract *IRollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupCore creates a new instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCore(address common.Address, backend bind.ContractBackend) (*IRollupCore, error) {
	contract, err := bindIRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupCore{IRollupCoreCaller: IRollupCoreCaller{contract: contract}, IRollupCoreTransactor: IRollupCoreTransactor{contract: contract}, IRollupCoreFilterer: IRollupCoreFilterer{contract: contract}}, nil
}

// NewIRollupCoreCaller creates a new read-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*IRollupCoreCaller, error) {
	contract, err := bindIRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreCaller{contract: contract}, nil
}

// NewIRollupCoreTransactor creates a new write-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupCoreTransactor, error) {
	contract, err := bindIRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreTransactor{contract: contract}, nil
}

// NewIRollupCoreFilterer creates a new log filterer instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupCoreFilterer, error) {
	contract, err := bindIRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreFilterer{contract: contract}, nil
}

// bindIRollupCore binds a generic wrapper to an already deployed contract.
func bindIRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupCoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.IRollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupCore.Contract.GenesisAssertionHash(&_IRollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupCore.Contract.GenesisAssertionHash(&_IRollupCore.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupCore.Contract.GetAssertion(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupCore.Contract.GetAssertion(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetFirstChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetFirstChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetSecondChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetSecondChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupCore *IRollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupCore *IRollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupCore *IRollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsFirstChild(&_IRollupCore.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsFirstChild(&_IRollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsPending(&_IRollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsPending(&_IRollupCore.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupCore.Contract.LatestStakedAssertion(&_IRollupCore.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupCore.Contract.LatestStakedAssertion(&_IRollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupCore.Contract.ValidateAssertionHash(&_IRollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupCore.Contract.ValidateAssertionHash(&_IRollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupCore.Contract.ValidateConfig(&_IRollupCore.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupCore.Contract.ValidateConfig(&_IRollupCore.CallOpts, assertionHash, configData)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// IRollupCoreAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the IRollupCore contract.
type IRollupCoreAssertionConfirmedIterator struct {
	Event *IRollupCoreAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreAssertionConfirmed represents a AssertionConfirmed event raised by the IRollupCore contract.
type IRollupCoreAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupCoreAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreAssertionConfirmedIterator{contract: _IRollupCore.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupCoreAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreAssertionConfirmed)
				if err := _IRollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) ParseAssertionConfirmed(log types.Log) (*IRollupCoreAssertionConfirmed, error) {
	event := new(IRollupCoreAssertionConfirmed)
	if err := _IRollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the IRollupCore contract.
type IRollupCoreAssertionCreatedIterator struct {
	Event *IRollupCoreAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreAssertionCreated represents a AssertionCreated event raised by the IRollupCore contract.
type IRollupCoreAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*IRollupCoreAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreAssertionCreatedIterator{contract: _IRollupCore.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *IRollupCoreAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreAssertionCreated)
				if err := _IRollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) ParseAssertionCreated(log types.Log) (*IRollupCoreAssertionCreated, error) {
	event := new(IRollupCoreAssertionCreated)
	if err := _IRollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStartedIterator struct {
	Event *IRollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupChallengeStartedIterator{contract: _IRollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupChallengeStarted)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupCoreRollupChallengeStarted, error) {
	event := new(IRollupCoreRollupChallengeStarted)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupCore contract.
type IRollupCoreRollupInitializedIterator struct {
	Event *IRollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupInitialized represents a RollupInitialized event raised by the IRollupCore contract.
type IRollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupInitializedIterator{contract: _IRollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupInitialized)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupInitialized(log types.Log) (*IRollupCoreRollupInitialized, error) {
	event := new(IRollupCoreRollupInitialized)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdatedIterator struct {
	Event *IRollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserStakeUpdatedIterator{contract: _IRollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserStakeUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupCoreUserStakeUpdated, error) {
	event := new(IRollupCoreUserStakeUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserWithdrawableFundsUpdatedIterator{contract: _IRollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserWithdrawableFundsUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(IRollupCoreUserWithdrawableFundsUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupEventInboxMetaData contains all meta data concerning the IRollupEventInbox contract.
var IRollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupEventInboxMetaData.ABI instead.
var IRollupEventInboxABI = IRollupEventInboxMetaData.ABI

// IRollupEventInbox is an auto generated Go binding around an Ethereum contract.
type IRollupEventInbox struct {
	IRollupEventInboxCaller     // Read-only binding to the contract
	IRollupEventInboxTransactor // Write-only binding to the contract
	IRollupEventInboxFilterer   // Log filterer for contract events
}

// IRollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupEventInboxSession struct {
	Contract     *IRollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IRollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupEventInboxCallerSession struct {
	Contract *IRollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IRollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupEventInboxTransactorSession struct {
	Contract     *IRollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IRollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupEventInboxRaw struct {
	Contract *IRollupEventInbox // Generic contract binding to access the raw methods on
}

// IRollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupEventInboxCallerRaw struct {
	Contract *IRollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactorRaw struct {
	Contract *IRollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupEventInbox creates a new instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInbox(address common.Address, backend bind.ContractBackend) (*IRollupEventInbox, error) {
	contract, err := bindIRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInbox{IRollupEventInboxCaller: IRollupEventInboxCaller{contract: contract}, IRollupEventInboxTransactor: IRollupEventInboxTransactor{contract: contract}, IRollupEventInboxFilterer: IRollupEventInboxFilterer{contract: contract}}, nil
}

// NewIRollupEventInboxCaller creates a new read-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*IRollupEventInboxCaller, error) {
	contract, err := bindIRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxCaller{contract: contract}, nil
}

// NewIRollupEventInboxTransactor creates a new write-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupEventInboxTransactor, error) {
	contract, err := bindIRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxTransactor{contract: contract}, nil
}

// NewIRollupEventInboxFilterer creates a new log filterer instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupEventInboxFilterer, error) {
	contract, err := bindIRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxFilterer{contract: contract}, nil
}

// bindIRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindIRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.IRollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.UpdateRollupAddress(&_IRollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.UpdateRollupAddress(&_IRollupEventInbox.TransactOpts)
}

// IRollupUserMetaData contains all meta data concerning the IRollupUser contract.
var IRollupUserMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"winningEdgeId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"prevConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"confirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserMetaData.ABI instead.
var IRollupUserABI = IRollupUserMetaData.ABI

// IRollupUser is an auto generated Go binding around an Ethereum contract.
type IRollupUser struct {
	IRollupUserCaller     // Read-only binding to the contract
	IRollupUserTransactor // Write-only binding to the contract
	IRollupUserFilterer   // Log filterer for contract events
}

// IRollupUserCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserSession struct {
	Contract     *IRollupUser      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserCallerSession struct {
	Contract *IRollupUserCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupUserTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserTransactorSession struct {
	Contract     *IRollupUserTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupUserRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserRaw struct {
	Contract *IRollupUser // Generic contract binding to access the raw methods on
}

// IRollupUserCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserCallerRaw struct {
	Contract *IRollupUserCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserTransactorRaw struct {
	Contract *IRollupUserTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUser creates a new instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUser(address common.Address, backend bind.ContractBackend) (*IRollupUser, error) {
	contract, err := bindIRollupUser(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUser{IRollupUserCaller: IRollupUserCaller{contract: contract}, IRollupUserTransactor: IRollupUserTransactor{contract: contract}, IRollupUserFilterer: IRollupUserFilterer{contract: contract}}, nil
}

// NewIRollupUserCaller creates a new read-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserCaller(address common.Address, caller bind.ContractCaller) (*IRollupUserCaller, error) {
	contract, err := bindIRollupUser(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserCaller{contract: contract}, nil
}

// NewIRollupUserTransactor creates a new write-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserTransactor, error) {
	contract, err := bindIRollupUser(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserTransactor{contract: contract}, nil
}

// NewIRollupUserFilterer creates a new log filterer instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserFilterer, error) {
	contract, err := bindIRollupUser(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserFilterer{contract: contract}, nil
}

// bindIRollupUser binds a generic wrapper to an already deployed contract.
func bindIRollupUser(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupUserMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.IRollupUserCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupUser.Contract.GenesisAssertionHash(&_IRollupUser.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupUser.Contract.GenesisAssertionHash(&_IRollupUser.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupUser.Contract.GetAssertion(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupUser.Contract.GetAssertion(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupUser.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetFirstChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetFirstChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetSecondChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetSecondChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupUser *IRollupUserCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupUser *IRollupUserSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_IRollupUser *IRollupUserCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsFirstChild(&_IRollupUser.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsFirstChild(&_IRollupUser.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsPending(&_IRollupUser.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsPending(&_IRollupUser.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupUser.Contract.LatestStakedAssertion(&_IRollupUser.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupUser.Contract.LatestStakedAssertion(&_IRollupUser.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupUser.Contract.ValidateAssertionHash(&_IRollupUser.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupUser.Contract.ValidateAssertionHash(&_IRollupUser.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupUser.Contract.ValidateConfig(&_IRollupUser.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupUser.Contract.ValidateConfig(&_IRollupUser.CallOpts, assertionHash, configData)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserTransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress, tokenAmount)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserTransactor) ConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "confirmAssertion", assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmAssertion(&_IRollupUser.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserTransactorSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmAssertion(&_IRollupUser.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnNewAssertion(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnNewAssertion", tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnNewAssertion(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnNewAssertion(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserTransactor) ReturnOldDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "returnOldDeposit")
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserTransactorSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactor) StakeOnNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "stakeOnNewAssertion", assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewAssertion(&_IRollupUser.TransactOpts, assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewAssertion(&_IRollupUser.TransactOpts, assertion, expectedAssertionHash)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// IRollupUserAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the IRollupUser contract.
type IRollupUserAssertionConfirmedIterator struct {
	Event *IRollupUserAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAssertionConfirmed represents a AssertionConfirmed event raised by the IRollupUser contract.
type IRollupUserAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupUserAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAssertionConfirmedIterator{contract: _IRollupUser.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAssertionConfirmed)
				if err := _IRollupUser.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) ParseAssertionConfirmed(log types.Log) (*IRollupUserAssertionConfirmed, error) {
	event := new(IRollupUserAssertionConfirmed)
	if err := _IRollupUser.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the IRollupUser contract.
type IRollupUserAssertionCreatedIterator struct {
	Event *IRollupUserAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAssertionCreated represents a AssertionCreated event raised by the IRollupUser contract.
type IRollupUserAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*IRollupUserAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAssertionCreatedIterator{contract: _IRollupUser.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAssertionCreated)
				if err := _IRollupUser.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) ParseAssertionCreated(log types.Log) (*IRollupUserAssertionCreated, error) {
	event := new(IRollupUserAssertionCreated)
	if err := _IRollupUser.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUser contract.
type IRollupUserRollupChallengeStartedIterator struct {
	Event *IRollupUserRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUser contract.
type IRollupUserRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupChallengeStartedIterator{contract: _IRollupUser.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupChallengeStarted)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserRollupChallengeStarted, error) {
	event := new(IRollupUserRollupChallengeStarted)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUser contract.
type IRollupUserRollupInitializedIterator struct {
	Event *IRollupUserRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupInitialized represents a RollupInitialized event raised by the IRollupUser contract.
type IRollupUserRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserRollupInitializedIterator, error) {

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupInitializedIterator{contract: _IRollupUser.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupInitialized)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) ParseRollupInitialized(log types.Log) (*IRollupUserRollupInitialized, error) {
	event := new(IRollupUserRollupInitialized)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUser contract.
type IRollupUserUserStakeUpdatedIterator struct {
	Event *IRollupUserUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUser contract.
type IRollupUserUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserStakeUpdatedIterator{contract: _IRollupUser.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserStakeUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserUserStakeUpdated, error) {
	event := new(IRollupUserUserStakeUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserWithdrawableFundsUpdatedIterator{contract: _IRollupUser.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserWithdrawableFundsUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserUserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserUserWithdrawableFundsUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicMetaData contains all meta data concerning the RollupAdminLogic contract.
var RollupAdminLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeGracePeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"genesisExecutionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInbox\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyTrustFastConfirmer\",\"type\":\"address\"}],\"name\":\"setAnyTrustFastConfirmer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_challengeManager\",\"type\":\"address\"}],\"name\":\"setChallengeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"newInbox\",\"type\":\"address\"}],\"name\":\"setInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeSecondaryTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeSecondaryToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c0604052620000196200003660201b62002d7b1760201c565b15156080523060a0523480156200002f57600080fd5b5062000104565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b179052905160009182918291606491620000769190620000d3565b600060405180830381855afa9150503d8060008114620000b3576040519150601f19603f3d011682016040523d82523d6000602084013e620000b8565b606091505b5091509150818015620000cc575080516020145b9250505090565b6000825160005b81811015620000f65760208186018101518583015201620000da565b506000920191825250919050565b60805160a0516159e96200017e60003960008181610d8501528181610e0f01528181611b7201528181611bf701528181611f2201528181611fa7015281816121060152818161218b015281816122d401528181612789015261280e0152600081816119df01528181611d4b0152613fe801526159e96000f3fe6080604052600436106103dd5760003560e01c806365f7f80d1161020d578063aa38a6e711610128578063e8bd4922116100bb578063f9cee9df1161008a578063fb0e722b1161006f578063fb0e722b14610d1b578063fc8ffa0314610d3b578063ff204f3b14610d5b57600080fd5b8063f9cee9df14610ccb578063facd743b14610ceb57600080fd5b8063e8bd492214610bd7578063ee35f32714610c60578063ef40a67014610c75578063f065de3f14610cab57600080fd5b8063ce66d05c116100f7578063ce66d05c14610b62578063dff6978714610b82578063e531d8c714610b97578063e78cea9214610bb757600080fd5b8063aa38a6e714610ae2578063b7626e7314610b02578063bc45e0ae14610b22578063ce11e6ab14610b4257600080fd5b806389384960116101a05780639a8a05921161016f5780639a8a0592146109aa578063a23c44b1146109c0578063a2b4f1d814610aa2578063a3ffb77214610ac257600080fd5b806389384960146109415780638ee1a12614610961578063948d6588146109775780639846129a1461099757600080fd5b806376e7e23b116101dc57806376e7e23b146108c95780637c75c298146108df5780638456cb59146108ff578063883028841461091457600080fd5b806365f7f80d1461085e5780636db04dc1146108735780636ddd37441461089357806371ef232c146108b357600080fd5b806330836228116102fd57806351ed6a3011610290578063567ca41b1161025f578063567ca41b146107be57806356bbc9e6146107de5780635c975abb146107fe5780636177fd181461081657600080fd5b806351ed6a301461074457806352d1902d1461076457806353b60c4a1461077957806355840a581461079957600080fd5b806345e38b64116102cc57806345e38b64146106db57806347fb24c5146106f15780634f1ef286146107115780634f61f8501461072457600080fd5b8063308362281461064d578063353325e01461066d5780633659cfe6146106825780633be680ea146106a257600080fd5b806312ab3d3b1161037557806320fa7e221161034457806320fa7e221461059d5780632abdd230146105bd5780632e7acfa6146105f65780632f30cabd1461061757600080fd5b806312ab3d3b1461050f57806313af40351461053957806313c56ca7146105595780631b1689e91461058757600080fd5b806306ae5851116103b157806306ae5851146104765780630d40a0fd146104965780630d561b37146104b657806311715585146104d657600080fd5b806294978d146103e2578063023a96fe14610404578063046f7da21461044157806304972af914610456575b600080fd5b3480156103ee57600080fd5b506104026103fd366004614eaa565b610d7b565b005b34801561041057600080fd5b50606954610424906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561044d57600080fd5b50610402611b08565b34801561046257600080fd5b50610402610471366004614f24565b611b2c565b34801561048257600080fd5b50610402610491366004614f51565b611b46565b3480156104a257600080fd5b506104026104b1366004614f7f565b611b68565b3480156104c257600080fd5b506104026104d1366004614f7f565b611cb1565b3480156104e257600080fd5b506104f66104f1366004614f51565b611d05565b60405167ffffffffffffffff9091168152602001610438565b34801561051b57600080fd5b50607a546105299060ff1681565b6040519015158152602001610438565b34801561054557600080fd5b50610402610554366004614f7f565b611d21565b34801561056557600080fd5b50610579610574366004614f51565b611d47565b604051908152602001610438565b34801561059357600080fd5b5061057960795481565b3480156105a957600080fd5b506104026105b8366004614f9c565b611e94565b3480156105c957600080fd5b506105796105d8366004614f7f565b6001600160a01b031660009081526076602052604090206001015490565b34801561060257600080fd5b506066546104f69067ffffffffffffffff1681565b34801561062357600080fd5b50610579610632366004614f7f565b6001600160a01b031660009081526077602052604090205490565b34801561065957600080fd5b50610529610668366004614f51565b611ec7565b34801561067957600080fd5b50610579611ee3565b34801561068e57600080fd5b5061040261069d366004614f7f565b611f18565b3480156106ae57600080fd5b506069546104f69074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b3480156106e757600080fd5b5061057960715481565b3480156106fd57600080fd5b5061040261070c366004614fee565b61205e565b61040261071f366004615097565b6120fc565b34801561073057600080fd5b5061040261073f366004614f7f565b612232565b34801561075057600080fd5b50607054610424906001600160a01b031681565b34801561077057600080fd5b506105796122c7565b34801561078557600080fd5b50610402610794366004614f7f565b61238c565b3480156107a557600080fd5b50607a546104249061010090046001600160a01b031681565b3480156107ca57600080fd5b506104026107d9366004614f7f565b6123c4565b3480156107ea57600080fd5b506104f66107f9366004614f51565b6124be565b34801561080a57600080fd5b5060335460ff16610529565b34801561082257600080fd5b50610529610831366004614f7f565b6001600160a01b031660009081526076602052604090206002015468010000000000000000900460ff1690565b34801561086a57600080fd5b50607354610579565b34801561087f57600080fd5b5061040261088e36600461513f565b6124e6565b34801561089f57600080fd5b506104246108ae366004615196565b61251a565b3480156108bf57600080fd5b5061057960785481565b3480156108d557600080fd5b5061057960675481565b3480156108eb57600080fd5b506104026108fa3660046151fd565b612554565b34801561090b57600080fd5b50610402612646565b34801561092057600080fd5b5061093461092f366004614f51565b61266a565b6040516104389190615273565b34801561094d57600080fd5b5061040261095c366004614f51565b61273b565b34801561096d57600080fd5b5061057960685481565b34801561098357600080fd5b50610402610992366004614f51565b61275d565b6104026109a5366004615097565b61277f565b3480156109b657600080fd5b5061057960655481565b3480156109cc57600080fd5b50610a636109db366004614f7f565b604080516080810182526000808252602082018190529181018290526060810191909152506001600160a01b03166000908152607660209081526040918290208251608081018452815481526001820154928101929092526002015467ffffffffffffffff8116928201929092526801000000000000000090910460ff161515606082015290565b6040516104389190815181526020808301519082015260408083015167ffffffffffffffff169082015260609182015115159181019190915260800190565b348015610aae57600080fd5b50610402610abd3660046152d4565b6128b5565b348015610ace57600080fd5b50610402610add3660046152f1565b6128e0565b348015610aee57600080fd5b50606d54610424906001600160a01b031681565b348015610b0e57600080fd5b50610402610b1d366004614f7f565b612a34565b348015610b2e57600080fd5b50606e54610424906001600160a01b031681565b348015610b4e57600080fd5b50606c54610424906001600160a01b031681565b348015610b6e57600080fd5b50610402610b7d366004615196565b612a6c565b348015610b8e57600080fd5b506075546104f6565b348015610ba357600080fd5b50610529610bb2366004614f51565b612b00565b348015610bc357600080fd5b50606b54610424906001600160a01b031681565b348015610be357600080fd5b50610c2e610bf2366004614f7f565b60766020526000908152604090208054600182015460029092015490919067ffffffffffffffff81169068010000000000000000900460ff1684565b6040516104389493929190938452602084019290925267ffffffffffffffff1660408301521515606082015260800190565b348015610c6c57600080fd5b50610424612b30565b348015610c8157600080fd5b50610579610c90366004614f7f565b6001600160a01b031660009081526076602052604090205490565b348015610cb757600080fd5b50606f54610424906001600160a01b031681565b348015610cd757600080fd5b50610402610ce636600461535d565b612bbc565b348015610cf757600080fd5b50610529610d06366004614f7f565b60726020526000908152604090205460ff1681565b348015610d2757600080fd5b50606a54610424906001600160a01b031681565b348015610d4757600080fd5b50610402610d56366004614f7f565b612c29565b348015610d6757600080fd5b50610402610d76366004614f7f565b612cc9565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e0d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e3f612e41565b6001600160a01b031614610eaa5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610e04565b600054610100900460ff1615808015610eca5750600054600160ff909116105b80610ee45750303b158015610ee4575060005460ff166001145b610f565760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610e04565b6000805460ff191660011790558015610f79576000805461ff0019166101001790555b43607955610f8a6020830183614f7f565b606b80546001600160a01b0319166001600160a01b0392909216919091179055610fb76020830183614f7f565b6001600160a01b03166347fb24c5610fd56060850160408601614f7f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561103557600080fd5b505af1158015611049573d6000803e3d6000fd5b5061105b925050506020830183614f7f565b6001600160a01b0316634f61f8506110796040850160208601614f7f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156110d257600080fd5b505af11580156110e6573d6000803e3d6000fd5b506110fb925050506060830160408401614f7f565b606a80546001600160a01b0319166001600160a01b039290921691909117905561112b6080830160608401614f7f565b606c80546001600160a01b0319166001600160a01b03929092169190911790556111586020830183614f7f565b6001600160a01b031663cee3d7286111766080850160608601614f7f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b1580156111d657600080fd5b505af11580156111ea573d6000803e3d6000fd5b506111ff9250505060a0830160808401614f7f565b606d80546001600160a01b0319166001600160a01b03928316179055606b541663ae60bd1361123460a0850160808601614f7f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b4919061539a565b6113dd576112c56020830183614f7f565b6001600160a01b03166347fb24c56112e360a0850160808601614f7f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561134357600080fd5b505af1158015611357573d6000803e3d6000fd5b5061136c9250505060a0830160808401614f7f565b6001600160a01b031663cf8d56d660c085013561138c60e08701876153b7565b6040518463ffffffff1660e01b81526004016113aa9392919061541c565b600060405180830381600087803b1580156113c457600080fd5b505af11580156113d8573d6000803e3d6000fd5b505050505b6113ed6040830160208401614f7f565b6001600160a01b0316637fa3a40e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e9190615452565b600003611508576114656040830160208401614f7f565b6040517fe0bc972900000000000000000000000000000000000000000000000000000000815260006004820181905260c0602483015260c4820181905260016044830181905260648301829052608483019190915260a48201526001600160a01b03919091169063e0bc97299060e401600060405180830381600087803b1580156114ef57600080fd5b505af1158015611503573d6000803e3d6000fd5b505050505b61151a61012083016101008401614f7f565b606e80546001600160a01b0319166001600160a01b039290921691909117905561154a60c0830160a08401614f7f565b606980546001600160a01b0319166001600160a01b03929092169190911790556115776020840184615196565b6066805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560c083013560655560408301356067556060830135606855604b6071556115c861032084016103008501615196565b606960146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506115f8612e74565b6001600160a01b031661161160c0850160a08601614f7f565b6001600160a01b0316036116675760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f455343524f575f41444d494e0000000000000000000000006044820152606401610e04565b61167760a0840160808501614f7f565b6001600160a01b031661169060c0850160a08601614f7f565b6001600160a01b0316036116e65760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f455343524f575f4f574e45520000000000000000000000006044820152606401610e04565b6116f660c0840160a08501614f7f565b606f80546001600160a01b0319166001600160a01b03929092169190911790556117266040840160208501614f7f565b607080546001600160a01b0319166001600160a01b03929092169190911790556117586102e084016102c08501614f7f565b607a80546001600160a01b0392909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117905560006117b36117ae368690038601610200870161553c565b612e9c565b9050600080806117c4818581612ede565b90506000606b60009054906101000a90046001600160a01b03166001600160a01b03166284120c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190615452565b9050876102a00135810361185a57611857600182615590565b90505b60685460675460695460665460408051602080820196909652808201949094526bffffffffffffffffffffffff19606093841b16838501527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116607486015286831b16607c85015280516064818603018152608485018083528151918701919091206101448601835260009182905260a4860182905260c4860182905260e486018290526101048601829052610124909501819052815192830182528083529482018590524367ffffffffffffffff1690820152600191810182905260a0810192909252608082015290506119558184612f1c565b61195d614dde565b611970368b90038b016102008c0161553c565b60408083019190915260685460675460695460665493518a9489947fcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697946119d59489948e948d9493926001600160a01b03169167ffffffffffffffff90911690615623565b60405180910390a37f000000000000000000000000000000000000000000000000000000000000000015611a765760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a669190615452565b6000858152607b60205260409020555b6040805160608c0135815260c08c013560208201527ffc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464910160405180910390a1505050505050508015611b03576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b611b10613053565b60405160049060008051602061596d83398151915290600090a2565b611b4281611b39846130a5565b60010154613106565b5050565b6067819055604051600c9060008051602061596d83398151915290600090a250565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611bf55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610e04565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c27612e41565b6001600160a01b031614611c925760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610e04565b60408051600080825260208201909252611cae9183919061320b565b50565b607a80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03841602179055604051601f9060008051602061596d83398151915290600090a250565b6000611d10826130a5565b5467ffffffffffffffff1692915050565b611d2a816133ab565b60405160079060008051602061596d83398151915290600090a250565b60007f000000000000000000000000000000000000000000000000000000000000000015611dd1576000828152607b602052604090205480611dcb5760405162461bcd60e51b815260206004820152600c60248201527f4e4f5f415353455254494f4e00000000000000000000000000000000000000006044820152606401610e04565b92915050565b6000611ddc836130a5565b6040805160c081018252825467ffffffffffffffff808216835268010000000000000000820481166020840152600160801b8204169282019290925260ff600160c01b8304811615156060830152929350611e7792909184916080840191600160c81b9004166002811115611e5357611e5361523f565b6002811115611e6457611e6461523f565b81526020016001820154815250506133ff565b54600160801b900467ffffffffffffffff1692915050565b919050565b611e9c613464565b611ea78284836134b8565b5060405160179060008051602061596d83398151915290600090a2505050565b6000611ed2826130a5565b54600160c01b900460ff1692915050565b6000611eed614e4d565b6040805180820190915281815260016020820152600080611f0f81848161408b565b94505050505090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611fa55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610e04565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611fd7612e41565b6001600160a01b0316146120425760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610e04565b60408051600080825260208201909252611cae918391906140a8565b606b546040517f47fb24c50000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528315156024830152909116906347fb24c590604401600060405180830381600087803b1580156120c657600080fd5b505af11580156120da573d6000803e3d6000fd5b50506040516002925060008051602061596d8339815191529150600090a25050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036121895760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610e04565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166121bb612e41565b6001600160a01b0316146122265760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610e04565b611b42828260016140a8565b606b546040517f4f61f8500000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015290911690634f61f85090602401600060405180830381600087803b15801561229257600080fd5b505af11580156122a6573d6000803e3d6000fd5b5050604051601b925060008051602061596d8339815191529150600090a250565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146123675760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610e04565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b606a80546001600160a01b0319166001600160a01b038316179055604051601c9060008051602061596d83398151915290600090a250565b606c546001600160a01b03908116908216036124225760405162461bcd60e51b815260206004820152600a60248201527f4355525f4f5554424f58000000000000000000000000000000000000000000006044820152606401610e04565b606b546040517fcee3d7280000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600060248301529091169063cee3d72890604401600060405180830381600087803b15801561248957600080fd5b505af115801561249d573d6000803e3d6000fd5b50506040516001925060008051602061596d8339815191529150600090a250565b60006124c9826130a5565b5468010000000000000000900467ffffffffffffffff1692915050565b6124ee613464565b6124fa84848484614248565b60405160189060008051602061596d83398151915290600090a250505050565b600060758267ffffffffffffffff168154811061253957612539615702565b6000918252602090912001546001600160a01b031692915050565b61255c613464565b806125a95760405162461bcd60e51b815260206004820152600b60248201527f454d5054595f41525241590000000000000000000000000000000000000000006044820152606401610e04565b60005b81811015612627576125e38383838181106125c9576125c9615702565b90506020020160208101906125de9190614f7f565b61445f565b6126148383838181106125f8576125f8615702565b905060200201602081019061260d9190614f7f565b6000614568565b508061261f81615718565b9150506125ac565b5060405160169060008051602061596d83398151915290600090a25050565b61264e61463a565b60405160039060008051602061596d83398151915290600090a2565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526126a5826130a5565b6040805160c081018252825467ffffffffffffffff808216835268010000000000000000820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b9091041660028111156127155761271561523f565b60028111156127265761272661523f565b81526020016001820154815250509050919050565b6068819055604051601a9060008051602061596d83398151915290600090a250565b607181905560405160089060008051602061596d83398151915290600090a250565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361280c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610e04565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661283e612e41565b6001600160a01b0316146128a95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610e04565b611b428282600161320b565b607a805460ff1916821515179055604051601e9060008051602061596d83398151915290600090a250565b8261292d5760405162461bcd60e51b815260206004820152600b60248201527f454d5054595f41525241590000000000000000000000000000000000000000006044820152606401610e04565b82811461297c5760405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f4c454e47544800000000000000000000000000000000000000006044820152606401610e04565b60005b83811015612a135782828281811061299957612999615702565b90506020020160208101906129ae91906152d4565b607260008787858181106129c4576129c4615702565b90506020020160208101906129d99190614f7f565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580612a0b81615718565b91505061297f565b5060405160069060008051602061596d83398151915290600090a250505050565b606980546001600160a01b0319166001600160a01b03831617905560405160209060008051602061596d83398151915290600090a250565b60008167ffffffffffffffff1611612ac65760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f434f4e4649524d5f504552494f44000000000000000000006044820152606401610e04565b6066805467ffffffffffffffff191667ffffffffffffffff831617905560405160099060008051602061596d83398151915290600090a250565b60006001612b0d836130a5565b54600160c81b900460ff166002811115612b2957612b2961523f565b1492915050565b606b54604080517fee35f32700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ee35f3279160048083019260209291908290030181865afa158015612b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb79190615750565b905090565b612bd582612bcf3686900386018661553c565b8361408b565b8414612c235760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f415353455254494f4e5f48415348000000000000000000006044820152606401610e04565b50505050565b612c31612e74565b6001600160a01b0316816001600160a01b031603612c915760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f455343524f570000000000000000000000000000000000006044820152606401610e04565b606f80546001600160a01b0319166001600160a01b03831617905560405160199060008051602061596d83398151915290600090a250565b606c80546001600160a01b0319166001600160a01b03838116918217909255606b546040517fcee3d7280000000000000000000000000000000000000000000000000000000081526004810192909252600160248301529091169063cee3d72890604401600060405180830381600087803b158015612d4757600080fd5b505af1158015612d5b573d6000803e3d6000fd5b50506040516000925060008051602061596d83398151915291508290a250565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f051038f200000000000000000000000000000000000000000000000000000000179052905160009182918291606491612de79190615791565b600060405180830381855afa9150503d8060008114612e22576040519150601f19603f3d011682016040523d82523d6000602084013e612e27565b606091505b5091509150818015612e3a575080516020145b9250505090565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612e65565b60008160200151612eb08360000151614677565b604051602001612ec19291906157ad565b604051602081830303815290604052805190602001209050919050565b6040805160208101859052908101839052606081018290526000906080016040516020818303038152906040528051906020012090505b9392505050565b612f24614707565b6002608083018190525060008181526074602090815260409182902084518154928601519386015160608701511515600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff928316600160801b02167fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff96831668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909616929093169190911793909317939093169290921717808255608084015184929182907fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff16600160c81b83600281111561303b5761303b61523f565b021790555060a0919091015160019091015560735550565b61305b613464565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000816130f45760405162461bcd60e51b815260206004820152601b60248201527f415353455254494f4e5f49445f43414e4e4f545f42455f5a45524f00000000006044820152606401610e04565b50600090815260746020526040902090565b6131bd823560208401356131206060860160408701614f7f565b6131306080870160608801615196565b61314060a0880160808901615196565b60408051602080820197909752808201959095526bffffffffffffffffffffffff19606094851b16938501939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b81166074860152911b16607c8301528051606481840301815260849092019052805191012090565b8114611b425760405162461bcd60e51b815260206004820152601460248201527f434f4e4649475f484153485f4d49534d415443480000000000000000000000006044820152606401610e04565b7f49bd798cd84788856140a4cd5030756b4d08a9e4d55db725ec195f232d262a895460ff161561323e57611b038361478c565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613298575060408051601f3d908101601f1916820190925261329591810190615452565b60015b61330a5760405162461bcd60e51b815260206004820152603860248201527f45524331393637557067726164653a206e6577207365636f6e6461727920696d60448201527f706c656d656e746174696f6e206973206e6f74205555505300000000000000006064820152608401610e04565b7f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d811461339f5760405162461bcd60e51b815260206004820152603360248201527f45524331393637557067726164653a20756e737570706f72746564207365636f60448201527f6e646172792070726f786961626c6555554944000000000000000000000000006064820152608401610e04565b50611b0383838361484d565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6133d4612e74565b604080516001600160a01b03928316815291841660208301520160405180910390a1611cae81614872565b6000816080015160028111156134175761341761523f565b03611cae5760405162461bcd60e51b815260206004820152601360248201527f415353455254494f4e5f4e4f545f4558495354000000000000000000000000006044820152606401610e04565b60335460ff166134b65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610e04565b565b60006134ca60408501611b39856130a5565b60016134de610220860161020087016157c9565b60028111156134ef576134ef61523f565b148061351d5750600261350a610220860161020087016157c9565b600281111561351b5761351b61523f565b145b6135695760405162461bcd60e51b815260206004820152601060248201527f4241445f41465445525f535441545553000000000000000000000000000000006044820152606401610e04565b8261358b853561358136889003880160e0890161553c565b602088013561408b565b146135d85760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f4245464f52455f53544154450000000000000000000000006044820152606401610e04565b60016135ec610180860161016087016157c9565b60028111156135fd576135fd61523f565b1461364a5760405162461bcd60e51b815260206004820152600f60248201527f4241445f505245565f53544154555300000000000000000000000000000000006044820152606401610e04565b6000613655846130a5565b905060008080613676613671368a90038a016101808b016157e4565b614915565b9050600061368f613671368b90038b0160e08c016157e4565b90508067ffffffffffffffff168267ffffffffffffffff1610156136f55760405162461bcd60e51b815260206004820152600f60248201527f494e424f585f4241434b574152445300000000000000000000000000000000006044820152606401610e04565b61370560e08a0160c08b01615196565b67ffffffffffffffff168267ffffffffffffffff1611156137685760405162461bcd60e51b815260206004820152600d60248201527f494e424f585f544f4f5f464152000000000000000000000000000000000000006044820152606401610e04565b67ffffffffffffffff811661378360e08b0160c08c01615196565b67ffffffffffffffff16116137da5760405162461bcd60e51b815260206004820152601460248201527f4e4558545f494e424f585f4241434b57415244530000000000000000000000006044820152606401610e04565b60026137ee6102208b016102008c016157c9565b60028111156137ff576137ff61523f565b036138a857600061382161381c368c90038c016101808d016157e4565b61492a565b67ffffffffffffffff1611156138a35761384160e08a0160c08b01615196565b67ffffffffffffffff168267ffffffffffffffff16036138a35760405162461bcd60e51b815260206004820152601060248201527f504f534954494f4e5f544f4f5f464152000000000000000000000000000000006044820152606401610e04565b6139f9565b60016138bc6102208b016102008c016157c9565b60028111156138cd576138cd61523f565b036139b1576138e260e08a0160c08b01615196565b67ffffffffffffffff168267ffffffffffffffff16146139445760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f46494e49534845445f494e424f58000000000000000000006044820152606401610e04565b61395a61381c368b90038b016101808c016157e4565b67ffffffffffffffff16156138a35760405162461bcd60e51b815260206004820152601c60248201527f4e4f4e5f5a45524f5f46494e49534845445f504f535f494e5f4d5347000000006044820152606401610e04565b60405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f5354415455530000000000000000000000000000000000006044820152606401610e04565b606b54604080517e84120c00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916284120c9160048083019260209291908290030181865afa158015613a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a7e9190615452565b9050808367ffffffffffffffff161115613ada5760405162461bcd60e51b815260206004820152600e60248201527f494e424f585f504153545f454e440000000000000000000000000000000000006044820152606401610e04565b80613aeb60e08c0160c08d01615196565b67ffffffffffffffff161115613b435760405162461bcd60e51b815260206004820152601360248201527f494e424f585f4e4f545f504f50554c41544544000000000000000000000000006044820152606401610e04565b808367ffffffffffffffff1603613b6657613b5f816001615590565b9450613b6a565b8094505b8267ffffffffffffffff16600003613bc45760405162461bcd60e51b815260206004820152601160248201527f454d5054595f494e424f585f434f554e540000000000000000000000000000006044820152606401610e04565b606b546001600160a01b03166316bf5579613be0600186615800565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015613c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c619190615452565b93505050506000613c87878961018001803603810190613c81919061553c565b8461408b565b905085811480613c95575085155b613ce15760405162461bcd60e51b815260206004820152601960248201527f554e45585045435445445f415353455254494f4e5f48415348000000000000006044820152606401610e04565b6000613cec826130a5565b54600160c81b900460ff166002811115613d0857613d0861523f565b14613d555760405162461bcd60e51b815260206004820152600e60248201527f415353455254494f4e5f5345454e0000000000000000000000000000000000006044820152606401610e04565b835460685460675460695460665460408051602080820196909652808201949094526bffffffffffffffffffffffff19606093841b16838501527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116607486015289831b16607c85015280516064818603018152608485018083528151918701919091206101448601835260009182905260a4860182905260c4860182905260e4860182905261010486018290526101249095018190528151928301825280835294820185905267ffffffffffffffff43811691830191909152909416159084015260a08301526001608083015250613e5385614939565b60008281526074602090815260409182902083518154928501519385015160608601511515600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff928316600160801b02167fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff96831668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909616929093169190911793909317939093169290921717808255608083015183929182907fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff16600160c81b836002811115613f6057613f6061523f565b021790555060a0820151816001015590505087827fcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb36978b8688606854606754606960009054906101000a90046001600160a01b0316606660009054906101000a900467ffffffffffffffff16604051613fde979695949392919061588c565b60405180910390a37f00000000000000000000000000000000000000000000000000000000000000001561407f5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561404b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406f9190615452565b6000838152607b60205260409020555b50979650505050505050565b60006140a08461409a85612e9c565b84612ede565b949350505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156140db57611b03836149c7565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015614135575060408051601f3d908101601f1916820190925261413291810190615452565b60015b6141a75760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610e04565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461423c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610e04565b50611b03838383614a6b565b6000614253856130a5565b905060018154600160c81b900460ff1660028111156142745761427461523f565b146142c15760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f50454e44494e470000000000000000000000000000000000000000006044820152606401610e04565b6142d484613c813686900386018661553c565b85146143225760405162461bcd60e51b815260206004820152600c60248201527f434f4e4649524d5f4441544100000000000000000000000000000000000000006044820152606401610e04565b600061433b614336368690038601866157e4565b614a74565b90506000614356614351368790038701876157e4565b614a7f565b606c546040517fa04cee6000000000000000000000000000000000000000000000000000000000815260048101839052602481018590529192506001600160a01b03169063a04cee6090604401600060405180830381600087803b1580156143bd57600080fd5b505af11580156143d1573d6000803e3d6000fd5b50505060738890555082547fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff167902000000000000000000000000000000000000000000000000001783556040805183815260208101839052815189927ffc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c928290030190a250505050505050565b6001600160a01b03811660009081526076602052604090206002015468010000000000000000900460ff166144d65760405162461bcd60e51b815260206004820152600a60248201527f4e4f545f5354414b4544000000000000000000000000000000000000000000006044820152606401610e04565b6001600160a01b03811660009081526076602052604081206001015460735490919082149080614505846130a5565b5467ffffffffffffffff16119050818061451c5750805b612c235760405162461bcd60e51b815260206004820152600c60248201527f5354414b455f41435449564500000000000000000000000000000000000000006044820152606401610e04565b6001600160a01b03821660009081526076602052604081208054808411156145d25760405162461bcd60e51b815260206004820152601060248201527f544f4f5f4c4954544c455f5354414b45000000000000000000000000000000006044820152606401610e04565b60006145de8583615926565b85845590506145ed8682614a8b565b60408051838152602081018790526001600160a01b038816917febd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6910160405180910390a295945050505050565b614642614b30565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586130883390565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b166075820152600090607d01612ec1565b600054610100900460ff166147845760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610e04565b6134b6614b83565b6001600160a01b0381163b6148095760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e74726163740000000000000000006064820152608401610e04565b807f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d5b80546001600160a01b0319166001600160a01b039290921691909117905550565b61485683614c0c565b6000825111806148635750805b15611b0357612c238383614c4c565b6001600160a01b0381166148ee5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610e04565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361482c565b6020810151600090815b602002015192915050565b6020810151600090600161491f565b805467ffffffffffffffff1660000361496957805467ffffffffffffffff19164367ffffffffffffffff16179055565b805468010000000000000000900467ffffffffffffffff16600003611cae5780547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000004367ffffffffffffffff1602179055565b6001600160a01b0381163b614a445760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610e04565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61482c565b61485683614c71565b80516000908161491f565b8051600090600161491f565b6001600160a01b03821660009081526077602052604081205490614aaf8383615590565b6001600160a01b0385166000908152607760205260408120829055607880549293508592909190614ae1908490615590565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a250505050565b60335460ff16156134b65760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610e04565b600054610100900460ff16614c005760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610e04565b6033805460ff19169055565b614c158161478c565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b6060612f15838360405180606001604052806027815260200161598d60279139614cb1565b614c7a816149c7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0384163b614d305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610e04565b600080856001600160a01b031685604051614d4b9190615791565b600060405180830381855af49150503d8060008114614d86576040519150601f19603f3d011682016040523d82523d6000602084013e614d8b565b606091505b5091509150614d9b828286614da5565b9695505050505050565b60608315614db4575081612f15565b825115614dc45782518084602001fd5b8160405162461bcd60e51b8152600401610e049190615939565b6040518060600160405280614e2e604080516060808201835260008083526020808401829052845160a0810186528281529081018290528085018290529182018190526080820152909182015290565b8152602001614e3b614e6d565b8152602001614e48614e6d565b905290565b6040518060400160405280614e60614e8c565b8152602001614e48614e8c565b6040518060400160405280614e80614e4d565b81526020016000905290565b60405180604001604052806002906020820280368337509192915050565b600080828403610140811215614ebf57600080fd5b833567ffffffffffffffff811115614ed657600080fd5b84016103208187031215614ee957600080fd5b9250610120601f1982011215614efe57600080fd5b506020830190509250929050565b600060a08284031215614f1e57600080fd5b50919050565b60008060c08385031215614f3757600080fd5b82359150614f488460208501614f0c565b90509250929050565b600060208284031215614f6357600080fd5b5035919050565b6001600160a01b0381168114611cae57600080fd5b600060208284031215614f9157600080fd5b8135612f1581614f6a565b6000806000838503610260811215614fb357600080fd5b84359350610220601f1982011215614fca57600080fd5b5060208401915061024084013590509250925092565b8015158114611cae57600080fd5b6000806040838503121561500157600080fd5b823561500c81614f6a565b9150602083013561501c81614fe0565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561506057615060615027565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561508f5761508f615027565b604052919050565b600080604083850312156150aa57600080fd5b82356150b581614f6a565b915060208381013567ffffffffffffffff808211156150d357600080fd5b818601915086601f8301126150e757600080fd5b8135818111156150f9576150f9615027565b61510b84601f19601f84011601615066565b9150808252878482850101111561512157600080fd5b80848401858401376000848284010152508093505050509250929050565b600080600080610100858703121561515657600080fd5b843593506020850135925061516e8660408701614f0c565b9396929550929360e00135925050565b803567ffffffffffffffff81168114611e8f57600080fd5b6000602082840312156151a857600080fd5b612f158261517e565b60008083601f8401126151c357600080fd5b50813567ffffffffffffffff8111156151db57600080fd5b6020830191508360208260051b85010111156151f657600080fd5b9250929050565b6000806020838503121561521057600080fd5b823567ffffffffffffffff81111561522757600080fd5b615233858286016151b1565b90969095509350505050565b634e487b7160e01b600052602160045260246000fd5b60038110611cae57634e487b7160e01b600052602160045260246000fd5b600060c08201905067ffffffffffffffff8084511683528060208501511660208401528060408501511660408401525060608301511515606083015260808301516152bd81615255565b8060808401525060a083015160a083015292915050565b6000602082840312156152e657600080fd5b8135612f1581614fe0565b6000806000806040858703121561530757600080fd5b843567ffffffffffffffff8082111561531f57600080fd5b61532b888389016151b1565b9096509450602087013591508082111561534457600080fd5b50615351878288016151b1565b95989497509550505050565b600080600080610100858703121561537457600080fd5b843593506153858660208701614f0c565b939693955050505060c08201359160e0013590565b6000602082840312156153ac57600080fd5b8151612f1581614fe0565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126153ec57600080fd5b83018035915067ffffffffffffffff82111561540757600080fd5b6020019150368190038213156151f657600080fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60006020828403121561546457600080fd5b5051919050565b60006080828403121561547d57600080fd5b61548561503d565b905082601f83011261549657600080fd5b61549e61503d565b8060408401858111156154b057600080fd5b845b818110156154ca5780358452602093840193016154b2565b5081845285605f8601126154dd57600080fd5b6154e561503d565b925082915060808501868111156154fb57600080fd5b8082101561551f5761550c8261517e565b84526020840193506020820191506154fb565b505060208301525092915050565b803560038110611e8f57600080fd5b600060a0828403121561554e57600080fd5b61555661503d565b615560848461546b565b815261556e6080840161552d565b60208201529392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611dcb57611dcb61557a565b6155ac81615255565b9052565b805180518360005b60028110156155d75782518252602092830192909101906001016155b8565b505050602090810151906040840160005b600281101561560f57835167ffffffffffffffff16825292820192908201906001016155e8565b50508201519050611b0360808401826155a3565b60006102e082019050885180518352602081015160208401526040810151905080516040840152602081015160608401526001600160a01b036040820151166080840152606081015167ffffffffffffffff80821660a08601528060808401511660c0860152505050602089015161569e60e08401826155b0565b5060408901516156b26101808401826155b0565b50876102208301528661024083015285610260830152846102808301526156e56102a08301856001600160a01b03169052565b67ffffffffffffffff83166102c083015298975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036157495761574961557a565b5060010190565b60006020828403121561576257600080fd5b8151612f1581614f6a565b60005b83811015615788578181015183820152602001615770565b50506000910152565b600082516157a381846020870161576d565b9190910192915050565b6157b683615255565b60f89290921b8252600182015260210190565b6000602082840312156157db57600080fd5b612f158261552d565b6000608082840312156157f657600080fd5b612f15838361546b565b67ffffffffffffffff8281168282160390808211156158215761582161557a565b5092915050565b6040818337604082016040820160005b60028110156158695767ffffffffffffffff6158538361517e565b1683526020928301929190910190600101615838565b5050506158786080820161552d565b61588181615255565b806080840152505050565b60006102e0820190508835825260208901356020830152604089013560408301526060890135606083015260808901356158c581614f6a565b6001600160a01b031660808301526158df60a08a0161517e565b67ffffffffffffffff80821660a0850152806158fd60c08d0161517e565b1660c0850152505061591560e0830160e08b01615828565b6101806156b2818401828c01615828565b81810381811115611dcb57611dcb61557a565b602081526000825180602084015261595881604085016020870161576d565b601f01601f1916919091016040019291505056feea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200f71c76839b8cf5fcd43db33cee2b25be5db147c2941bd2f2d4651e6d05daa6864736f6c63430008110033",
}

// RollupAdminLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupAdminLogicMetaData.ABI instead.
var RollupAdminLogicABI = RollupAdminLogicMetaData.ABI

// RollupAdminLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupAdminLogicMetaData.Bin instead.
var RollupAdminLogicBin = RollupAdminLogicMetaData.Bin

// DeployRollupAdminLogic deploys a new Ethereum contract, binding an instance of RollupAdminLogic to it.
func DeployRollupAdminLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupAdminLogic, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupAdminLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// RollupAdminLogic is an auto generated Go binding around an Ethereum contract.
type RollupAdminLogic struct {
	RollupAdminLogicCaller     // Read-only binding to the contract
	RollupAdminLogicTransactor // Write-only binding to the contract
	RollupAdminLogicFilterer   // Log filterer for contract events
}

// RollupAdminLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupAdminLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupAdminLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupAdminLogicSession struct {
	Contract     *RollupAdminLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupAdminLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupAdminLogicCallerSession struct {
	Contract *RollupAdminLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupAdminLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupAdminLogicTransactorSession struct {
	Contract     *RollupAdminLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupAdminLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupAdminLogicRaw struct {
	Contract *RollupAdminLogic // Generic contract binding to access the raw methods on
}

// RollupAdminLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupAdminLogicCallerRaw struct {
	Contract *RollupAdminLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupAdminLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactorRaw struct {
	Contract *RollupAdminLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupAdminLogic creates a new instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogic(address common.Address, backend bind.ContractBackend) (*RollupAdminLogic, error) {
	contract, err := bindRollupAdminLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// NewRollupAdminLogicCaller creates a new read-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupAdminLogicCaller, error) {
	contract, err := bindRollupAdminLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicCaller{contract: contract}, nil
}

// NewRollupAdminLogicTransactor creates a new write-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupAdminLogicTransactor, error) {
	contract, err := bindRollupAdminLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicTransactor{contract: contract}, nil
}

// NewRollupAdminLogicFilterer creates a new log filterer instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupAdminLogicFilterer, error) {
	contract, err := bindRollupAdminLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicFilterer{contract: contract}, nil
}

// bindRollupAdminLogic binds a generic wrapper to an already deployed contract.
func bindRollupAdminLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.RollupAdminLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupAdminLogic.Contract.AnyTrustFastConfirmer(&_RollupAdminLogic.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupAdminLogic.Contract.AnyTrustFastConfirmer(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChallengeGracePeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "challengeGracePeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ChallengeGracePeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ChallengeGracePeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupAdminLogic.Contract.GenesisAssertionHash(&_RollupAdminLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupAdminLogic.Contract.GenesisAssertionHash(&_RollupAdminLogic.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupAdminLogic.Contract.GetAssertion(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupAdminLogic.Contract.GetAssertion(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetFirstChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetFirstChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetSecondChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetSecondChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsFirstChild(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsFirstChild(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsPending(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsPending(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestConfirmed() ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestStakedAssertion(&_RollupAdminLogic.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestStakedAssertion(&_RollupAdminLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupAdminLogic.Contract.ValidateAssertionHash(&_RollupAdminLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupAdminLogic.Contract.ValidateAssertionHash(&_RollupAdminLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupAdminLogic.Contract.ValidateConfig(&_RollupAdminLogic.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupAdminLogic.Contract.ValidateConfig(&_RollupAdminLogic.CallOpts, assertionHash, configData)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmAssertion(&_RollupAdminLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x6db04dc1.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmAssertion(&_RollupAdminLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceCreateAssertion(opts *bind.TransactOpts, prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceCreateAssertion", prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateAssertion(&_RollupAdminLogic.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x20fa7e22.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateAssertion(&_RollupAdminLogic.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceRefundStaker(opts *bind.TransactOpts, staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceRefundStaker", staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// Initialize is a paid mutator transaction binding the contract method 0x0094978d.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x0094978d.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x0094978d.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetAnyTrustFastConfirmer(opts *bind.TransactOpts, _anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setAnyTrustFastConfirmer", _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetAnyTrustFastConfirmer(&_RollupAdminLogic.TransactOpts, _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetAnyTrustFastConfirmer(&_RollupAdminLogic.TransactOpts, _anyTrustFastConfirmer)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetChallengeManager(opts *bind.TransactOpts, _challengeManager common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setChallengeManager", _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetChallengeManager(&_RollupAdminLogic.TransactOpts, _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetChallengeManager(&_RollupAdminLogic.TransactOpts, _challengeManager)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetInbox(opts *bind.TransactOpts, newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setInbox", newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryTo", newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryToAndCall", newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// RollupAdminLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChangedIterator struct {
	Event *RollupAdminLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAdminChanged represents a AdminChanged event raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupAdminLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAdminChangedIterator{contract: _RollupAdminLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAdminChanged)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAdminChanged(log types.Log) (*RollupAdminLogicAdminChanged, error) {
	event := new(RollupAdminLogicAdminChanged)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionConfirmedIterator struct {
	Event *RollupAdminLogicAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionConfirmed represents a AssertionConfirmed event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupAdminLogicAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionConfirmedIterator{contract: _RollupAdminLogic.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionConfirmed)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionConfirmed(log types.Log) (*RollupAdminLogicAssertionConfirmed, error) {
	event := new(RollupAdminLogicAssertionConfirmed)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionCreatedIterator struct {
	Event *RollupAdminLogicAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionCreated represents a AssertionCreated event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupAdminLogicAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionCreatedIterator{contract: _RollupAdminLogic.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionCreated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionCreated(log types.Log) (*RollupAdminLogicAssertionCreated, error) {
	event := new(RollupAdminLogicAssertionCreated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgradedIterator struct {
	Event *RollupAdminLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupAdminLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicBeaconUpgradedIterator{contract: _RollupAdminLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicBeaconUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupAdminLogicBeaconUpgraded, error) {
	event := new(RollupAdminLogicBeaconUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicInitializedIterator struct {
	Event *RollupAdminLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicInitialized represents a Initialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupAdminLogicInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicInitializedIterator{contract: _RollupAdminLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseInitialized(log types.Log) (*RollupAdminLogicInitialized, error) {
	event := new(RollupAdminLogicInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalledIterator struct {
	Event *RollupAdminLogicOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*RollupAdminLogicOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicOwnerFunctionCalledIterator{contract: _RollupAdminLogic.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicOwnerFunctionCalled)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseOwnerFunctionCalled(log types.Log) (*RollupAdminLogicOwnerFunctionCalled, error) {
	event := new(RollupAdminLogicOwnerFunctionCalled)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupAdminLogic contract.
type RollupAdminLogicPausedIterator struct {
	Event *RollupAdminLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicPaused represents a Paused event raised by the RollupAdminLogic contract.
type RollupAdminLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupAdminLogicPausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicPausedIterator{contract: _RollupAdminLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicPaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParsePaused(log types.Log) (*RollupAdminLogicPaused, error) {
	event := new(RollupAdminLogicPaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStartedIterator struct {
	Event *RollupAdminLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupAdminLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupChallengeStartedIterator{contract: _RollupAdminLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupChallengeStarted)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupAdminLogicRollupChallengeStarted, error) {
	event := new(RollupAdminLogicRollupChallengeStarted)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitializedIterator struct {
	Event *RollupAdminLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupInitialized represents a RollupInitialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupAdminLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupInitializedIterator{contract: _RollupAdminLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupAdminLogicRollupInitialized, error) {
	event := new(RollupAdminLogicRollupInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpausedIterator struct {
	Event *RollupAdminLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUnpaused represents a Unpaused event raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupAdminLogicUnpausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUnpausedIterator{contract: _RollupAdminLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUnpaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUnpaused(log types.Log) (*RollupAdminLogicUnpaused, error) {
	event := new(RollupAdminLogicUnpaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedIterator struct {
	Event *RollupAdminLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgraded represents a Upgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedIterator{contract: _RollupAdminLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgraded(log types.Log) (*RollupAdminLogicUpgraded, error) {
	event := new(RollupAdminLogicUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondaryIterator struct {
	Event *RollupAdminLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedSecondaryIterator{contract: _RollupAdminLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgradedSecondary)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupAdminLogicUpgradedSecondary, error) {
	event := new(RollupAdminLogicUpgradedSecondary)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdatedIterator struct {
	Event *RollupAdminLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserStakeUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserStakeUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupAdminLogicUserStakeUpdated, error) {
	event := new(RollupAdminLogicUserStakeUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupAdminLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupAdminLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreMetaData contains all meta data concerning the RollupCore contract.
var RollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeGracePeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// RollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCoreMetaData.ABI instead.
var RollupCoreABI = RollupCoreMetaData.ABI

// RollupCore is an auto generated Go binding around an Ethereum contract.
type RollupCore struct {
	RollupCoreCaller     // Read-only binding to the contract
	RollupCoreTransactor // Write-only binding to the contract
	RollupCoreFilterer   // Log filterer for contract events
}

// RollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCoreSession struct {
	Contract     *RollupCore       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCoreCallerSession struct {
	Contract *RollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// RollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCoreTransactorSession struct {
	Contract     *RollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCoreRaw struct {
	Contract *RollupCore // Generic contract binding to access the raw methods on
}

// RollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCoreCallerRaw struct {
	Contract *RollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCoreTransactorRaw struct {
	Contract *RollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCore creates a new instance of RollupCore, bound to a specific deployed contract.
func NewRollupCore(address common.Address, backend bind.ContractBackend) (*RollupCore, error) {
	contract, err := bindRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCore{RollupCoreCaller: RollupCoreCaller{contract: contract}, RollupCoreTransactor: RollupCoreTransactor{contract: contract}, RollupCoreFilterer: RollupCoreFilterer{contract: contract}}, nil
}

// NewRollupCoreCaller creates a new read-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*RollupCoreCaller, error) {
	contract, err := bindRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreCaller{contract: contract}, nil
}

// NewRollupCoreTransactor creates a new write-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCoreTransactor, error) {
	contract, err := bindRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreTransactor{contract: contract}, nil
}

// NewRollupCoreFilterer creates a new log filterer instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCoreFilterer, error) {
	contract, err := bindRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCoreFilterer{contract: contract}, nil
}

// bindRollupCore binds a generic wrapper to an already deployed contract.
func bindRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupCoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.RollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupCore *RollupCoreCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupCore *RollupCoreSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupCore *RollupCoreCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupCore.Contract.AnyTrustFastConfirmer(&_RollupCore.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupCore.Contract.AnyTrustFastConfirmer(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ChallengeGracePeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "challengeGracePeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ChallengeGracePeriodBlocks(&_RollupCore.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ChallengeGracePeriodBlocks(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupCore.Contract.GenesisAssertionHash(&_RollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupCore.Contract.GenesisAssertionHash(&_RollupCore.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupCore.Contract.GetAssertion(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupCore.Contract.GetAssertion(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_RollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetFirstChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetFirstChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetSecondChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetSecondChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupCore *RollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupCore *RollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupCore *RollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsFirstChild(&_RollupCore.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsFirstChild(&_RollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsPending(&_RollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsPending(&_RollupCore.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreSession) LatestConfirmed() ([32]byte, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupCore.Contract.LatestStakedAssertion(&_RollupCore.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupCore.Contract.LatestStakedAssertion(&_RollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupCore.Contract.ValidateAssertionHash(&_RollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupCore.Contract.ValidateAssertionHash(&_RollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupCore.Contract.ValidateConfig(&_RollupCore.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupCore.Contract.ValidateConfig(&_RollupCore.CallOpts, assertionHash, configData)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// RollupCoreAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupCore contract.
type RollupCoreAssertionConfirmedIterator struct {
	Event *RollupCoreAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreAssertionConfirmed represents a AssertionConfirmed event raised by the RollupCore contract.
type RollupCoreAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupCoreAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreAssertionConfirmedIterator{contract: _RollupCore.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupCoreAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreAssertionConfirmed)
				if err := _RollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) ParseAssertionConfirmed(log types.Log) (*RollupCoreAssertionConfirmed, error) {
	event := new(RollupCoreAssertionConfirmed)
	if err := _RollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupCore contract.
type RollupCoreAssertionCreatedIterator struct {
	Event *RollupCoreAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreAssertionCreated represents a AssertionCreated event raised by the RollupCore contract.
type RollupCoreAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupCoreAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreAssertionCreatedIterator{contract: _RollupCore.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupCoreAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreAssertionCreated)
				if err := _RollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) ParseAssertionCreated(log types.Log) (*RollupCoreAssertionCreated, error) {
	event := new(RollupCoreAssertionCreated)
	if err := _RollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupCore contract.
type RollupCoreInitializedIterator struct {
	Event *RollupCoreInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreInitialized represents a Initialized event raised by the RollupCore contract.
type RollupCoreInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupCoreInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreInitializedIterator{contract: _RollupCore.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) ParseInitialized(log types.Log) (*RollupCoreInitialized, error) {
	event := new(RollupCoreInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCorePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupCore contract.
type RollupCorePausedIterator struct {
	Event *RollupCorePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCorePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCorePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCorePaused represents a Paused event raised by the RollupCore contract.
type RollupCorePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupCorePausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupCorePausedIterator{contract: _RollupCore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupCorePaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCorePaused)
				if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) ParsePaused(log types.Log) (*RollupCorePaused, error) {
	event := new(RollupCorePaused)
	if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupCore contract.
type RollupCoreRollupChallengeStartedIterator struct {
	Event *RollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupCore contract.
type RollupCoreRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupChallengeStartedIterator{contract: _RollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupChallengeStarted)
				if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupCoreRollupChallengeStarted, error) {
	event := new(RollupCoreRollupChallengeStarted)
	if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupCore contract.
type RollupCoreRollupInitializedIterator struct {
	Event *RollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupInitialized represents a RollupInitialized event raised by the RollupCore contract.
type RollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupInitializedIterator{contract: _RollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) ParseRollupInitialized(log types.Log) (*RollupCoreRollupInitialized, error) {
	event := new(RollupCoreRollupInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupCore contract.
type RollupCoreUnpausedIterator struct {
	Event *RollupCoreUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUnpaused represents a Unpaused event raised by the RollupCore contract.
type RollupCoreUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupCoreUnpausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupCoreUnpausedIterator{contract: _RollupCore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupCoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUnpaused)
				if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) ParseUnpaused(log types.Log) (*RollupCoreUnpaused, error) {
	event := new(RollupCoreUnpaused)
	if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupCore contract.
type RollupCoreUserStakeUpdatedIterator struct {
	Event *RollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the RollupCore contract.
type RollupCoreUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserStakeUpdatedIterator{contract: _RollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserStakeUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*RollupCoreUserStakeUpdated, error) {
	event := new(RollupCoreUserStakeUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserWithdrawableFundsUpdatedIterator{contract: _RollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserWithdrawableFundsUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(RollupCoreUserWithdrawableFundsUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorMetaData contains all meta data concerning the RollupCreator contract.
var RollupCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rollupAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inboxAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"RollupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeCreator\",\"outputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManagerTemplate\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"genesisExecutionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_batchPoster\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"disableValidatorWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxDataSize\",\"type\":\"uint256\"}],\"name\":\"createRollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupAdminLogic\",\"outputs\":[{\"internalType\":\"contractIRollupAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupUserLogic\",\"outputs\":[{\"internalType\":\"contractIRollupUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"_bridgeCreator\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"_osp\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"_challengeManagerLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupAdmin\",\"name\":\"_rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"_rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorWalletCreator\",\"type\":\"address\"}],\"name\":\"setTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// RollupCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCreatorMetaData.ABI instead.
var RollupCreatorABI = RollupCreatorMetaData.ABI

// RollupCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupCreatorMetaData.Bin instead.
var RollupCreatorBin = RollupCreatorMetaData.Bin

// DeployRollupCreator deploys a new Ethereum contract, binding an instance of RollupCreator to it.
func DeployRollupCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupCreator, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// RollupCreator is an auto generated Go binding around an Ethereum contract.
type RollupCreator struct {
	RollupCreatorCaller     // Read-only binding to the contract
	RollupCreatorTransactor // Write-only binding to the contract
	RollupCreatorFilterer   // Log filterer for contract events
}

// RollupCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCreatorSession struct {
	Contract     *RollupCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCreatorCallerSession struct {
	Contract *RollupCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// RollupCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCreatorTransactorSession struct {
	Contract     *RollupCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// RollupCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCreatorRaw struct {
	Contract *RollupCreator // Generic contract binding to access the raw methods on
}

// RollupCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCreatorCallerRaw struct {
	Contract *RollupCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCreatorTransactorRaw struct {
	Contract *RollupCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCreator creates a new instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreator(address common.Address, backend bind.ContractBackend) (*RollupCreator, error) {
	contract, err := bindRollupCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// NewRollupCreatorCaller creates a new read-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorCaller(address common.Address, caller bind.ContractCaller) (*RollupCreatorCaller, error) {
	contract, err := bindRollupCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorCaller{contract: contract}, nil
}

// NewRollupCreatorTransactor creates a new write-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCreatorTransactor, error) {
	contract, err := bindRollupCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTransactor{contract: contract}, nil
}

// NewRollupCreatorFilterer creates a new log filterer instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCreatorFilterer, error) {
	contract, err := bindRollupCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorFilterer{contract: contract}, nil
}

// bindRollupCreator binds a generic wrapper to an already deployed contract.
func bindRollupCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.RollupCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transact(opts, method, params...)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) BridgeCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "bridgeCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ChallengeManagerTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "challengeManagerTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Osp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "osp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupAdminLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupAdminLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupUserLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupUserLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x5088c071.
//
// Solidity: function createRollup((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, address _batchPoster, address[] _validators, bool disableValidatorWhitelist, uint256 maxDataSize) returns(address)
func (_RollupCreator *RollupCreatorTransactor) CreateRollup(opts *bind.TransactOpts, config Config, _batchPoster common.Address, _validators []common.Address, disableValidatorWhitelist bool, maxDataSize *big.Int) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "createRollup", config, _batchPoster, _validators, disableValidatorWhitelist, maxDataSize)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x5088c071.
//
// Solidity: function createRollup((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, address _batchPoster, address[] _validators, bool disableValidatorWhitelist, uint256 maxDataSize) returns(address)
func (_RollupCreator *RollupCreatorSession) CreateRollup(config Config, _batchPoster common.Address, _validators []common.Address, disableValidatorWhitelist bool, maxDataSize *big.Int) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, config, _batchPoster, _validators, disableValidatorWhitelist, maxDataSize)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x5088c071.
//
// Solidity: function createRollup((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, address _batchPoster, address[] _validators, bool disableValidatorWhitelist, uint256 maxDataSize) returns(address)
func (_RollupCreator *RollupCreatorTransactorSession) CreateRollup(config Config, _batchPoster common.Address, _validators []common.Address, disableValidatorWhitelist bool, maxDataSize *big.Int) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, config, _batchPoster, _validators, disableValidatorWhitelist, maxDataSize)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// SetTemplates is a paid mutator transaction binding the contract method 0x01183c89.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _validatorWalletCreator) returns()
func (_RollupCreator *RollupCreatorTransactor) SetTemplates(opts *bind.TransactOpts, _bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _validatorWalletCreator common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "setTemplates", _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _validatorWalletCreator)
}

// SetTemplates is a paid mutator transaction binding the contract method 0x01183c89.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _validatorWalletCreator) returns()
func (_RollupCreator *RollupCreatorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _validatorWalletCreator common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _validatorWalletCreator)
}

// SetTemplates is a paid mutator transaction binding the contract method 0x01183c89.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _validatorWalletCreator) returns()
func (_RollupCreator *RollupCreatorTransactorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _validatorWalletCreator common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _validatorWalletCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// RollupCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferredIterator struct {
	Event *RollupCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RollupCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorOwnershipTransferredIterator{contract: _RollupCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RollupCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorOwnershipTransferred)
				if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*RollupCreatorOwnershipTransferred, error) {
	event := new(RollupCreatorOwnershipTransferred)
	if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorRollupCreatedIterator is returned from FilterRollupCreated and is used to iterate over the raw logs and unpacked data for RollupCreated events raised by the RollupCreator contract.
type RollupCreatorRollupCreatedIterator struct {
	Event *RollupCreatorRollupCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorRollupCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorRollupCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorRollupCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorRollupCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorRollupCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorRollupCreated represents a RollupCreated event raised by the RollupCreator contract.
type RollupCreatorRollupCreated struct {
	RollupAddress  common.Address
	InboxAddress   common.Address
	AdminProxy     common.Address
	SequencerInbox common.Address
	Bridge         common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRollupCreated is a free log retrieval operation binding the contract event 0x9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc9.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address inboxAddress, address adminProxy, address sequencerInbox, address bridge)
func (_RollupCreator *RollupCreatorFilterer) FilterRollupCreated(opts *bind.FilterOpts, rollupAddress []common.Address) (*RollupCreatorRollupCreatedIterator, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "RollupCreated", rollupAddressRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorRollupCreatedIterator{contract: _RollupCreator.contract, event: "RollupCreated", logs: logs, sub: sub}, nil
}

// WatchRollupCreated is a free log subscription operation binding the contract event 0x9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc9.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address inboxAddress, address adminProxy, address sequencerInbox, address bridge)
func (_RollupCreator *RollupCreatorFilterer) WatchRollupCreated(opts *bind.WatchOpts, sink chan<- *RollupCreatorRollupCreated, rollupAddress []common.Address) (event.Subscription, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "RollupCreated", rollupAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorRollupCreated)
				if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupCreated is a log parse operation binding the contract event 0x9376ee483c428b938c96990123ffefe7d47b059702b14e367c4d7a35582d1fc9.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address inboxAddress, address adminProxy, address sequencerInbox, address bridge)
func (_RollupCreator *RollupCreatorFilterer) ParseRollupCreated(log types.Log) (*RollupCreatorRollupCreated, error) {
	event := new(RollupCreatorRollupCreated)
	if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdatedIterator struct {
	Event *RollupCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*RollupCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTemplatesUpdatedIterator{contract: _RollupCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *RollupCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorTemplatesUpdated)
				if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*RollupCreatorTemplatesUpdated, error) {
	event := new(RollupCreatorTemplatesUpdated)
	if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxMetaData contains all meta data concerning the RollupEventInbox contract.
var RollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b506080516109ae6100366000396000818160e801526102a701526109ae6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063cb23bcb511610050578063cb23bcb514610089578063cf8d56d6146100b8578063e78cea92146100cb57600080fd5b80636ae71f121461006c578063c4d66de814610076575b600080fd5b6100746100de565b005b6100746100843660046107a2565b61029d565b60015461009c906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100746100c63660046107c6565b610491565b60005461009c906001600160a01b031681565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036101815760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61038054336001600160a01b038216146101f7576040517f23295f0e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0382166024820152604401610178565b60008054906101000a90046001600160a01b03166001600160a01b031663cb23bcb56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026c9190610842565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361033b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610178565b6000546001600160a01b03161561037e576040517fef34ca5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166103be576040517f1ad0f74300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155604080517fcb23bcb5000000000000000000000000000000000000000000000000000000008152905163cb23bcb5916004808201926020929091908290030181865afa15801561043d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104619190610842565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b6001546001600160a01b031633146104eb5760405162461bcd60e51b815260206004820152600b60248201527f4f4e4c595f524f4c4c55500000000000000000000000000000000000000000006044820152606401610178565b806105385760405162461bcd60e51b815260206004820152601260248201527f454d5054595f434841494e5f434f4e46494700000000000000000000000000006044820152606401610178565b6001486105436106c4565b156105b857606c6001600160a01b031663f5d6ded76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab919061085f565b6105b59082610878565b90505b600085838387876040516020016105d39594939291906108b8565b60408051808303601f190181529082905260008054825160208401207f8db5993b000000000000000000000000000000000000000000000000000000008552600b6004860152602485018390526044850152919350916001600160a01b0390911690638db5993b906064016020604051808303816000875af115801561065d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610681919061085f565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b836040516106b39190610929565b60405180910390a250505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f051038f200000000000000000000000000000000000000000000000000000000179052905160009182918291606491610730919061095c565b600060405180830381855afa9150503d806000811461076b576040519150601f19603f3d011682016040523d82523d6000602084013e610770565b606091505b5091509150818015610783575080516020145b9250505090565b6001600160a01b038116811461079f57600080fd5b50565b6000602082840312156107b457600080fd5b81356107bf8161078a565b9392505050565b6000806000604084860312156107db57600080fd5b83359250602084013567ffffffffffffffff808211156107fa57600080fd5b818601915086601f83011261080e57600080fd5b81358181111561081d57600080fd5b87602082850101111561082f57600080fd5b6020830194508093505050509250925092565b60006020828403121561085457600080fd5b81516107bf8161078a565b60006020828403121561087157600080fd5b5051919050565b808201808211156108b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b8581527fff000000000000000000000000000000000000000000000000000000000000008560f81b1660208201528360218201528183604183013760009101604101908152949350505050565b60005b83811015610920578181015183820152602001610908565b50506000910152565b6020815260008251806020840152610948816040850160208701610905565b601f01601f19169190910160400192915050565b6000825161096e818460208701610905565b919091019291505056fea26469706673582212206dac08f48f4d7695476a9905fc98e80e1d29104caa21b58fff1336d7b803524c64736f6c63430008110033",
}

// RollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupEventInboxMetaData.ABI instead.
var RollupEventInboxABI = RollupEventInboxMetaData.ABI

// RollupEventInboxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupEventInboxMetaData.Bin instead.
var RollupEventInboxBin = RollupEventInboxMetaData.Bin

// DeployRollupEventInbox deploys a new Ethereum contract, binding an instance of RollupEventInbox to it.
func DeployRollupEventInbox(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupEventInbox, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupEventInboxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// RollupEventInbox is an auto generated Go binding around an Ethereum contract.
type RollupEventInbox struct {
	RollupEventInboxCaller     // Read-only binding to the contract
	RollupEventInboxTransactor // Write-only binding to the contract
	RollupEventInboxFilterer   // Log filterer for contract events
}

// RollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupEventInboxSession struct {
	Contract     *RollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupEventInboxCallerSession struct {
	Contract *RollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupEventInboxTransactorSession struct {
	Contract     *RollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupEventInboxRaw struct {
	Contract *RollupEventInbox // Generic contract binding to access the raw methods on
}

// RollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupEventInboxCallerRaw struct {
	Contract *RollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// RollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactorRaw struct {
	Contract *RollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupEventInbox creates a new instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInbox(address common.Address, backend bind.ContractBackend) (*RollupEventInbox, error) {
	contract, err := bindRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// NewRollupEventInboxCaller creates a new read-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*RollupEventInboxCaller, error) {
	contract, err := bindRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxCaller{contract: contract}, nil
}

// NewRollupEventInboxTransactor creates a new write-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupEventInboxTransactor, error) {
	contract, err := bindRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxTransactor{contract: contract}, nil
}

// NewRollupEventInboxFilterer creates a new log filterer instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupEventInboxFilterer, error) {
	contract, err := bindRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxFilterer{contract: contract}, nil
}

// bindRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.RollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _RollupEventInbox.Contract.UpdateRollupAddress(&_RollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _RollupEventInbox.Contract.UpdateRollupAddress(&_RollupEventInbox.TransactOpts)
}

// RollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredIterator struct {
	Event *RollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDelivered)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*RollupEventInboxInboxMessageDelivered, error) {
	event := new(RollupEventInboxInboxMessageDelivered)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *RollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*RollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupLibMetaData contains all meta data concerning the RollupLib contract.
var RollupLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203054bf68b8ae6b14c8ee8b48d01e08e9eef4abbaadc50ff28f68015db42dffb064736f6c63430008110033",
}

// RollupLibABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupLibMetaData.ABI instead.
var RollupLibABI = RollupLibMetaData.ABI

// RollupLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupLibMetaData.Bin instead.
var RollupLibBin = RollupLibMetaData.Bin

// DeployRollupLib deploys a new Ethereum contract, binding an instance of RollupLib to it.
func DeployRollupLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupLib, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// RollupLib is an auto generated Go binding around an Ethereum contract.
type RollupLib struct {
	RollupLibCaller     // Read-only binding to the contract
	RollupLibTransactor // Write-only binding to the contract
	RollupLibFilterer   // Log filterer for contract events
}

// RollupLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupLibSession struct {
	Contract     *RollupLib        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupLibCallerSession struct {
	Contract *RollupLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// RollupLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupLibTransactorSession struct {
	Contract     *RollupLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// RollupLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupLibRaw struct {
	Contract *RollupLib // Generic contract binding to access the raw methods on
}

// RollupLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupLibCallerRaw struct {
	Contract *RollupLibCaller // Generic read-only contract binding to access the raw methods on
}

// RollupLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupLibTransactorRaw struct {
	Contract *RollupLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupLib creates a new instance of RollupLib, bound to a specific deployed contract.
func NewRollupLib(address common.Address, backend bind.ContractBackend) (*RollupLib, error) {
	contract, err := bindRollupLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// NewRollupLibCaller creates a new read-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibCaller(address common.Address, caller bind.ContractCaller) (*RollupLibCaller, error) {
	contract, err := bindRollupLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibCaller{contract: contract}, nil
}

// NewRollupLibTransactor creates a new write-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupLibTransactor, error) {
	contract, err := bindRollupLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibTransactor{contract: contract}, nil
}

// NewRollupLibFilterer creates a new log filterer instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupLibFilterer, error) {
	contract, err := bindRollupLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupLibFilterer{contract: contract}, nil
}

// bindRollupLib binds a generic wrapper to an already deployed contract.
func bindRollupLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.RollupLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transact(opts, method, params...)
}

// RollupProxyMetaData contains all meta data concerning the RollupProxy contract.
var RollupProxyMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"genesisExecutionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInbox\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initializeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b50611323806100206000396000f3fe6080604052600436106100225760003560e01c80631868f9661461003957610031565b366100315761002f610059565b005b61002f610059565b34801561004557600080fd5b5061002f610054366004610d18565b61006b565b6100696100646101bc565b6102a0565b565b60006100756102c9565b6001600160a01b031614801561009b575060006100906102fc565b6001600160a01b0316145b80156100b7575060006100ac610324565b6001600160a01b0316145b156101b4576101b08160c0015183836040516024016100d792919061109e565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e94978d0000000000000000000000000000000000000000000000000000000017905260e08601519087015191516001600160a01b0390921660248301529060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc4d66de800000000000000000000000000000000000000000000000000000000179052608087015161034c565b5050565b6101b0610059565b600060043610156102145760405162461bcd60e51b815260206004820152600b60248201527f4e4f5f46554e435f53494700000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60003361021f6102c9565b6001600160a01b03160361023a576102356102fc565b610242565b610242610324565b90506001600160a01b0381163b61029b5760405162461bcd60e51b815260206004820152601360248201527f5441524745545f4e4f545f434f4e545241435400000000000000000000000000604482015260640161020b565b919050565b3660008037600080366000845af43d6000803e8080156102bf573d6000f35b3d6000fd5b505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6102ed565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d6102ed565b61037760017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104611260565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103146103a5576103a5611281565b6103d060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd611260565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc146103fe576103fe611281565b61042960017f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546e611260565b7f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d1461045757610457611281565b6104608161047f565b61046c858560006104d6565b61047883836000610501565b5050505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104a86102c9565b604080516001600160a01b03928316815291841660208301520160405180910390a16104d38161050a565b50565b6104df836105e2565b6000825111806104ec5750805b156102c4576104fb8383610622565b50505050565b6104df83610650565b6001600160a01b0381166105865760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161020b565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6105eb81610690565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061064783836040518060600160405280602781526020016112c760279139610734565b90505b92915050565b6106598161082a565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b6001600160a01b0381163b61070d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161020b565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105a9565b60606001600160a01b0384163b6107b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161020b565b600080856001600160a01b0316856040516107ce9190611297565b600060405180830381855af49150503d8060008114610809576040519150601f19603f3d011682016040523d82523d6000602084013e61080e565b606091505b509150915061081e8282866108ce565b925050505b9392505050565b6001600160a01b0381163b6108a75760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e7472616374000000000000000000606482015260840161020b565b807f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d6105a9565b606083156108dd575081610823565b8251156108ed5782518084602001fd5b8160405162461bcd60e51b815260040161020b91906112b3565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561094057610940610907565b60405290565b604051610120810167ffffffffffffffff8111828210171561094057610940610907565b604051610240810167ffffffffffffffff8111828210171561094057610940610907565b604051601f8201601f1916810167ffffffffffffffff811182821017156109b7576109b7610907565b604052919050565b803567ffffffffffffffff8116811461029b57600080fd5b80356001600160a01b038116811461029b57600080fd5b600082601f8301126109ff57600080fd5b813567ffffffffffffffff811115610a1957610a19610907565b610a2c6020601f19601f8401160161098e565b818152846020838601011115610a4157600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610a6f57600080fd5b8135602067ffffffffffffffff821115610a8b57610a8b610907565b8160051b610a9a82820161098e565b9283528481018201928281019087851115610ab457600080fd5b83870192505b84831015610ad357823582529183019190830190610aba565b979650505050505050565b600060808284031215610af057600080fd5b6040516080810181811067ffffffffffffffff82111715610b1357610b13610907565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f830112610b5557600080fd5b610b5d61091d565b806040840185811115610b6f57600080fd5b845b81811015610b9057610b82816109bf565b845260209384019301610b71565b509095945050505050565b80356003811061029b57600080fd5b600081830360a0811215610bbd57600080fd5b610bc561091d565b91506080811215610bd557600080fd5b50610bde61091d565b83601f840112610bed57600080fd5b610bf561091d565b806040850186811115610c0757600080fd5b855b81811015610c21578035845260209384019301610c09565b50818452610c2f8782610b44565b60208501525050508152610c4560808301610b9b565b602082015292915050565b803560ff8116811461029b57600080fd5b60006101208284031215610c7457600080fd5b610c7c610946565b9050610c87826109d7565b8152610c95602083016109d7565b6020820152610ca6604083016109d7565b6040820152610cb7606083016109d7565b6060820152610cc8608083016109d7565b6080820152610cd960a083016109d7565b60a0820152610cea60c083016109d7565b60c0820152610cfb60e083016109d7565b60e0820152610100610d0e8184016109d7565b9082015292915050565b600080610140808486031215610d2d57600080fd5b833567ffffffffffffffff80821115610d4557600080fd5b908501906103208288031215610d5a57600080fd5b610d6261096a565b610d6b836109bf565b8152610d79602084016109d7565b60208201526040830135604082015260608301356060820152610d9e608084016109d7565b6080820152610daf60a084016109d7565b60a082015260c083013560c082015260e083013582811115610dd057600080fd5b610ddc898286016109ee565b60e0830152506101008084013583811115610df657600080fd5b610e028a828701610a5e565b8284015250506101209150610e1988838501610ade565b828201526101a0915081830135848201526101c09350838301356101608201526101e080840135610180830152610200610e558a828701610baa565b848401526102a085013586840152610e706102c086016109d7565b82840152610e816102e08601610c50565b9083015250610e9361030084016109bf565b61022082015280955050505050610ead8460208501610c61565b90509250929050565b60005b83811015610ed1578181015183820152602001610eb9565b50506000910152565b60008151808452610ef2816020860160208601610eb6565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015610f3657815187529582019590820190600101610f1a565b509495945050505050565b60038110610f5f57634e487b7160e01b600052602160045260246000fd5b9052565b805180518360005b6002811015610f8a578251825260209283019290910190600101610f6b565b505050602090810151906040840160005b6002811015610fc257835167ffffffffffffffff1682529282019290820190600101610f9b565b505082015190506102c46080840182610f41565b6001600160a01b0380825116835280602083015116602084015280604083015116604084015250606081015161101760608401826001600160a01b03169052565b50608081015161103260808401826001600160a01b03169052565b5060a081015161104d60a08401826001600160a01b03169052565b5060c081015161106860c08401826001600160a01b03169052565b5060e081015161108360e08401826001600160a01b03169052565b50610100818101516001600160a01b038116848301526104fb565b60006101408083526110bc818401865167ffffffffffffffff169052565b60208501516101606110d8818601836001600160a01b03169052565b604087015191506101808281870152606088015192506101a08381880152608089015193506101c0611114818901866001600160a01b03169052565b60a08a015194506101e0611132818a01876001600160a01b03169052565b60c08b0151955061020086818b015260e08c0151965061032061022081818d01526111616104608d018a610eda565b98506101008e01517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec08d8b03016102408e015261119e8a82610f06565b9950506101208e01516111d66102608e0182805182526020810151602083015260408101516040830152606081015160608301525050565b50988d01516102e08c0152868d01516103008c0152858d0151818c0152848d0151986112066103408d018b610f63565b938d01516103e08c015250908b01516001600160a01b03166104008a01528a015160ff1661042089015289015167ffffffffffffffff8116610440890152945061124f92505050565b915061082390506020830184610fd6565b8181038181111561064a57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b600082516112a9818460208701610eb6565b9190910192915050565b6020815260006106476020830184610eda56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220633a66e290971a5fc63ce94b2c31c55ef133528c17935d9519de13fb22940b7364736f6c63430008110033",
}

// RollupProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupProxyMetaData.ABI instead.
var RollupProxyABI = RollupProxyMetaData.ABI

// RollupProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupProxyMetaData.Bin instead.
var RollupProxyBin = RollupProxyMetaData.Bin

// DeployRollupProxy deploys a new Ethereum contract, binding an instance of RollupProxy to it.
func DeployRollupProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupProxy, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// RollupProxy is an auto generated Go binding around an Ethereum contract.
type RollupProxy struct {
	RollupProxyCaller     // Read-only binding to the contract
	RollupProxyTransactor // Write-only binding to the contract
	RollupProxyFilterer   // Log filterer for contract events
}

// RollupProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupProxySession struct {
	Contract     *RollupProxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupProxyCallerSession struct {
	Contract *RollupProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// RollupProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupProxyTransactorSession struct {
	Contract     *RollupProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// RollupProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupProxyRaw struct {
	Contract *RollupProxy // Generic contract binding to access the raw methods on
}

// RollupProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupProxyCallerRaw struct {
	Contract *RollupProxyCaller // Generic read-only contract binding to access the raw methods on
}

// RollupProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupProxyTransactorRaw struct {
	Contract *RollupProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupProxy creates a new instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxy(address common.Address, backend bind.ContractBackend) (*RollupProxy, error) {
	contract, err := bindRollupProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// NewRollupProxyCaller creates a new read-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyCaller(address common.Address, caller bind.ContractCaller) (*RollupProxyCaller, error) {
	contract, err := bindRollupProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyCaller{contract: contract}, nil
}

// NewRollupProxyTransactor creates a new write-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupProxyTransactor, error) {
	contract, err := bindRollupProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyTransactor{contract: contract}, nil
}

// NewRollupProxyFilterer creates a new log filterer instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupProxyFilterer, error) {
	contract, err := bindRollupProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupProxyFilterer{contract: contract}, nil
}

// bindRollupProxy binds a generic wrapper to an already deployed contract.
func bindRollupProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.RollupProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transact(opts, method, params...)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0x1868f966.
//
// Solidity: function initializeProxy((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxyTransactor) InitializeProxy(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.contract.Transact(opts, "initializeProxy", config, connectedContracts)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0x1868f966.
//
// Solidity: function initializeProxy((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxySession) InitializeProxy(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.Contract.InitializeProxy(&_RollupProxy.TransactOpts, config, connectedContracts)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0x1868f966.
//
// Solidity: function initializeProxy((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8),uint256,address,uint8,uint64) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxyTransactorSession) InitializeProxy(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.Contract.InitializeProxy(&_RollupProxy.TransactOpts, config, connectedContracts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxySession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// RollupProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupProxy contract.
type RollupProxyAdminChangedIterator struct {
	Event *RollupProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyAdminChanged represents a AdminChanged event raised by the RollupProxy contract.
type RollupProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupProxyAdminChangedIterator, error) {

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupProxyAdminChangedIterator{contract: _RollupProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyAdminChanged)
				if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) ParseAdminChanged(log types.Log) (*RollupProxyAdminChanged, error) {
	event := new(RollupProxyAdminChanged)
	if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupProxy contract.
type RollupProxyBeaconUpgradedIterator struct {
	Event *RollupProxyBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyBeaconUpgraded represents a BeaconUpgraded event raised by the RollupProxy contract.
type RollupProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyBeaconUpgradedIterator{contract: _RollupProxy.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyBeaconUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) ParseBeaconUpgraded(log types.Log) (*RollupProxyBeaconUpgraded, error) {
	event := new(RollupProxyBeaconUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupProxy contract.
type RollupProxyUpgradedIterator struct {
	Event *RollupProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgraded represents a Upgraded event raised by the RollupProxy contract.
type RollupProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedIterator{contract: _RollupProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgraded(log types.Log) (*RollupProxyUpgraded, error) {
	event := new(RollupProxyUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupProxy contract.
type RollupProxyUpgradedSecondaryIterator struct {
	Event *RollupProxyUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgradedSecondary represents a UpgradedSecondary event raised by the RollupProxy contract.
type RollupProxyUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedSecondaryIterator{contract: _RollupProxy.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgradedSecondary)
				if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgradedSecondary(log types.Log) (*RollupProxyUpgradedSecondary, error) {
	event := new(RollupProxyUpgradedSecondary)
	if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupReaderMetaData contains all meta data concerning the RollupReader contract.
var RollupReaderMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIOldRollup\",\"name\":\"_rollup\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structIOldRollup.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structOldStaker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"contractIOldRollup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801561001057600080fd5b50604051610be3380380610be383398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610b206100c3600039600081816101a5015281816101f6015281816102b601528181610333015281816104500152818161051b0152818161058a0152818161060e01526106a50152610b206000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a23c44b111610076578063cb23bcb51161005b578063cb23bcb5146101a0578063dff69787146101c7578063facd743b146101cf57600080fd5b8063a23c44b11461012f578063bc45e0ae1461019857600080fd5b806365f7f80d146100a85780636ddd3744146100ce5780638ee1a126146100f957806392c8134c1461010f575b600080fd5b6100b06101f2565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6100e16100dc36600461072b565b61027b565b6040516001600160a01b0390911681526020016100c5565b61010161032f565b6040519081526020016100c5565b61012261011d36600461072b565b6103b3565b6040516100c5919061074f565b61014261013d366004610868565b6104bc565b6040516100c59190600060a08201905082518252602083015167ffffffffffffffff8082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b6100e1610586565b6100e17f000000000000000000000000000000000000000000000000000000000000000081565b6100b061060a565b6101e26101dd366004610868565b61066a565b60405190151581526020016100c5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365f7f80d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102769190610895565b905090565b6040517f6ddd374400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ddd374490602401602060405180830381865afa158015610305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032991906108b2565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ee1a1266040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027691906108cf565b6040805161018081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820181905261016082015290517f92c8134c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906392c8134c9060240161018060405180830381865afa158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610939565b6040805160a08101825260008082526020820181905281830181905260608201819052608082015290517fa23c44b10000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a23c44b19060240160a060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610a1b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc45e0ae6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027691906108b2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dff697876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610252573d6000803e3d6000fd5b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063facd743b90602401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610acf565b67ffffffffffffffff8116811461072857600080fd5b50565b60006020828403121561073d57600080fd5b813561074881610712565b9392505050565b600061018082019050825182526020830151602083015260408301516040830152606083015161078b606084018267ffffffffffffffff169052565b5060808301516107a7608084018267ffffffffffffffff169052565b5060a08301516107c360a084018267ffffffffffffffff169052565b5060c08301516107df60c084018267ffffffffffffffff169052565b5060e08301516107fb60e084018267ffffffffffffffff169052565b506101008381015167ffffffffffffffff81168483015250506101208381015167ffffffffffffffff81168483015250506101408381015167ffffffffffffffff811684830152505061016092830151919092015290565b6001600160a01b038116811461072857600080fd5b60006020828403121561087a57600080fd5b813561074881610853565b805161089081610712565b919050565b6000602082840312156108a757600080fd5b815161074881610712565b6000602082840312156108c457600080fd5b815161074881610853565b6000602082840312156108e157600080fd5b5051919050565b604051610180810167ffffffffffffffff81118282101715610933577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b6000610180828403121561094c57600080fd5b6109546108e8565b82518152602083015160208201526040830151604082015261097860608401610885565b606082015261098960808401610885565b608082015261099a60a08401610885565b60a08201526109ab60c08401610885565b60c08201526109bc60e08401610885565b60e08201526101006109cf818501610885565b908201526101206109e1848201610885565b908201526101406109f3848201610885565b90820152610160928301519281019290925250919050565b8051801515811461089057600080fd5b600060a08284031215610a2d57600080fd5b60405160a0810181811067ffffffffffffffff82111715610a77577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052825181526020830151610a8c81610712565b60208201526040830151610a9f81610712565b60408201526060830151610ab281610712565b6060820152610ac360808401610a0b565b60808201529392505050565b600060208284031215610ae157600080fd5b61074882610a0b56fea2646970667358221220bf0bccc7c5c019193992c9fef437a5e097913274af11a1b0783fd855b4a3230b64736f6c63430008110033",
}

// RollupReaderABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupReaderMetaData.ABI instead.
var RollupReaderABI = RollupReaderMetaData.ABI

// RollupReaderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupReaderMetaData.Bin instead.
var RollupReaderBin = RollupReaderMetaData.Bin

// DeployRollupReader deploys a new Ethereum contract, binding an instance of RollupReader to it.
func DeployRollupReader(auth *bind.TransactOpts, backend bind.ContractBackend, _rollup common.Address) (common.Address, *types.Transaction, *RollupReader, error) {
	parsed, err := RollupReaderMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupReaderBin), backend, _rollup)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupReader{RollupReaderCaller: RollupReaderCaller{contract: contract}, RollupReaderTransactor: RollupReaderTransactor{contract: contract}, RollupReaderFilterer: RollupReaderFilterer{contract: contract}}, nil
}

// RollupReader is an auto generated Go binding around an Ethereum contract.
type RollupReader struct {
	RollupReaderCaller     // Read-only binding to the contract
	RollupReaderTransactor // Write-only binding to the contract
	RollupReaderFilterer   // Log filterer for contract events
}

// RollupReaderCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupReaderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupReaderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupReaderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupReaderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupReaderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupReaderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupReaderSession struct {
	Contract     *RollupReader     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupReaderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupReaderCallerSession struct {
	Contract *RollupReaderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// RollupReaderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupReaderTransactorSession struct {
	Contract     *RollupReaderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// RollupReaderRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupReaderRaw struct {
	Contract *RollupReader // Generic contract binding to access the raw methods on
}

// RollupReaderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupReaderCallerRaw struct {
	Contract *RollupReaderCaller // Generic read-only contract binding to access the raw methods on
}

// RollupReaderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupReaderTransactorRaw struct {
	Contract *RollupReaderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupReader creates a new instance of RollupReader, bound to a specific deployed contract.
func NewRollupReader(address common.Address, backend bind.ContractBackend) (*RollupReader, error) {
	contract, err := bindRollupReader(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupReader{RollupReaderCaller: RollupReaderCaller{contract: contract}, RollupReaderTransactor: RollupReaderTransactor{contract: contract}, RollupReaderFilterer: RollupReaderFilterer{contract: contract}}, nil
}

// NewRollupReaderCaller creates a new read-only instance of RollupReader, bound to a specific deployed contract.
func NewRollupReaderCaller(address common.Address, caller bind.ContractCaller) (*RollupReaderCaller, error) {
	contract, err := bindRollupReader(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupReaderCaller{contract: contract}, nil
}

// NewRollupReaderTransactor creates a new write-only instance of RollupReader, bound to a specific deployed contract.
func NewRollupReaderTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupReaderTransactor, error) {
	contract, err := bindRollupReader(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupReaderTransactor{contract: contract}, nil
}

// NewRollupReaderFilterer creates a new log filterer instance of RollupReader, bound to a specific deployed contract.
func NewRollupReaderFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupReaderFilterer, error) {
	contract, err := bindRollupReader(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupReaderFilterer{contract: contract}, nil
}

// bindRollupReader binds a generic wrapper to an already deployed contract.
func bindRollupReader(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupReaderMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupReader *RollupReaderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupReader.Contract.RollupReaderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupReader *RollupReaderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupReader.Contract.RollupReaderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupReader *RollupReaderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupReader.Contract.RollupReaderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupReader *RollupReaderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupReader.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupReader *RollupReaderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupReader.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupReader *RollupReaderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupReader.Contract.contract.Transact(opts, method, params...)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupReader *RollupReaderCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupReader *RollupReaderSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupReader.Contract.GetNode(&_RollupReader.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupReader *RollupReaderCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupReader.Contract.GetNode(&_RollupReader.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupReader *RollupReaderCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (OldStaker, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(OldStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(OldStaker)).(*OldStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupReader *RollupReaderSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _RollupReader.Contract.GetStaker(&_RollupReader.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupReader *RollupReaderCallerSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _RollupReader.Contract.GetStaker(&_RollupReader.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupReader *RollupReaderCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupReader *RollupReaderSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupReader.Contract.GetStakerAddress(&_RollupReader.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupReader *RollupReaderCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupReader.Contract.GetStakerAddress(&_RollupReader.CallOpts, stakerNum)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupReader *RollupReaderCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupReader *RollupReaderSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupReader.Contract.IsValidator(&_RollupReader.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupReader *RollupReaderCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupReader.Contract.IsValidator(&_RollupReader.CallOpts, validator)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupReader *RollupReaderCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupReader *RollupReaderSession) LatestConfirmed() (uint64, error) {
	return _RollupReader.Contract.LatestConfirmed(&_RollupReader.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupReader *RollupReaderCallerSession) LatestConfirmed() (uint64, error) {
	return _RollupReader.Contract.LatestConfirmed(&_RollupReader.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupReader *RollupReaderCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupReader *RollupReaderSession) Rollup() (common.Address, error) {
	return _RollupReader.Contract.Rollup(&_RollupReader.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupReader *RollupReaderCallerSession) Rollup() (common.Address, error) {
	return _RollupReader.Contract.Rollup(&_RollupReader.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupReader *RollupReaderCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupReader *RollupReaderSession) StakerCount() (uint64, error) {
	return _RollupReader.Contract.StakerCount(&_RollupReader.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupReader *RollupReaderCallerSession) StakerCount() (uint64, error) {
	return _RollupReader.Contract.StakerCount(&_RollupReader.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupReader *RollupReaderCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupReader *RollupReaderSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupReader.Contract.ValidatorWalletCreator(&_RollupReader.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupReader *RollupReaderCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupReader.Contract.ValidatorWalletCreator(&_RollupReader.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupReader *RollupReaderCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupReader *RollupReaderSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupReader.Contract.WasmModuleRoot(&_RollupReader.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupReader *RollupReaderCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupReader.Contract.WasmModuleRoot(&_RollupReader.CallOpts)
}

// RollupReaderNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the RollupReader contract.
type RollupReaderNodeCreatedIterator struct {
	Event *RollupReaderNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupReaderNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupReaderNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupReaderNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupReaderNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupReaderNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupReaderNodeCreated represents a NodeCreated event raised by the RollupReader contract.
type RollupReaderNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          IOldRollupAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupReader *RollupReaderFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*RollupReaderNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupReader.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupReaderNodeCreatedIterator{contract: _RollupReader.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupReader *RollupReaderFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *RollupReaderNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupReader.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupReaderNodeCreated)
				if err := _RollupReader.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupReader *RollupReaderFilterer) ParseNodeCreated(log types.Log) (*RollupReaderNodeCreated, error) {
	event := new(RollupReaderNodeCreated)
	if err := _RollupReader.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicMetaData contains all meta data concerning the RollupUserLogic contract.
var RollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeGracePeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"computeAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"winningEdgeId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"prevConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"confirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"fastConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"fastConfirmNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e0604052620000196200003a60201b62001cdc1760201c565b15156080523060a0524660c0523480156200003357600080fd5b5062000108565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b1790529051600091829182916064916200007a9190620000d7565b600060405180830381855afa9150503d8060008114620000b7576040519150601f19603f3d011682016040523d82523d6000602084013e620000bc565b606091505b5091509150818015620000d0575080516020145b9250505090565b6000825160005b81811015620000fa5760208186018101518583015201620000de565b506000920191825250919050565b60805160a05160c0516145bf6200014d60003960006119360152600081816113f7015281816119ac0152611a4201526000818161091b0152612c3401526145bf6000f3fe608060405234801561001057600080fd5b506004361061036d5760003560e01c806365f7f80d116101d3578063c2c2e68e11610104578063ee35f327116100a2578063f3f0a03e1161007c578063f3f0a03e14610885578063f9cee9df14610898578063facd743b146108ab578063fb0e722b146108ce57600080fd5b8063ee35f32714610841578063ef40a67014610849578063f065de3f1461087257600080fd5b8063dff69787116100de578063dff697871461079c578063e531d8c7146107a4578063e78cea92146107b7578063e8bd4922146107ca57600080fd5b8063c2c2e68e1461076e578063c4d66de814610776578063ce11e6ab1461078957600080fd5b806388302884116101715780639a8a05921161014b5780639a8a05921461066f578063a23c44b114610678578063aa38a6e714610748578063bc45e0ae1461075b57600080fd5b8063883028841461063e5780638da5cb5b1461065e5780638ee1a1261461066657600080fd5b80636e981c75116101ad5780636e981c751461060657806371ef232c1461061957806376a610181461062257806376e7e23b1461063557600080fd5b806365f7f80d146105d85780636b00cea9146105e05780636ddd3744146105f357600080fd5b8063353325e0116102ad57806352d1902d1161024b57806357ef4ab91161022557806357ef4ab9146105875780635c975abb1461058f578063613739191461059a5780636177fd18146105a257600080fd5b806352d1902d1461055457806355840a581461055c57806356bbc9e61461057457600080fd5b806345e38b641161028757806345e38b641461051b5780634ceccfe5146105245780634db519d41461052e57806351ed6a301461054157600080fd5b8063353325e0146104d45780633be680ea146104dc57806342500b851461050857600080fd5b80631b1689e91161031a5780632abdd230116102f45780632abdd230146104585780632e7acfa6146104845780632f30cabd1461049857806330836228146104c157600080fd5b80631b1689e9146104295780631cb64515146104325780631e83d30f1461044557600080fd5b806312ab3d3b1161034b57806312ab3d3b146103e357806313c56ca71461040057806318baaab91461042157600080fd5b8063023a96fe1461037257806304972af9146103a257806311715585146103b7575b600080fd5b606954610385906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6103b56103b0366004613cd9565b6108e1565b005b6103ca6103c5366004613d06565b6108fb565b60405167ffffffffffffffff9091168152602001610399565b607a546103f09060ff1681565b6040519015158152602001610399565b61041361040e366004613d06565b610917565b604051908152602001610399565b6103b5610a64565b61041360795481565b6103b5610440366004613d32565b610b38565b6103b5610453366004613d06565b610ec7565b610413610466366004613d74565b6001600160a01b031660009081526076602052604090206001015490565b6066546103ca9067ffffffffffffffff1681565b6104136104a6366004613d74565b6001600160a01b031660009081526077602052604090205490565b6103f06104cf366004613d06565b610f3e565b610413610f5a565b6069546103ca9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b6103b5610516366004613d91565b610f8f565b61041360715481565b6104136203138081565b6103b561053c366004613dd0565b611008565b607054610385906001600160a01b031681565b6104136113ea565b607a546103859061010090046001600160a01b031681565b6103ca610582366004613d06565b6114af565b6103b56114d2565b60335460ff166103f0565b61041361154a565b6103f06105b0366004613d74565b6001600160a01b0316600090815260766020526040902060020154600160401b900460ff1690565b607354610413565b6104136105ee366004613e2d565b6115cd565b610385610601366004613e79565b6115f2565b6103b5610614366004613d32565b61162c565b61041360785481565b6103b5610630366004613e96565b6117e9565b61041360675481565b61065161064c366004613d06565b61180a565b6040516103999190613f02565b6103856118d6565b61041360685481565b61041360655481565b610709610686366004613d74565b604080516080810182526000808252602082018190529181018290526060810191909152506001600160a01b03166000908152607660209081526040918290208251608081018452815481526001820154928101929092526002015467ffffffffffffffff811692820192909252600160401b90910460ff161515606082015290565b6040516103999190815181526020808301519082015260408083015167ffffffffffffffff169082015260609182015115159181019190915260800190565b606d54610385906001600160a01b031681565b606e54610385906001600160a01b031681565b6103b56118e0565b6103b5610784366004613d74565b6119a2565b606c54610385906001600160a01b031681565b6075546103ca565b6103f06107b2366004613d06565b611b47565b606b54610385906001600160a01b031681565b61080f6107d8366004613d74565b60766020526000908152604090208054600182015460029092015490919067ffffffffffffffff811690600160401b900460ff1684565b6040516103999493929190938452602084019290925267ffffffffffffffff1660408301521515606082015260800190565b610385611b77565b610413610857366004613d74565b6001600160a01b031660009081526076602052604090205490565b606f54610385906001600160a01b031681565b6103b5610893366004613f63565b611bfe565b6103b56108a6366004613f8f565b611c75565b6103f06108b9366004613d74565b60726020526000908152604090205460ff1681565b606a54610385906001600160a01b031681565b6108f7816108ee84611da2565b60010154611e03565b5050565b600061090682611da2565b5467ffffffffffffffff1692915050565b60007f0000000000000000000000000000000000000000000000000000000000000000156109a6576000828152607b6020526040902054806109a05760405162461bcd60e51b815260206004820152600c60248201527f4e4f5f415353455254494f4e000000000000000000000000000000000000000060448201526064015b60405180910390fd5b92915050565b60006109b183611da2565b6040805160c081018252825467ffffffffffffffff8082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b8304811615156060830152929350610a4792909184916080840191600160c81b9004166002811115610a2357610a23613ece565b6002811115610a3457610a34613ece565b8152602001600182015481525050611f08565b54600160801b900467ffffffffffffffff1692915050565b919050565b607a5460ff1615610ab75760405162461bcd60e51b815260206004820152601260248201527f57484954454c4953545f44495341424c454400000000000000000000000000006044820152606401610997565b610abf611f6d565b610b0b5760405162461bcd60e51b815260206004820152601160248201527f56414c494441544f525f4e4f545f41464b0000000000000000000000000000006044820152606401610997565b607a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b3360009081526072602052604090205460ff1680610b585750607a5460ff165b610b945760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b6044820152606401610997565b610b9c61207d565b801580610bcd57506000610baf82611da2565b54600160c81b900460ff166002811115610bcb57610bcb613ece565b145b610c195760405162461bcd60e51b815260206004820152601760248201527f45585045435445445f415353455254494f4e5f5345454e0000000000000000006044820152606401610997565b33600090815260766020526040902060020154600160401b900460ff16610c6f5760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b6044820152606401610997565b3360009081526076602052604090205460608301351115610cd25760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f5354414b4500000000000000000000000000006044820152606401610997565b6000610cf58335610ceb36869003860160e08701614101565b60208601356120d0565b9050610d6e610d0382611da2565b6040805160c081018252825467ffffffffffffffff8082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b909104166002811115610a2357610a23613ece565b3360009081526076602052604090206001015481811480610da257506000610d9582611da2565b5467ffffffffffffffff16115b610dee5760405162461bcd60e51b815260206004820152601860248201527f5354414b45445f4f4e5f414e4f544845525f4252414e434800000000000000006044820152606401610997565b6000610df983611da2565b54610e1590600160801b900467ffffffffffffffff1643614155565b9050607154811015610e695760405162461bcd60e51b815260206004820152600a60248201527f54494d455f44454c5441000000000000000000000000000000000000000000006044820152606401610997565b6000610e76868587612114565b3360009081526076602052604090206001018190559050610e9681611da2565b54600160c01b900460ff16610ebf57606f54610ebf906001600160a01b03166060880135612cd7565b505050505050565b3360009081526072602052604090205460ff1680610ee75750607a5460ff165b610f235760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b6044820152606401610997565b610f2b61207d565b610f3433612d7c565b6108f73382612e6d565b6000610f4982611da2565b54600160c01b900460ff1692915050565b6000610f64613c7e565b6040805180820190915281815260016020820152600080610f868184816120d0565b94505050505090565b610f9761207d565b607a5461010090046001600160a01b03163314610ff65760405162461bcd60e51b815260206004820152601260248201527f4e4f545f464153545f434f4e4649524d455200000000000000000000000000006044820152606401610997565b61100284848484612f3f565b50505050565b3360009081526072602052604090205460ff16806110285750607a5460ff165b6110645760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b6044820152606401610997565b61106c61207d565b600061107787611da2565b9050600061108487611da2565b9050611094848260010154611e03565b6110a46080850160608601613e79565b82546110c19190600160801b900467ffffffffffffffff16614168565b67ffffffffffffffff1643101561111a5760405162461bcd60e51b815260206004820152600f60248201527f4245464f52455f444541444c494e4500000000000000000000000000000000006044820152606401610997565b607354871461116b5760405162461bcd60e51b815260206004820152601960248201527f505245565f4e4f545f4c41544553545f434f4e4649524d4544000000000000006044820152606401610997565b8054600160401b900467ffffffffffffffff16156113d45760006111956060860160408701613d74565b6001600160a01b031663fda2892e876040518263ffffffff1660e01b81526004016111c291815260200190565b6101e060405180830381865afa1580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120491906141d6565b9050888160e00151146112595760405162461bcd60e51b815260206004820152600a60248201527f4e4f545f57494e4e4552000000000000000000000000000000000000000000006044820152606401610997565b6001816101600151600181111561127257611272613ece565b146112bf5760405162461bcd60e51b815260206004820152601260248201527f454447455f4e4f545f434f4e4649524d454400000000000000000000000000006044820152606401610997565b80610140015167ffffffffffffffff1660000361131e5760405162461bcd60e51b815260206004820152601760248201527f5a45524f5f434f4e4649524d45445f41545f424c4f434b0000000000000000006044820152606401610997565b6069546101408201516113539174010000000000000000000000000000000000000000900467ffffffffffffffff1690614168565b67ffffffffffffffff164310156113d25760405162461bcd60e51b815260206004820152602160248201527f4348414c4c454e47455f47524143455f504552494f445f4e4f545f504153534560448201527f44000000000000000000000000000000000000000000000000000000000000006064820152608401610997565b505b6113e088888886612f3f565b5050505050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461148a5760405162461bcd60e51b815260206004820152603b60248201527f555550534e6f745570677261646561626c653a206d757374206e6f742062652060448201527f63616c6c6564207468726f7567682064656c656761746563616c6c00000000006064820152608401610997565b507f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d90565b60006114ba82611da2565b54600160401b900467ffffffffffffffff1692915050565b3360009081526072602052604090205460ff16806114f25750607a5460ff165b61152e5760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b6044820152606401610997565b61153661207d565b61153f33612d7c565b61154833613156565b565b600061155461207d565b600061155f336131cd565b9050600081116115b15760405162461bcd60e51b815260206004820152601460248201527f4e4f5f46554e44535f544f5f57495448445241570000000000000000000000006044820152606401610997565b6070546115c8906001600160a01b0316338361324e565b905090565b60006115e8846115e236869003860186614101565b846120d0565b90505b9392505050565b600060758267ffffffffffffffff1681548110611611576116116142c0565b6000918252602090912001546001600160a01b031692915050565b61163461207d565b806116815760405162461bcd60e51b815260206004820152601760248201527f45585045435445445f415353455254494f4e5f484153480000000000000000006044820152606401610997565b600061168c82611da2565b54600160c81b900460ff16905060006116bc84356116b236879003870160e08801614101565b60208701356120d0565b90506116ca610d0382611da2565b60008260028111156116de576116de613ece565b036117265760006116f0858386612114565b90506116fb81611da2565b54600160c01b900460ff1661172457606f54611724906001600160a01b03166060870135612cd7565b505b606b5461100290849083906101808801906001600160a01b03166316bf5579600161175e611759368d90038d01866142d6565b6132f7565b61176891906142f2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa1580156117c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190614313565b6117f28361330c565b6117fc8282610b38565b611805836133e4565b505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915261184582611da2565b6040805160c081018252825467ffffffffffffffff8082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b9091041660028111156118b0576118b0613ece565b60028111156118c1576118c1613ece565b81526020016001820154815250509050919050565b60006115c86133fc565b607a5460ff16156119335760405162461bcd60e51b815260206004820152601260248201527f57484954454c4953545f44495341424c454400000000000000000000000000006044820152606401610997565b467f000000000000000000000000000000000000000000000000000000000000000003610b0b5760405162461bcd60e51b815260206004820152601460248201527f434841494e5f49445f4e4f545f4348414e4745440000000000000000000000006044820152606401610997565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611a405760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610997565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a7261342f565b6001600160a01b031614611aee5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610997565b6001600160a01b038116611b445760405162461bcd60e51b815260206004820152601060248201527f4e4545445f5354414b455f544f4b454e000000000000000000000000000000006044820152606401610997565b50565b60006001611b5483611da2565b54600160c81b900460ff166002811115611b7057611b70613ece565b1492915050565b606b54604080517fee35f32700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ee35f3279160048083019260209291908290030181865afa158015611bda573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c8919061432c565b3360009081526072602052604090205460ff1680611c1e5750607a5460ff165b611c5a5760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b6044820152606401610997565b611c6261207d565b611c6c8282613457565b6108f7816133e4565b611c8e82611c8836869003860186614101565b836120d0565b84146110025760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f415353455254494f4e5f48415348000000000000000000006044820152606401610997565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f051038f200000000000000000000000000000000000000000000000000000000179052905160009182918291606491611d48919061436d565b600060405180830381855afa9150503d8060008114611d83576040519150601f19603f3d011682016040523d82523d6000602084013e611d88565b606091505b5091509150818015611d9b575080516020145b9250505090565b600081611df15760405162461bcd60e51b815260206004820152601b60248201527f415353455254494f4e5f49445f43414e4e4f545f42455f5a45524f00000000006044820152606401610997565b50600090815260746020526040902090565b611eba82356020840135611e1d6060860160408701613d74565b611e2d6080870160608801613e79565b611e3d60a0880160808901613e79565b60408051602080820197909752808201959095526bffffffffffffffffffffffff19606094851b16938501939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b81166074860152911b16607c8301528051606481840301815260849092019052805191012090565b81146108f75760405162461bcd60e51b815260206004820152601460248201527f434f4e4649475f484153485f4d49534d415443480000000000000000000000006044820152606401610997565b600081608001516002811115611f2057611f20613ece565b03611b445760405162461bcd60e51b815260206004820152601360248201527f415353455254494f4e5f4e4f545f4558495354000000000000000000000000006044820152606401610997565b600080611f81611f7c60735490565b611da2565b6040805160c081018252825467ffffffffffffffff8082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b909104166002811115611fec57611fec613ece565b6002811115611ffd57611ffd613ece565b81526020016001820154815250509050806040015167ffffffffffffffff1660000361202b57600091505090565b805167ffffffffffffffff161561205f578051439061205890620313809067ffffffffffffffff16614389565b1091505090565b4362031380826040015167ffffffffffffffff166120589190614389565b60335460ff16156115485760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610997565b60006115e8846120df85613524565b604080516020808201949094528082019290925260608083018790528151808403909101815260809092019052805191012090565b6000612126604085016108ee85611da2565b600161213a6102208601610200870161439c565b600281111561214b5761214b613ece565b1480612179575060026121666102208601610200870161439c565b600281111561217757612177613ece565b145b6121c55760405162461bcd60e51b815260206004820152601060248201527f4241445f41465445525f535441545553000000000000000000000000000000006044820152606401610997565b826121e785356121dd36889003880160e08901614101565b60208801356120d0565b146122345760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f4245464f52455f53544154450000000000000000000000006044820152606401610997565b60016122486101808601610160870161439c565b600281111561225957612259613ece565b146122a65760405162461bcd60e51b815260206004820152600f60248201527f4241445f505245565f53544154555300000000000000000000000000000000006044820152606401610997565b60006122b184611da2565b9050600080806122cd611759368a90038a016101808b016142d6565b905060006122e6611759368b90038b0160e08c016142d6565b90508067ffffffffffffffff168267ffffffffffffffff16101561234c5760405162461bcd60e51b815260206004820152600f60248201527f494e424f585f4241434b574152445300000000000000000000000000000000006044820152606401610997565b61235c60e08a0160c08b01613e79565b67ffffffffffffffff168267ffffffffffffffff1611156123bf5760405162461bcd60e51b815260206004820152600d60248201527f494e424f585f544f4f5f464152000000000000000000000000000000000000006044820152606401610997565b67ffffffffffffffff81166123da60e08b0160c08c01613e79565b67ffffffffffffffff16116124315760405162461bcd60e51b815260206004820152601460248201527f4e4558545f494e424f585f4241434b57415244530000000000000000000000006044820152606401610997565b60026124456102208b016102008c0161439c565b600281111561245657612456613ece565b036124ff576000612478612473368c90038c016101808d016142d6565b613566565b67ffffffffffffffff1611156124fa5761249860e08a0160c08b01613e79565b67ffffffffffffffff168267ffffffffffffffff16036124fa5760405162461bcd60e51b815260206004820152601060248201527f504f534954494f4e5f544f4f5f464152000000000000000000000000000000006044820152606401610997565b612650565b60016125136102208b016102008c0161439c565b600281111561252457612524613ece565b036126085761253960e08a0160c08b01613e79565b67ffffffffffffffff168267ffffffffffffffff161461259b5760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f46494e49534845445f494e424f58000000000000000000006044820152606401610997565b6125b1612473368b90038b016101808c016142d6565b67ffffffffffffffff16156124fa5760405162461bcd60e51b815260206004820152601c60248201527f4e4f4e5f5a45524f5f46494e49534845445f504f535f494e5f4d5347000000006044820152606401610997565b60405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f5354415455530000000000000000000000000000000000006044820152606401610997565b606b54604080517e84120c00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916284120c9160048083019260209291908290030181865afa1580156126b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d59190614313565b9050808367ffffffffffffffff1611156127315760405162461bcd60e51b815260206004820152600e60248201527f494e424f585f504153545f454e440000000000000000000000000000000000006044820152606401610997565b8061274260e08c0160c08d01613e79565b67ffffffffffffffff16111561279a5760405162461bcd60e51b815260206004820152601360248201527f494e424f585f4e4f545f504f50554c41544544000000000000000000000000006044820152606401610997565b808367ffffffffffffffff16036127bd576127b6816001614389565b94506127c1565b8094505b8267ffffffffffffffff1660000361281b5760405162461bcd60e51b815260206004820152601160248201527f454d5054595f494e424f585f434f554e540000000000000000000000000000006044820152606401610997565b606b546001600160a01b03166316bf55796128376001866142f2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015612894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b89190614313565b935050505060006128d88789610180018036038101906115e29190614101565b9050858114806128e6575085155b6129325760405162461bcd60e51b815260206004820152601960248201527f554e45585045435445445f415353455254494f4e5f48415348000000000000006044820152606401610997565b600061293d82611da2565b54600160c81b900460ff16600281111561295957612959613ece565b146129a65760405162461bcd60e51b815260206004820152600e60248201527f415353455254494f4e5f5345454e0000000000000000000000000000000000006044820152606401610997565b835460685460675460695460665460408051602080820196909652808201949094526bffffffffffffffffffffffff19606093841b16838501527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116607486015289831b16607c85015280516064818603018152608485018083528151918701919091206101448601835260009182905260a4860182905260c4860182905260e4860182905261010486018290526101249095018190528151928301825280835294820185905267ffffffffffffffff43811691830191909152909416159084015260a08301526001608083015250612aa485613575565b60008281526074602090815260409182902083518154928501519385015160608601511515600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff928316600160801b02167fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff968316600160401b027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909616929093169190911793909317939093169290921717808255608083015183929182907fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff16600160c81b836002811115612bac57612bac613ece565b021790555060a0820151816001015590505087827fcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb36978b8688606854606754606960009054906101000a90046001600160a01b0316606660009054906101000a900467ffffffffffffffff16604051612c2a979695949392919061441d565b60405180910390a37f000000000000000000000000000000000000000000000000000000000000000015612ccb5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbb9190614313565b6000838152607b60205260409020555b50979650505050505050565b6001600160a01b03821660009081526077602052604081205490612cfb8383614389565b6001600160a01b0385166000908152607760205260408120829055607880549293508592909190612d2d908490614389565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a250505050565b6001600160a01b038116600090815260766020526040902060020154600160401b900460ff16612ddb5760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b6044820152606401610997565b6001600160a01b03811660009081526076602052604081206001015460735490919082149080612e0a84611da2565b5467ffffffffffffffff161190508180612e215750805b6110025760405162461bcd60e51b815260206004820152600c60248201527f5354414b455f41435449564500000000000000000000000000000000000000006044820152606401610997565b6001600160a01b0382166000908152607660205260408120805480841115612ed75760405162461bcd60e51b815260206004820152601060248201527f544f4f5f4c4954544c455f5354414b45000000000000000000000000000000006044820152606401610997565b6000612ee38583614155565b8584559050612ef28682612cd7565b60408051838152602081018790526001600160a01b038816917febd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6910160405180910390a295945050505050565b6000612f4a85611da2565b905060018154600160c81b900460ff166002811115612f6b57612f6b613ece565b14612fb85760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f50454e44494e470000000000000000000000000000000000000000006044820152606401610997565b612fcb846115e236869003860186614101565b85146130195760405162461bcd60e51b815260206004820152600c60248201527f434f4e4649524d5f4441544100000000000000000000000000000000000000006044820152606401610997565b600061303261302d368690038601866142d6565b6135f9565b9050600061304d613048368790038701876142d6565b613604565b606c546040517fa04cee6000000000000000000000000000000000000000000000000000000000815260048101839052602481018590529192506001600160a01b03169063a04cee6090604401600060405180830381600087803b1580156130b457600080fd5b505af11580156130c8573d6000803e3d6000fd5b50505060738890555082547fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff167902000000000000000000000000000000000000000000000000001783556040805183815260208101839052815189927ffc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c928290030190a250505050505050565b6001600160a01b0381166000908152607660205260409020805461317a8382612cd7565b61318383613610565b60408051828152600060208201526001600160a01b038516917febd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde691015b60405180910390a2505050565b6001600160a01b03811660009081526077602052604081208054908290556078805482919084906131ff908490614155565b909155505060408051828152600060208201526001600160a01b038516917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a292915050565b6040516001600160a01b0383166024820152604481018290526118059084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613816565b6020810151600090815b602002015192915050565b3360009081526072602052604090205460ff168061332c5750607a5460ff165b6133685760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b6044820152606401610997565b61337061207d565b33600090815260766020526040902060020154600160401b900460ff16156133da5760405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f5354414b45440000000000000000000000000000000000006044820152606401610997565b611b4433826138fb565b607054611b44906001600160a01b0316333084613a12565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d613420565b3360009081526072602052604090205460ff16806134775750607a5460ff165b6134b35760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b6044820152606401610997565b6134bb61207d565b6001600160a01b038216600090815260766020526040902060020154600160401b900460ff1661351a5760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b6044820152606401610997565b6108f78282613a63565b600081602001516135388360000151613ada565b604051602001613549929190614509565b604051602081830303815290604052805190602001209050919050565b60208101516000906001613301565b805467ffffffffffffffff166000036135a557805467ffffffffffffffff19164367ffffffffffffffff16179055565b8054600160401b900467ffffffffffffffff16600003611b445780547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16600160401b4367ffffffffffffffff1602179055565b805160009081613301565b80516000906001613301565b6001600160a01b03811660009081526076602052604090206002810154600160401b900460ff166136705760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b6044820152606401610997565b60028101546075805467ffffffffffffffff9092169161369290600190614155565b815481106136a2576136a26142c0565b600091825260209091200154607580546001600160a01b039092169167ffffffffffffffff84169081106136d8576136d86142c0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806076600060758467ffffffffffffffff1681548110613728576137286142c0565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600201805467ffffffffffffffff191667ffffffffffffffff92909216919091179055607580548061378157613781614525565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559092019092556001600160a01b0394909416815260769093525050604081208181556001810191909155600201805468ffffffffffffffffff19169055565b600061386b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613b6a9092919063ffffffff16565b8051909150156118055780806020019051810190613889919061453b565b6118055760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610997565b6075805460018082019092557f9a8d93986a7b9e6294572ea6736696119c195c1a9f5eae642d3c5fcd44e49dea810180546001600160a01b0386167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051608081018252858152607354602082810191825267ffffffffffffffff80871684860190815260608501898152600088815260769094528684209551865593519885019890985596516002909301805492511515600160401b0268ffffffffffffffffff1990931693909716929092171790945551919290917febd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6916131c0918690918252602082015260400190565b6040516001600160a01b03808516602483015283166044820152606481018290526110029085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401613293565b6001600160a01b038216600090815260766020526040812080549091613a898483614389565b80845560408051848152602081018390529192506001600160a01b038716917febd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6910160405180910390a25050505050565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b166075820152600090607d01613549565b60606115e88484600085856001600160a01b0385163b613bcc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610997565b600080866001600160a01b03168587604051613be8919061436d565b60006040518083038185875af1925050503d8060008114613c25576040519150601f19603f3d011682016040523d82523d6000602084013e613c2a565b606091505b5091509150613c3a828286613c45565b979650505050505050565b60608315613c545750816115eb565b825115613c645782518084602001fd5b8160405162461bcd60e51b81526004016109979190614556565b6040518060400160405280613c91613ca3565b8152602001613c9e613ca3565b905290565b60405180604001604052806002906020820280368337509192915050565b600060a08284031215613cd357600080fd5b50919050565b60008060c08385031215613cec57600080fd5b82359150613cfd8460208501613cc1565b90509250929050565b600060208284031215613d1857600080fd5b5035919050565b60006102208284031215613cd357600080fd5b6000806102408385031215613d4657600080fd5b613d508484613d1f565b94610220939093013593505050565b6001600160a01b0381168114611b4457600080fd5b600060208284031215613d8657600080fd5b81356115eb81613d5f565b6000806000806101008587031215613da857600080fd5b8435935060208501359250613dc08660408701613cc1565b9396929550929360e00135925050565b6000806000806000806101c08789031215613dea57600080fd5b8635955060208701359450613e028860408901613cc1565b935060e08701359250613e19886101008901613cc1565b91506101a087013590509295509295509295565b600080600060e08486031215613e4257600080fd5b83359250613e538560208601613cc1565b915060c084013590509250925092565b67ffffffffffffffff81168114611b4457600080fd5b600060208284031215613e8b57600080fd5b81356115eb81613e63565b60008060006102608486031215613eac57600080fd5b83359250613ebd8560208601613d1f565b915061024084013590509250925092565b634e487b7160e01b600052602160045260246000fd5b60038110611b4457634e487b7160e01b600052602160045260246000fd5b600060c08201905067ffffffffffffffff808451168352806020850151166020840152806040850151166040840152506060830151151560608301526080830151613f4c81613ee4565b8060808401525060a083015160a083015292915050565b60008060408385031215613f7657600080fd5b8235613f8181613d5f565b946020939093013593505050565b6000806000806101008587031215613fa657600080fd5b84359350613fb78660208701613cc1565b939693955050505060c08201359160e0013590565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561400557614005613fcc565b60405290565b6040516101e0810167ffffffffffffffff8111828210171561400557614005613fcc565b60006080828403121561404157600080fd5b614049613fe2565b905082601f83011261405a57600080fd5b614062613fe2565b80604084018581111561407457600080fd5b845b8181101561408e578035845260209384019301614076565b5081845285605f8601126140a157600080fd5b6140a9613fe2565b925082915060808501868111156140bf57600080fd5b808210156140e45781356140d281613e63565b845260209384019391909101906140bf565b505060208301525092915050565b803560038110610a5f57600080fd5b600060a0828403121561411357600080fd5b61411b613fe2565b614125848461402f565b8152614133608084016140f2565b60208201529392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109a0576109a061413f565b67ffffffffffffffff8181168382160190808211156141895761418961413f565b5092915050565b8051610a5f81613d5f565b8051610a5f81613e63565b805160028110610a5f57600080fd5b805160ff81168114610a5f57600080fd5b80518015158114610a5f57600080fd5b60006101e082840312156141e957600080fd5b6141f161400b565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100614249818501614190565b9082015261012061425b84820161419b565b9082015261014061426d84820161419b565b9082015261016061427f8482016141a6565b908201526101806142918482016141b5565b908201526101a06142a38482016141c6565b908201526101c06142b584820161419b565b908201529392505050565b634e487b7160e01b600052603260045260246000fd5b6000608082840312156142e857600080fd5b6115eb838361402f565b67ffffffffffffffff8281168282160390808211156141895761418961413f565b60006020828403121561432557600080fd5b5051919050565b60006020828403121561433e57600080fd5b81516115eb81613d5f565b60005b8381101561436457818101518382015260200161434c565b50506000910152565b6000825161437f818460208701614349565b9190910192915050565b808201808211156109a0576109a061413f565b6000602082840312156143ae57600080fd5b6115eb826140f2565b6040818337604082016040820160005b60028110156143fa5781356143db81613e63565b67ffffffffffffffff16835260209283019291909101906001016143c7565b505050614409608082016140f2565b61441281613ee4565b806080840152505050565b60006102e08201905088358252602089013560208301526040890135604083015260608901356060830152608089013561445681613d5f565b6001600160a01b0316608083015260a089013561447281613e63565b67ffffffffffffffff90811660a084015260c08a01359061449282613e63565b1660c08301526144a860e0808401908b016143b7565b6101806144b9818401828c016143b7565b50876102208301528661024083015285610260830152846102808301526144ec6102a08301856001600160a01b03169052565b67ffffffffffffffff83166102c083015298975050505050505050565b61451283613ee4565b60f89290921b8252600182015260210190565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561454d57600080fd5b6115eb826141c6565b6020815260008251806020840152614575816040850160208701614349565b601f01601f1916919091016040019291505056fea2646970667358221220247bad63ef5954c8afaeed5662ba37d9bc3117f77d668f68fef5ad2b3182ccde64736f6c63430008110033",
}

// RollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupUserLogicMetaData.ABI instead.
var RollupUserLogicABI = RollupUserLogicMetaData.ABI

// RollupUserLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupUserLogicMetaData.Bin instead.
var RollupUserLogicBin = RollupUserLogicMetaData.Bin

// DeployRollupUserLogic deploys a new Ethereum contract, binding an instance of RollupUserLogic to it.
func DeployRollupUserLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupUserLogic, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupUserLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// RollupUserLogic is an auto generated Go binding around an Ethereum contract.
type RollupUserLogic struct {
	RollupUserLogicCaller     // Read-only binding to the contract
	RollupUserLogicTransactor // Write-only binding to the contract
	RollupUserLogicFilterer   // Log filterer for contract events
}

// RollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupUserLogicSession struct {
	Contract     *RollupUserLogic  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupUserLogicCallerSession struct {
	Contract *RollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// RollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupUserLogicTransactorSession struct {
	Contract     *RollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// RollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupUserLogicRaw struct {
	Contract *RollupUserLogic // Generic contract binding to access the raw methods on
}

// RollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupUserLogicCallerRaw struct {
	Contract *RollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactorRaw struct {
	Contract *RollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupUserLogic creates a new instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogic(address common.Address, backend bind.ContractBackend) (*RollupUserLogic, error) {
	contract, err := bindRollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// NewRollupUserLogicCaller creates a new read-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupUserLogicCaller, error) {
	contract, err := bindRollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicCaller{contract: contract}, nil
}

// NewRollupUserLogicTransactor creates a new write-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupUserLogicTransactor, error) {
	contract, err := bindRollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicTransactor{contract: contract}, nil
}

// NewRollupUserLogicFilterer creates a new log filterer instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupUserLogicFilterer, error) {
	contract, err := bindRollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicFilterer{contract: contract}, nil
}

// bindRollupUserLogic binds a generic wrapper to an already deployed contract.
func bindRollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.RollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupUserLogic *RollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupUserLogic *RollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupUserLogic.Contract.AnyTrustFastConfirmer(&_RollupUserLogic.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupUserLogic.Contract.AnyTrustFastConfirmer(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ChallengeGracePeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "challengeGracePeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ChallengeGracePeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ChallengeGracePeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x6b00cea9.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ComputeAssertionHash(opts *bind.CallOpts, prevAssertionHash [32]byte, state ExecutionState, inboxAcc [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "computeAssertionHash", prevAssertionHash, state, inboxAcc)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x6b00cea9.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ComputeAssertionHash(prevAssertionHash [32]byte, state ExecutionState, inboxAcc [32]byte) ([32]byte, error) {
	return _RollupUserLogic.Contract.ComputeAssertionHash(&_RollupUserLogic.CallOpts, prevAssertionHash, state, inboxAcc)
}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x6b00cea9.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ComputeAssertionHash(prevAssertionHash [32]byte, state ExecutionState, inboxAcc [32]byte) ([32]byte, error) {
	return _RollupUserLogic.Contract.ComputeAssertionHash(&_RollupUserLogic.CallOpts, prevAssertionHash, state, inboxAcc)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupUserLogic.Contract.GenesisAssertionHash(&_RollupUserLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupUserLogic.Contract.GenesisAssertionHash(&_RollupUserLogic.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupUserLogic.Contract.GetAssertion(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupUserLogic.Contract.GetAssertion(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetFirstChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetFirstChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetSecondChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetSecondChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupUserLogic *RollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupUserLogic *RollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) Initialize(opts *bind.CallOpts, _stakeToken common.Address) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "initialize", _stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsFirstChild(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsFirstChild(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsPending(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsPending(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) LatestConfirmed() ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestStakedAssertion(&_RollupUserLogic.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestStakedAssertion(&_RollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupUserLogic.Contract.ValidateAssertionHash(&_RollupUserLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xf9cee9df.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidateAssertionHash(assertionHash [32]byte, state ExecutionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupUserLogic.Contract.ValidateAssertionHash(&_RollupUserLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupUserLogic.Contract.ValidateConfig(&_RollupUserLogic.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupUserLogic.Contract.ValidateConfig(&_RollupUserLogic.CallOpts, assertionHash, configData)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "confirmAssertion", assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x4db519d4.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState ExecutionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x42500b85.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) FastConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "fastConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x42500b85.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicSession) FastConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x42500b85.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) FastConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState ExecutionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6e981c75.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) FastConfirmNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "fastConfirmNewAssertion", assertion, expectedAssertionHash)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6e981c75.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) FastConfirmNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6e981c75.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) FastConfirmNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnNewAssertion(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnNewAssertion", tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnNewAssertion(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion is a paid mutator transaction binding the contract method 0x76a61018.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnNewAssertion(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "returnOldDeposit")
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) StakeOnNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "stakeOnNewAssertion", assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x1cb64515.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// RollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupUserLogic contract.
type RollupUserLogicAdminChangedIterator struct {
	Event *RollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAdminChanged represents a AdminChanged event raised by the RollupUserLogic contract.
type RollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAdminChangedIterator{contract: _RollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAdminChanged)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*RollupUserLogicAdminChanged, error) {
	event := new(RollupUserLogicAdminChanged)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupUserLogic contract.
type RollupUserLogicAssertionConfirmedIterator struct {
	Event *RollupUserLogicAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAssertionConfirmed represents a AssertionConfirmed event raised by the RollupUserLogic contract.
type RollupUserLogicAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupUserLogicAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAssertionConfirmedIterator{contract: _RollupUserLogic.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAssertionConfirmed)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAssertionConfirmed(log types.Log) (*RollupUserLogicAssertionConfirmed, error) {
	event := new(RollupUserLogicAssertionConfirmed)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupUserLogic contract.
type RollupUserLogicAssertionCreatedIterator struct {
	Event *RollupUserLogicAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAssertionCreated represents a AssertionCreated event raised by the RollupUserLogic contract.
type RollupUserLogicAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupUserLogicAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAssertionCreatedIterator{contract: _RollupUserLogic.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAssertionCreated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0xcd735133b6109f5afd9a07ea21b0b073f930113d2218547a799ee2f879fb3697.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAssertionCreated(log types.Log) (*RollupUserLogicAssertionCreated, error) {
	event := new(RollupUserLogicAssertionCreated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgradedIterator struct {
	Event *RollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicBeaconUpgradedIterator{contract: _RollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicBeaconUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupUserLogicBeaconUpgraded, error) {
	event := new(RollupUserLogicBeaconUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupUserLogic contract.
type RollupUserLogicInitializedIterator struct {
	Event *RollupUserLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicInitialized represents a Initialized event raised by the RollupUserLogic contract.
type RollupUserLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupUserLogicInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicInitializedIterator{contract: _RollupUserLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseInitialized(log types.Log) (*RollupUserLogicInitialized, error) {
	event := new(RollupUserLogicInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupUserLogic contract.
type RollupUserLogicPausedIterator struct {
	Event *RollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicPaused represents a Paused event raised by the RollupUserLogic contract.
type RollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupUserLogicPausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicPausedIterator{contract: _RollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicPaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParsePaused(log types.Log) (*RollupUserLogicPaused, error) {
	event := new(RollupUserLogicPaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStartedIterator struct {
	Event *RollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupChallengeStartedIterator{contract: _RollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupChallengeStarted)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupUserLogicRollupChallengeStarted, error) {
	event := new(RollupUserLogicRollupChallengeStarted)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitializedIterator struct {
	Event *RollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupInitialized represents a RollupInitialized event raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupInitializedIterator{contract: _RollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupUserLogicRollupInitialized, error) {
	event := new(RollupUserLogicRollupInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupUserLogic contract.
type RollupUserLogicUnpausedIterator struct {
	Event *RollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUnpaused represents a Unpaused event raised by the RollupUserLogic contract.
type RollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUnpausedIterator{contract: _RollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUnpaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUnpaused(log types.Log) (*RollupUserLogicUnpaused, error) {
	event := new(RollupUserLogicUnpaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedIterator struct {
	Event *RollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgraded represents a Upgraded event raised by the RollupUserLogic contract.
type RollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedIterator{contract: _RollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgraded(log types.Log) (*RollupUserLogicUpgraded, error) {
	event := new(RollupUserLogicUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondaryIterator struct {
	Event *RollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedSecondaryIterator{contract: _RollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgradedSecondary)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupUserLogicUpgradedSecondary, error) {
	event := new(RollupUserLogicUpgradedSecondary)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdatedIterator struct {
	Event *RollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserStakeUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserStakeUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserStakeUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xebd093d389ab57f3566918d2c379a2b4d9539e8eb95efad9d5e465457833fde6.
//
// Solidity: event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupUserLogicUserStakeUpdated, error) {
	event := new(RollupUserLogicUserStakeUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserWithdrawableFundsUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupUserLogicUserWithdrawableFundsUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StateHashPreImageLookupMetaData contains all meta data concerning the StateHashPreImageLookup contract.
var StateHashPreImageLookupMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"structExecutionState\",\"name\":\"execState\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"HashSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"execState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"execState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"execState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stateHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610a0d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806331644130146100465780638eaa6ac01461006c578063945c94941461008d575b600080fd5b61005961005436600461041d565b6100a2565b6040519081526020015b60405180910390f35b61007f61007a366004610448565b610193565b604051610063929190610483565b6100a061009b36600461050a565b6102bf565b005b60006101526100b636859003850185610598565b8051805160209182015192820151805190830151604080517f476c6f62616c2073746174653a0000000000000000000000000000000000000081870152602d810194909452604d8401959095527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b8261016360a0860160808701610667565b6040516020016101759392919061068b565b60405160208183030381529060405280519060200120905092915050565b61019b6103ab565b600082815260208190526040812080546101b4906106c9565b80601f01602080910402602001604051908101604052809291908181526020018280546101e0906106c9565b801561022d5780601f106102025761010080835404028352916020019161022d565b820191906000526020600020905b81548152906001019060200180831161021057829003601f168201915b50505050508060200190518101906102459190610766565b909250905060008190036102ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f48617368206e6f7420796574207365740000000000000000000000000000000060448201526064015b60405180910390fd5b915091565b6102c982826100a2565b8314610331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642068617368000000000000000000000000000000000000000060448201526064016102b1565b818160405160200161034492919061088c565b60408051601f1981840301815291815260008581526020819052209061036a90826108f5565b507f14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad983838360405161039e939291906109b5565b60405180910390a1505050565b60405180604001604052806103be6103cb565b815260200160005b905290565b60405180604001604052806103de6103e7565b81526020016103c65b60405180604001604052806002906020820280368337509192915050565b600060a0828403121561041757600080fd5b50919050565b60008060c0838503121561043057600080fd5b61043a8484610405565b9460a0939093013593505050565b60006020828403121561045a57600080fd5b5035919050565b6003811061047f57634e487b7160e01b600052602160045260246000fd5b9052565b8251805160c0830191908360005b60028110156104b0578251825260209283019290910190600101610491565b505050602090810151906040840160005b60028110156104e857835167ffffffffffffffff16825292820192908201906001016104c1565b505085015190506104fc6080840182610461565b508260a08301529392505050565b600080600060e0848603121561051f57600080fd5b833592506105308560208601610405565b915060c084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561057957610579610540565b60405290565b67ffffffffffffffff8116811461059557600080fd5b50565b6000608082840312156105aa57600080fd5b6105b2610556565b83601f8401126105c157600080fd5b6105c9610556565b8060408501868111156105db57600080fd5b855b818110156105f55780358452602093840193016105dd565b5081845286605f87011261060857600080fd5b610610610556565b9250829150608086018781111561062657600080fd5b8082101561064b5781356106398161057f565b84526020938401939190910190610626565b50506020830152509392505050565b6003811061059557600080fd5b60006020828403121561067957600080fd5b81356106848161065a565b9392505050565b8381528260208201526000600383106106b457634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b600181811c908216806106dd57607f821691505b60208210810361041757634e487b7160e01b600052602260045260246000fd5b600082601f83011261070e57600080fd5b610716610556565b80604084018581111561072857600080fd5b845b8181101561074b57805161073d8161057f565b84526020938401930161072a565b509095945050505050565b80516107618161065a565b919050565b60008082840360c081121561077a57600080fd5b60a081121561078857600080fd5b610790610556565b608082121561079e57600080fd5b6107a6610556565b915085601f8601126107b757600080fd5b6107bf610556565b8060408701888111156107d157600080fd5b875b818110156107eb5780518452602093840193016107d3565b508185526107f989826106fd565b602086015250505081815261081060808601610756565b602082015260a094909401519395939450505050565b6040818337604082016040820160005b600281101561086957813561084a8161057f565b67ffffffffffffffff1683526020928301929190910190600101610836565b505050608081013561087a8161065a565b6108876080840182610461565b505050565b60c0810161089a8285610826565b8260a08301529392505050565b601f82111561088757600081815260208120601f850160051c810160208610156108ce5750805b601f850160051c820191505b818110156108ed578281556001016108da565b505050505050565b815167ffffffffffffffff81111561090f5761090f610540565b6109238161091d84546106c9565b846108a7565b602080601f83116001811461095857600084156109405750858301515b600019600386901b1c1916600185901b1785556108ed565b600085815260208120601f198616915b8281101561098757888601518255948401946001909101908401610968565b50858210156109a55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b83815260e081016109c96020830185610826565b8260c083015294935050505056fea2646970667358221220ad97beec20a6ef84efe62a198bb5494d56d46739a6a51a178b2cb58f8a758eb364736f6c63430008110033",
}

// StateHashPreImageLookupABI is the input ABI used to generate the binding from.
// Deprecated: Use StateHashPreImageLookupMetaData.ABI instead.
var StateHashPreImageLookupABI = StateHashPreImageLookupMetaData.ABI

// StateHashPreImageLookupBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StateHashPreImageLookupMetaData.Bin instead.
var StateHashPreImageLookupBin = StateHashPreImageLookupMetaData.Bin

// DeployStateHashPreImageLookup deploys a new Ethereum contract, binding an instance of StateHashPreImageLookup to it.
func DeployStateHashPreImageLookup(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StateHashPreImageLookup, error) {
	parsed, err := StateHashPreImageLookupMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StateHashPreImageLookupBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StateHashPreImageLookup{StateHashPreImageLookupCaller: StateHashPreImageLookupCaller{contract: contract}, StateHashPreImageLookupTransactor: StateHashPreImageLookupTransactor{contract: contract}, StateHashPreImageLookupFilterer: StateHashPreImageLookupFilterer{contract: contract}}, nil
}

// StateHashPreImageLookup is an auto generated Go binding around an Ethereum contract.
type StateHashPreImageLookup struct {
	StateHashPreImageLookupCaller     // Read-only binding to the contract
	StateHashPreImageLookupTransactor // Write-only binding to the contract
	StateHashPreImageLookupFilterer   // Log filterer for contract events
}

// StateHashPreImageLookupCaller is an auto generated read-only Go binding around an Ethereum contract.
type StateHashPreImageLookupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateHashPreImageLookupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StateHashPreImageLookupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateHashPreImageLookupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StateHashPreImageLookupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateHashPreImageLookupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StateHashPreImageLookupSession struct {
	Contract     *StateHashPreImageLookup // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StateHashPreImageLookupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StateHashPreImageLookupCallerSession struct {
	Contract *StateHashPreImageLookupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// StateHashPreImageLookupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StateHashPreImageLookupTransactorSession struct {
	Contract     *StateHashPreImageLookupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// StateHashPreImageLookupRaw is an auto generated low-level Go binding around an Ethereum contract.
type StateHashPreImageLookupRaw struct {
	Contract *StateHashPreImageLookup // Generic contract binding to access the raw methods on
}

// StateHashPreImageLookupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StateHashPreImageLookupCallerRaw struct {
	Contract *StateHashPreImageLookupCaller // Generic read-only contract binding to access the raw methods on
}

// StateHashPreImageLookupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StateHashPreImageLookupTransactorRaw struct {
	Contract *StateHashPreImageLookupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStateHashPreImageLookup creates a new instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookup(address common.Address, backend bind.ContractBackend) (*StateHashPreImageLookup, error) {
	contract, err := bindStateHashPreImageLookup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookup{StateHashPreImageLookupCaller: StateHashPreImageLookupCaller{contract: contract}, StateHashPreImageLookupTransactor: StateHashPreImageLookupTransactor{contract: contract}, StateHashPreImageLookupFilterer: StateHashPreImageLookupFilterer{contract: contract}}, nil
}

// NewStateHashPreImageLookupCaller creates a new read-only instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookupCaller(address common.Address, caller bind.ContractCaller) (*StateHashPreImageLookupCaller, error) {
	contract, err := bindStateHashPreImageLookup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupCaller{contract: contract}, nil
}

// NewStateHashPreImageLookupTransactor creates a new write-only instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookupTransactor(address common.Address, transactor bind.ContractTransactor) (*StateHashPreImageLookupTransactor, error) {
	contract, err := bindStateHashPreImageLookup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupTransactor{contract: contract}, nil
}

// NewStateHashPreImageLookupFilterer creates a new log filterer instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookupFilterer(address common.Address, filterer bind.ContractFilterer) (*StateHashPreImageLookupFilterer, error) {
	contract, err := bindStateHashPreImageLookup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupFilterer{contract: contract}, nil
}

// bindStateHashPreImageLookup binds a generic wrapper to an already deployed contract.
func bindStateHashPreImageLookup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StateHashPreImageLookupMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StateHashPreImageLookup *StateHashPreImageLookupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StateHashPreImageLookup.Contract.StateHashPreImageLookupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StateHashPreImageLookup *StateHashPreImageLookupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.StateHashPreImageLookupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StateHashPreImageLookup *StateHashPreImageLookupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.StateHashPreImageLookupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StateHashPreImageLookup *StateHashPreImageLookupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StateHashPreImageLookup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.contract.Transact(opts, method, params...)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 h) view returns(((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupCaller) Get(opts *bind.CallOpts, h [32]byte) (struct {
	ExecState     ExecutionState
	InboxMaxCount *big.Int
}, error) {
	var out []interface{}
	err := _StateHashPreImageLookup.contract.Call(opts, &out, "get", h)

	outstruct := new(struct {
		ExecState     ExecutionState
		InboxMaxCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ExecState = *abi.ConvertType(out[0], new(ExecutionState)).(*ExecutionState)
	outstruct.InboxMaxCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 h) view returns(((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupSession) Get(h [32]byte) (struct {
	ExecState     ExecutionState
	InboxMaxCount *big.Int
}, error) {
	return _StateHashPreImageLookup.Contract.Get(&_StateHashPreImageLookup.CallOpts, h)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 h) view returns(((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupCallerSession) Get(h [32]byte) (struct {
	ExecState     ExecutionState
	InboxMaxCount *big.Int
}, error) {
	return _StateHashPreImageLookup.Contract.Get(&_StateHashPreImageLookup.CallOpts, h)
}

// StateHash is a free data retrieval call binding the contract method 0x31644130.
//
// Solidity: function stateHash(((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount) pure returns(bytes32)
func (_StateHashPreImageLookup *StateHashPreImageLookupCaller) StateHash(opts *bind.CallOpts, execState ExecutionState, inboxMaxCount *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _StateHashPreImageLookup.contract.Call(opts, &out, "stateHash", execState, inboxMaxCount)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateHash is a free data retrieval call binding the contract method 0x31644130.
//
// Solidity: function stateHash(((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount) pure returns(bytes32)
func (_StateHashPreImageLookup *StateHashPreImageLookupSession) StateHash(execState ExecutionState, inboxMaxCount *big.Int) ([32]byte, error) {
	return _StateHashPreImageLookup.Contract.StateHash(&_StateHashPreImageLookup.CallOpts, execState, inboxMaxCount)
}

// StateHash is a free data retrieval call binding the contract method 0x31644130.
//
// Solidity: function stateHash(((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount) pure returns(bytes32)
func (_StateHashPreImageLookup *StateHashPreImageLookupCallerSession) StateHash(execState ExecutionState, inboxMaxCount *big.Int) ([32]byte, error) {
	return _StateHashPreImageLookup.Contract.StateHash(&_StateHashPreImageLookup.CallOpts, execState, inboxMaxCount)
}

// Set is a paid mutator transaction binding the contract method 0x945c9494.
//
// Solidity: function set(bytes32 h, ((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount) returns()
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactor) Set(opts *bind.TransactOpts, h [32]byte, execState ExecutionState, inboxMaxCount *big.Int) (*types.Transaction, error) {
	return _StateHashPreImageLookup.contract.Transact(opts, "set", h, execState, inboxMaxCount)
}

// Set is a paid mutator transaction binding the contract method 0x945c9494.
//
// Solidity: function set(bytes32 h, ((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount) returns()
func (_StateHashPreImageLookup *StateHashPreImageLookupSession) Set(h [32]byte, execState ExecutionState, inboxMaxCount *big.Int) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.Set(&_StateHashPreImageLookup.TransactOpts, h, execState, inboxMaxCount)
}

// Set is a paid mutator transaction binding the contract method 0x945c9494.
//
// Solidity: function set(bytes32 h, ((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount) returns()
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactorSession) Set(h [32]byte, execState ExecutionState, inboxMaxCount *big.Int) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.Set(&_StateHashPreImageLookup.TransactOpts, h, execState, inboxMaxCount)
}

// StateHashPreImageLookupHashSetIterator is returned from FilterHashSet and is used to iterate over the raw logs and unpacked data for HashSet events raised by the StateHashPreImageLookup contract.
type StateHashPreImageLookupHashSetIterator struct {
	Event *StateHashPreImageLookupHashSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StateHashPreImageLookupHashSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StateHashPreImageLookupHashSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StateHashPreImageLookupHashSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StateHashPreImageLookupHashSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StateHashPreImageLookupHashSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StateHashPreImageLookupHashSet represents a HashSet event raised by the StateHashPreImageLookup contract.
type StateHashPreImageLookupHashSet struct {
	H             [32]byte
	ExecState     ExecutionState
	InboxMaxCount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterHashSet is a free log retrieval operation binding the contract event 0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9.
//
// Solidity: event HashSet(bytes32 h, ((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupFilterer) FilterHashSet(opts *bind.FilterOpts) (*StateHashPreImageLookupHashSetIterator, error) {

	logs, sub, err := _StateHashPreImageLookup.contract.FilterLogs(opts, "HashSet")
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupHashSetIterator{contract: _StateHashPreImageLookup.contract, event: "HashSet", logs: logs, sub: sub}, nil
}

// WatchHashSet is a free log subscription operation binding the contract event 0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9.
//
// Solidity: event HashSet(bytes32 h, ((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupFilterer) WatchHashSet(opts *bind.WatchOpts, sink chan<- *StateHashPreImageLookupHashSet) (event.Subscription, error) {

	logs, sub, err := _StateHashPreImageLookup.contract.WatchLogs(opts, "HashSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StateHashPreImageLookupHashSet)
				if err := _StateHashPreImageLookup.contract.UnpackLog(event, "HashSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHashSet is a log parse operation binding the contract event 0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9.
//
// Solidity: event HashSet(bytes32 h, ((bytes32[2],uint64[2]),uint8) execState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupFilterer) ParseHashSet(log types.Log) (*StateHashPreImageLookupHashSet, error) {
	event := new(StateHashPreImageLookupHashSet)
	if err := _StateHashPreImageLookup.contract.UnpackLog(event, "HashSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletMetaData contains all meta data concerning the ValidatorWallet contract.
var ValidatorWalletMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"BadArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"NotExecutorOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"OnlyOwnerDestination\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawEthFail\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AllowedExecutorDestinationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExecutor\",\"type\":\"bool\"}],\"name\":\"ExecutorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedExecutorDestinations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransactionWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactionsWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isSet\",\"type\":\"bool[]\"}],\"name\":\"setAllowedExecutorDestinations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newExecutors\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isExecutor\",\"type\":\"bool[]\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOldChallengeManager\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"challenges\",\"type\":\"uint64[]\"}],\"name\":\"timeoutChallenges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"contractIOldChallengeManager\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"challenges\",\"type\":\"uint64[]\"}],\"name\":\"timeoutChallengesWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"validateExecuteTransaction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051611c4061003060003960006109520152611c406000f3fe6080604052600436106100f75760003560e01c80639ac2a0111161008a578063c179f1d911610059578063c179f1d91461029d578063ce1d571f146102b0578063d327821a146102c3578063f2fde38b146102e357600080fd5b80639ac2a0111461020d5780639be7bbd21461023d578063a158657c1461025d578063af1b9a071461027d57600080fd5b8063715018a6116100c6578063715018a61461019d57806372f45866146101b257806377a24f36146101c55780638da5cb5b146101e557600080fd5b8063097da1f8146101035780630a2435f814610118578063193c8edd146101385780633a7c721a1461017d57600080fd5b366100fe57005b600080fd5b6101166101113660046115be565b610303565b005b34801561012457600080fd5b50610116610133366004611673565b610580565b34801561014457600080fd5b506101686101533660046116df565b60666020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561018957600080fd5b50610116610198366004611673565b610703565b3480156101a957600080fd5b5061011661084d565b6101166101c0366004611703565b610861565b3480156101d157600080fd5b506101166101e036600461179d565b610879565b3480156101f157600080fd5b506033546040516001600160a01b039091168152602001610174565b34801561021957600080fd5b506101686102283660046116df565b60656020526000908152604090205460ff1681565b34801561024957600080fd5b506101166102583660046116df565b610b90565b34801561026957600080fd5b506101166102783660046117f6565b610c1b565b34801561028957600080fd5b50610116610298366004611826565b610cc0565b6101166102ab36600461187b565b610ccd565b6101166102be366004611928565b611058565b3480156102cf57600080fd5b506101166102de36600461179d565b61106c565b3480156102ef57600080fd5b506101166102fe3660046116df565b611309565b3360009081526065602052604090205460ff1615801561032e57506033546001600160a01b03163314155b1561037857335b6040517ff26aea8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b8460005a905084156103db576001600160a01b0384163b6103db5760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f414444520000000000000000000000000000000000604482015260640161036f565b6103e484610b90565b6000846001600160a01b0316848888604051610401929190611985565b60006040518083038185875af1925050503d806000811461043e576040519150601f19603f3d011682016040523d82523d6000602084013e610443565b606091505b5050905080610459576040513d806000833e8082fd5b506001600160a01b0382161561057757366000602061047983601f6119ab565b61048391906119c4565b9050610200610493600283611aca565b61049d91906119c4565b6104a8826006611ad9565b6104b291906119ab565b6104bc90846119ab565b92503332146104ca57600091505b836001600160a01b031663e3db8a49335a6104e59087611af0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af115801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190611b11565b5050505b50505050505050565b610588611396565b8281146105b25760405163088253c360e11b8152600481018490526024810182905260440161036f565b60005b67ffffffffffffffff81168411156106fc5782828267ffffffffffffffff168181106105e3576105e3611b2e565b90506020020160208101906105f89190611b44565b6065600087878567ffffffffffffffff1681811061061857610618611b2e565b905060200201602081019061062d91906116df565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055848467ffffffffffffffff831681811061067157610671611b2e565b905060200201602081019061068691906116df565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea284848467ffffffffffffffff168181106106cc576106cc611b2e565b90506020020160208101906106e19190611b44565b604051901515815260200160405180910390a26001016105b5565b5050505050565b61070b611396565b8281146107355760405163088253c360e11b8152600481018490526024810182905260440161036f565b60005b838110156106fc5782828281811061075257610752611b2e565b90506020020160208101906107679190611b44565b6066600087878581811061077d5761077d611b2e565b905060200201602081019061079291906116df565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558484828181106107cc576107cc611b2e565b90506020020160208101906107e191906116df565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a484848481811061081d5761081d611b2e565b90506020020160208101906108329190611b44565b604051901515815260200160405180910390a2600101610738565b610855611396565b61085f60006113f0565b565b6108716000878787878787610ccd565b505050505050565b600054610100900460ff16158080156108995750600054600160ff909116105b806108b35750303b1580156108b3575060005460ff166001145b6109255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161036f565b6000805460ff191660011790558015610948576000805461ff0019166101001790555b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109e65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161036f565b6109ee61145a565b6109f784611309565b6001600160a01b038516600081815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a260005b67ffffffffffffffff8116831115610b435760016066600086868567ffffffffffffffff16818110610a8857610a88611b2e565b9050602002016020810190610a9d91906116df565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055838367ffffffffffffffff8316818110610ae157610ae1611b2e565b9050602002016020810190610af691906116df565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610b33911515815260200190565b60405180910390a2600101610a54565b5080156106fc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6001600160a01b03811660009081526066602052604090205460ff16158015610bc457506033546001600160a01b03163314155b15610c18576033546040517f41fc6f8a0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152336024820152908216604482015260640161036f565b50565b610c23611396565b6000816001600160a01b03168360405160006040518083038185875af1925050503d8060008114610c70576040519150601f19603f3d011682016040523d82523d6000602084013e610c75565b606091505b5050905080610cbb576040517f7edbb4980000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240161036f565b505050565b610cbb600084848461106c565b3360009081526065602052604090205460ff16158015610cf857506033546001600160a01b03163314155b15610d035733610335565b8660005a905086858114610d345760405163088253c360e11b8152600481018290526024810187905260440161036f565b808414610d5e5760405163088253c360e11b8152600481018290526024810185905260440161036f565b60005b81811015610f2e5760008a8a83818110610d7d57610d7d611b2e565b9050602002810190610d8f9190611b61565b90501115610e1c57610dd0888883818110610dac57610dac611b2e565b9050602002016020810190610dc191906116df565b6001600160a01b03163b151590565b610e1c5760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f414444520000000000000000000000000000000000604482015260640161036f565b610e46888883818110610e3157610e31611b2e565b905060200201602081019061025891906116df565b6000888883818110610e5a57610e5a611b2e565b9050602002016020810190610e6f91906116df565b6001600160a01b0316878784818110610e8a57610e8a611b2e565b905060200201358c8c85818110610ea357610ea3611b2e565b9050602002810190610eb59190611b61565b604051610ec3929190611985565b60006040518083038185875af1925050503d8060008114610f00576040519150601f19603f3d011682016040523d82523d6000602084013e610f05565b606091505b5050905080610f1b576040513d806000833e8082fd5b5080610f2681611bc6565b915050610d61565b50506001600160a01b0382161561104d573660006020610f4f83601f6119ab565b610f5991906119c4565b9050610200610f69600283611aca565b610f7391906119c4565b610f7e826006611ad9565b610f8891906119ab565b610f9290846119ab565b9250333214610fa057600091505b836001600160a01b031663e3db8a49335a610fbb9087611af0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af1158015611025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110499190611b11565b5050505b505050505050505050565b611066600085858585610303565b50505050565b3360009081526065602052604090205460ff1615801561109757506033546001600160a01b03163314155b156110a25733610335565b8360005a90508260005b818110156111ee57866001600160a01b0316631b45c86a8787848181106110d5576110d5611b2e565b90506020020160208101906110ea9190611be0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401600060405180830381600087803b15801561114457600080fd5b505af1925050508015611155575060015b6111dc573d808015611183576040519150601f19603f3d011682016040523d82523d6000602084013e611188565b606091505b5080516000036111da5760405162461bcd60e51b815260206004820152600360248201527f4741530000000000000000000000000000000000000000000000000000000000604482015260640161036f565b505b806111e681611bc6565b9150506110ac565b50506001600160a01b0382161561087157366000602061120f83601f6119ab565b61121991906119c4565b9050610200611229600283611aca565b61123391906119c4565b61123e826006611ad9565b61124891906119ab565b61125290846119ab565b925033321461126057600091505b836001600160a01b031663e3db8a49335a61127b9087611af0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af11580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d9190611b11565b611311611396565b6001600160a01b03811661138d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161036f565b610c18816113f0565b6033546001600160a01b0316331461085f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161036f565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161036f565b61085f600054610100900460ff166115575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161036f565b61085f336113f0565b6001600160a01b0381168114610c1857600080fd5b60008083601f84011261158757600080fd5b50813567ffffffffffffffff81111561159f57600080fd5b6020830191508360208285010111156115b757600080fd5b9250929050565b6000806000806000608086880312156115d657600080fd5b85356115e181611560565b9450602086013567ffffffffffffffff8111156115fd57600080fd5b61160988828901611575565b909550935050604086013561161d81611560565b949793965091946060013592915050565b60008083601f84011261164057600080fd5b50813567ffffffffffffffff81111561165857600080fd5b6020830191508360208260051b85010111156115b757600080fd5b6000806000806040858703121561168957600080fd5b843567ffffffffffffffff808211156116a157600080fd5b6116ad8883890161162e565b909650945060208701359150808211156116c657600080fd5b506116d38782880161162e565b95989497509550505050565b6000602082840312156116f157600080fd5b81356116fc81611560565b9392505050565b6000806000806000806060878903121561171c57600080fd5b863567ffffffffffffffff8082111561173457600080fd5b6117408a838b0161162e565b9098509650602089013591508082111561175957600080fd5b6117658a838b0161162e565b9096509450604089013591508082111561177e57600080fd5b5061178b89828a0161162e565b979a9699509497509295939492505050565b600080600080606085870312156117b357600080fd5b84356117be81611560565b935060208501356117ce81611560565b9250604085013567ffffffffffffffff8111156117ea57600080fd5b6116d38782880161162e565b6000806040838503121561180957600080fd5b82359150602083013561181b81611560565b809150509250929050565b60008060006040848603121561183b57600080fd5b833561184681611560565b9250602084013567ffffffffffffffff81111561186257600080fd5b61186e8682870161162e565b9497909650939450505050565b60008060008060008060006080888a03121561189657600080fd5b87356118a181611560565b9650602088013567ffffffffffffffff808211156118be57600080fd5b6118ca8b838c0161162e565b909850965060408a01359150808211156118e357600080fd5b6118ef8b838c0161162e565b909650945060608a013591508082111561190857600080fd5b506119158a828b0161162e565b989b979a50959850939692959293505050565b6000806000806060858703121561193e57600080fd5b843567ffffffffffffffff81111561195557600080fd5b61196187828801611575565b909550935050602085013561197581611560565b9396929550929360400135925050565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156119be576119be611995565b92915050565b6000826119e157634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115611a21578160001904821115611a0757611a07611995565b80851615611a1457918102915b93841c93908002906119eb565b509250929050565b600082611a38575060016119be565b81611a45575060006119be565b8160018114611a5b5760028114611a6557611a81565b60019150506119be565b60ff841115611a7657611a76611995565b50506001821b6119be565b5060208310610133831016604e8410600b8410161715611aa4575081810a6119be565b611aae83836119e6565b8060001904821115611ac257611ac2611995565b029392505050565b60006116fc60ff841683611a29565b80820281158282048414176119be576119be611995565b818103818111156119be576119be611995565b8015158114610c1857600080fd5b600060208284031215611b2357600080fd5b81516116fc81611b03565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611b5657600080fd5b81356116fc81611b03565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b9657600080fd5b83018035915067ffffffffffffffff821115611bb157600080fd5b6020019150368190038213156115b757600080fd5b60006000198203611bd957611bd9611995565b5060010190565b600060208284031215611bf257600080fd5b813567ffffffffffffffff811681146116fc57600080fdfea26469706673582212200d8503f54e233f5e4b8a43d8f591d35d49a9703fdc0ead514ccc6e9e15ee419564736f6c63430008110033",
}

// ValidatorWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletMetaData.ABI instead.
var ValidatorWalletABI = ValidatorWalletMetaData.ABI

// ValidatorWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletMetaData.Bin instead.
var ValidatorWalletBin = ValidatorWalletMetaData.Bin

// DeployValidatorWallet deploys a new Ethereum contract, binding an instance of ValidatorWallet to it.
func DeployValidatorWallet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWallet, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// ValidatorWallet is an auto generated Go binding around an Ethereum contract.
type ValidatorWallet struct {
	ValidatorWalletCaller     // Read-only binding to the contract
	ValidatorWalletTransactor // Write-only binding to the contract
	ValidatorWalletFilterer   // Log filterer for contract events
}

// ValidatorWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletSession struct {
	Contract     *ValidatorWallet  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCallerSession struct {
	Contract *ValidatorWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ValidatorWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletTransactorSession struct {
	Contract     *ValidatorWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletRaw struct {
	Contract *ValidatorWallet // Generic contract binding to access the raw methods on
}

// ValidatorWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCallerRaw struct {
	Contract *ValidatorWalletCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactorRaw struct {
	Contract *ValidatorWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWallet creates a new instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWallet(address common.Address, backend bind.ContractBackend) (*ValidatorWallet, error) {
	contract, err := bindValidatorWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// NewValidatorWalletCaller creates a new read-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCaller, error) {
	contract, err := bindValidatorWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCaller{contract: contract}, nil
}

// NewValidatorWalletTransactor creates a new write-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletTransactor, error) {
	contract, err := bindValidatorWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletTransactor{contract: contract}, nil
}

// NewValidatorWalletFilterer creates a new log filterer instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletFilterer, error) {
	contract, err := bindValidatorWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletFilterer{contract: contract}, nil
}

// bindValidatorWallet binds a generic wrapper to an already deployed contract.
func bindValidatorWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.ValidatorWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transact(opts, method, params...)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) AllowedExecutorDestinations(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "allowedExecutorDestinations", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) Executors(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "executors", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCallerSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCaller) ValidateExecuteTransaction(opts *bind.CallOpts, destination common.Address) error {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "validateExecuteTransaction", destination)

	if err != nil {
		return err
	}

	return err

}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCallerSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransaction(opts *bind.TransactOpts, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransaction", data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactions(opts *bind.TransactOpts, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactions", data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionsWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionsWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Initialize(opts *bind.TransactOpts, _executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "initialize", _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetAllowedExecutorDestinations(opts *bind.TransactOpts, destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setAllowedExecutorDestinations", destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetExecutor(opts *bind.TransactOpts, newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setExecutor", newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TimeoutChallenges(opts *bind.TransactOpts, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "timeoutChallenges", manager, challenges)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletSession) TimeoutChallenges(manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallenges(&_ValidatorWallet.TransactOpts, manager, challenges)
}

// TimeoutChallenges is a paid mutator transaction binding the contract method 0xaf1b9a07.
//
// Solidity: function timeoutChallenges(address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TimeoutChallenges(manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallenges(&_ValidatorWallet.TransactOpts, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TimeoutChallengesWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "timeoutChallengesWithGasRefunder", gasRefunder, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletSession) TimeoutChallengesWithGasRefunder(gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallengesWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, manager, challenges)
}

// TimeoutChallengesWithGasRefunder is a paid mutator transaction binding the contract method 0xd327821a.
//
// Solidity: function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TimeoutChallengesWithGasRefunder(gasRefunder common.Address, manager common.Address, challenges []uint64) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TimeoutChallengesWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, manager, challenges)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) WithdrawEth(opts *bind.TransactOpts, amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "withdrawEth", amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// ValidatorWalletAllowedExecutorDestinationsUpdatedIterator is returned from FilterAllowedExecutorDestinationsUpdated and is used to iterate over the raw logs and unpacked data for AllowedExecutorDestinationsUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdatedIterator struct {
	Event *ValidatorWalletAllowedExecutorDestinationsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletAllowedExecutorDestinationsUpdated represents a AllowedExecutorDestinationsUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdated struct {
	Destination common.Address
	IsSet       bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAllowedExecutorDestinationsUpdated is a free log retrieval operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterAllowedExecutorDestinationsUpdated(opts *bind.FilterOpts, destination []common.Address) (*ValidatorWalletAllowedExecutorDestinationsUpdatedIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletAllowedExecutorDestinationsUpdatedIterator{contract: _ValidatorWallet.contract, event: "AllowedExecutorDestinationsUpdated", logs: logs, sub: sub}, nil
}

// WatchAllowedExecutorDestinationsUpdated is a free log subscription operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchAllowedExecutorDestinationsUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletAllowedExecutorDestinationsUpdated, destination []common.Address) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowedExecutorDestinationsUpdated is a log parse operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseAllowedExecutorDestinationsUpdated(log types.Log) (*ValidatorWalletAllowedExecutorDestinationsUpdated, error) {
	event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletExecutorUpdatedIterator is returned from FilterExecutorUpdated and is used to iterate over the raw logs and unpacked data for ExecutorUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdatedIterator struct {
	Event *ValidatorWalletExecutorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletExecutorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletExecutorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletExecutorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletExecutorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletExecutorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletExecutorUpdated represents a ExecutorUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdated struct {
	Executor   common.Address
	IsExecutor bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecutorUpdated is a free log retrieval operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterExecutorUpdated(opts *bind.FilterOpts, executor []common.Address) (*ValidatorWalletExecutorUpdatedIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletExecutorUpdatedIterator{contract: _ValidatorWallet.contract, event: "ExecutorUpdated", logs: logs, sub: sub}, nil
}

// WatchExecutorUpdated is a free log subscription operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchExecutorUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletExecutorUpdated, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletExecutorUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutorUpdated is a log parse operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseExecutorUpdated(log types.Log) (*ValidatorWalletExecutorUpdated, error) {
	event := new(ValidatorWalletExecutorUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ValidatorWallet contract.
type ValidatorWalletInitializedIterator struct {
	Event *ValidatorWalletInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletInitialized represents a Initialized event raised by the ValidatorWallet contract.
type ValidatorWalletInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterInitialized(opts *bind.FilterOpts) (*ValidatorWalletInitializedIterator, error) {

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletInitializedIterator{contract: _ValidatorWallet.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ValidatorWalletInitialized) (event.Subscription, error) {

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletInitialized)
				if err := _ValidatorWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseInitialized(log types.Log) (*ValidatorWalletInitialized, error) {
	event := new(ValidatorWalletInitialized)
	if err := _ValidatorWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferredIterator struct {
	Event *ValidatorWalletOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletOwnershipTransferredIterator{contract: _ValidatorWallet.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletOwnershipTransferred)
				if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletOwnershipTransferred, error) {
	event := new(ValidatorWalletOwnershipTransferred)
	if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorMetaData contains all meta data concerning the ValidatorWalletCreator contract.
var ValidatorWalletCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"setTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a33610068565b604051610026906100b8565b604051809103906000f080158015610042573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03929092169190911790556100c5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611c7080611e3b83390190565b611d67806100d46000396000f3fe60806040523480156200001157600080fd5b50600436106200007b5760003560e01c806389c716d1116200005657806389c716d114620000d35780638da5cb5b14620000ea578063f2fde38b14620000fc57600080fd5b80631cf89b4b14620000805780636f2ddd9314620000b3578063715018a614620000c7575b600080fd5b62000097620000913660046200052d565b62000113565b6040516001600160a01b03909116815260200160405180910390f35b60015462000097906001600160a01b031681565b620000d1620002fe565b005b620000d1620000e4366004620005c4565b62000316565b6000546001600160a01b031662000097565b620000d16200010d366004620005c4565b6200037f565b6040516000903390819083906200012a9062000511565b604051809103906000f08015801562000147573d6000803e3d6000fd5b506001546040519192506000916001600160a01b039091169083906200016d906200051f565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f080158015620001b0573d6000803e3d6000fd5b506040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192509083169063f2fde38b90602401600060405180830381600087803b1580156200021257600080fd5b505af115801562000227573d6000803e3d6000fd5b50506040517f77a24f360000000000000000000000000000000000000000000000000000000081526001600160a01b03841692506377a24f3691506200027890879087908c908c90600401620005e9565b600060405180830381600087803b1580156200029357600080fd5b505af1158015620002a8573d6000803e3d6000fd5b50506040516001600160a01b038581168252808716935087811692508416907f7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee489060200160405180910390a49695505050505050565b6200030862000433565b620003146000620004a9565b565b6200032062000433565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517f6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc90600090a150565b6200038962000433565b6001600160a01b03811662000425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6200043081620004a9565b50565b6000546001600160a01b0316331462000314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200041c565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61080b806200065483390190565b610ed38062000e5f83390190565b600080602083850312156200054157600080fd5b823567ffffffffffffffff808211156200055a57600080fd5b818501915085601f8301126200056f57600080fd5b8135818111156200057f57600080fd5b8660208260051b85010111156200059557600080fd5b60209290920196919550909350505050565b80356001600160a01b0381168114620005bf57600080fd5b919050565b600060208284031215620005d757600080fd5b620005e282620005a7565b9392505050565b6000606082016001600160a01b038088168452602081881681860152606060408601528286845260808601905087935060005b878110156200064557836200063186620005a7565b16825293820193908201906001016200061c565b50999850505050505050505056fe608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61078d8061007e6000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead1461016457600080fd5b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610579565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d161022e565b005b3480156100df57600080fd5b506100d16100ee36600461059d565b610242565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f366004610605565b6102c3565b34801561013057600080fd5b506100d161013f36600461059d565b61034b565b34801561015057600080fd5b506100d161015f366004610579565b61039a565b34801561017057600080fd5b506100a061017f366004610579565b610449565b6000806000836001600160a01b03166040516101c3907f5c60da1b00000000000000000000000000000000000000000000000000000000815260040190565b600060405180830381855afa9150503d80600081146101fe576040519150601f19603f3d011682016040523d82523d6000602084013e610203565b606091505b50915091508161021257600080fd5b8080602001905181019061022691906106db565b949350505050565b610236610488565b61024060006104fc565b565b61024a610488565b6040517f8f2839700000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050505050565b6102cb610488565b6040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef28690349061031490869086906004016106f8565b6000604051808303818588803b15801561032d57600080fd5b505af1158015610341573d6000803e3d6000fd5b5050505050505050565b610353610488565b6040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690633659cfe69060240161028d565b6103a2610488565b6001600160a01b03811661043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610446816104fc565b50565b6000806000836001600160a01b03166040516101c3907ff851a44000000000000000000000000000000000000000000000000000000000815260040190565b6000546001600160a01b03163314610240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610434565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461044657600080fd5b60006020828403121561058b57600080fd5b813561059681610564565b9392505050565b600080604083850312156105b057600080fd5b82356105bb81610564565b915060208301356105cb81610564565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561061a57600080fd5b833561062581610564565b9250602084013561063581610564565b9150604084013567ffffffffffffffff8082111561065257600080fd5b818601915086601f83011261066657600080fd5b813581811115610678576106786105d6565b604051601f8201601f19908116603f011681019083821181831017156106a0576106a06105d6565b816040528281528960208487010111156106b957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156106ed57600080fd5b815161059681610564565b6001600160a01b038316815260006020604081840152835180604085015260005b8181101561073557858101830151858201606001528201610719565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220b5f17b9b80290312697ad0c26141bee28c1a1e448364e9044054c3ec2b5708bd64736f6c63430008110033608060405260405162000ed338038062000ed3833981016040819052620000269162000487565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ba565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b6200023e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000eac60279139620002f8565b9392505050565b60006200018060008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200026a1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620001fa1760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000567565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f1919062000585565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b50506000910152565b6000806000606084860312156200049d57600080fd5b620004a8846200042e565b9250620004b8602085016200042e565b60408501519092506001600160401b0380821115620004d657600080fd5b818601915086601f830112620004eb57600080fd5b8151818111156200050057620005006200044b565b604051601f8201601f19908116603f011681019083821181831017156200052b576200052b6200044b565b816040528281528960208487010111156200054557600080fd5b6200055883602083016020880162000461565b80955050505050509250925092565b600082516200057b81846020870162000461565b9190910192915050565b6020815260008251806020840152620005a681604085016020870162000461565b601f01601f19169190910160400192915050565b6108c280620005ca6000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100d9578063f851a440146100f95761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61010e565b005b61006b61010e565b34801561008157600080fd5b5061006b610090366004610736565b610128565b61006b6100a3366004610751565b610165565b3480156100b457600080fd5b506100bd6101cc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e557600080fd5b5061006b6100f4366004610736565b6101fd565b34801561010557600080fd5b506100bd61021d565b610116610279565b610126610121610329565b610333565b565b610130610357565b6001600160a01b0316330361015d5761015a8160405180602001604052806000815250600061038a565b50565b61015a61010e565b61016d610357565b6001600160a01b031633036101c4576101bf8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061038a915050565b505050565b6101bf61010e565b60006101d6610357565b6001600160a01b031633036101f2576101ed610329565b905090565b6101fa61010e565b90565b610205610357565b6001600160a01b0316330361015d5761015a816103b5565b6000610227610357565b6001600160a01b031633036101f2576101ed610357565b6060610263838360405180606001604052806027815260200161086660279139610409565b9392505050565b6001600160a01b03163b151590565b610281610357565b6001600160a01b031633036101265760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60006101ed6104fd565b3660008037600080366000845af43d6000803e808015610352573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039383610525565b6000825111806103a05750805b156101bf576103af838361023e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103de610357565b604080516001600160a01b03928316815291841660208301520160405180910390a161015a81610565565b60606001600160a01b0384163b6104885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610320565b600080856001600160a01b0316856040516104a391906107f8565b600060405180830381855af49150503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50915091506104f382828661063d565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61037b565b61052e81610676565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105e15760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610320565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6060831561064c575081610263565b82511561065c5782518084602001fd5b8160405162461bcd60e51b81526004016103209190610814565b6001600160a01b0381163b6106f35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610320565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610604565b80356001600160a01b038116811461073157600080fd5b919050565b60006020828403121561074857600080fd5b6102638261071a565b60008060006040848603121561076657600080fd5b61076f8461071a565b9250602084013567ffffffffffffffff8082111561078c57600080fd5b818601915086601f8301126107a057600080fd5b8135818111156107af57600080fd5b8760208285010111156107c157600080fd5b6020830194508093505050509250925092565b60005b838110156107ef5781810151838201526020016107d7565b50506000910152565b6000825161080a8184602087016107d4565b9190910192915050565b60208152600082518060208401526108338160408501602087016107d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c1888b421836e473bfc3e72d153dc5c76569ce769e37cfa444506490e142daa564736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208f57a0e8b126dcb96ab1b0d27827f023f682b1c5a3836c76be086a53e0076a0264736f6c6343000811003360a06040523060805234801561001457600080fd5b50608051611c4061003060003960006109520152611c406000f3fe6080604052600436106100f75760003560e01c80639ac2a0111161008a578063c179f1d911610059578063c179f1d91461029d578063ce1d571f146102b0578063d327821a146102c3578063f2fde38b146102e357600080fd5b80639ac2a0111461020d5780639be7bbd21461023d578063a158657c1461025d578063af1b9a071461027d57600080fd5b8063715018a6116100c6578063715018a61461019d57806372f45866146101b257806377a24f36146101c55780638da5cb5b146101e557600080fd5b8063097da1f8146101035780630a2435f814610118578063193c8edd146101385780633a7c721a1461017d57600080fd5b366100fe57005b600080fd5b6101166101113660046115be565b610303565b005b34801561012457600080fd5b50610116610133366004611673565b610580565b34801561014457600080fd5b506101686101533660046116df565b60666020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561018957600080fd5b50610116610198366004611673565b610703565b3480156101a957600080fd5b5061011661084d565b6101166101c0366004611703565b610861565b3480156101d157600080fd5b506101166101e036600461179d565b610879565b3480156101f157600080fd5b506033546040516001600160a01b039091168152602001610174565b34801561021957600080fd5b506101686102283660046116df565b60656020526000908152604090205460ff1681565b34801561024957600080fd5b506101166102583660046116df565b610b90565b34801561026957600080fd5b506101166102783660046117f6565b610c1b565b34801561028957600080fd5b50610116610298366004611826565b610cc0565b6101166102ab36600461187b565b610ccd565b6101166102be366004611928565b611058565b3480156102cf57600080fd5b506101166102de36600461179d565b61106c565b3480156102ef57600080fd5b506101166102fe3660046116df565b611309565b3360009081526065602052604090205460ff1615801561032e57506033546001600160a01b03163314155b1561037857335b6040517ff26aea8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b8460005a905084156103db576001600160a01b0384163b6103db5760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f414444520000000000000000000000000000000000604482015260640161036f565b6103e484610b90565b6000846001600160a01b0316848888604051610401929190611985565b60006040518083038185875af1925050503d806000811461043e576040519150601f19603f3d011682016040523d82523d6000602084013e610443565b606091505b5050905080610459576040513d806000833e8082fd5b506001600160a01b0382161561057757366000602061047983601f6119ab565b61048391906119c4565b9050610200610493600283611aca565b61049d91906119c4565b6104a8826006611ad9565b6104b291906119ab565b6104bc90846119ab565b92503332146104ca57600091505b836001600160a01b031663e3db8a49335a6104e59087611af0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af115801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190611b11565b5050505b50505050505050565b610588611396565b8281146105b25760405163088253c360e11b8152600481018490526024810182905260440161036f565b60005b67ffffffffffffffff81168411156106fc5782828267ffffffffffffffff168181106105e3576105e3611b2e565b90506020020160208101906105f89190611b44565b6065600087878567ffffffffffffffff1681811061061857610618611b2e565b905060200201602081019061062d91906116df565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055848467ffffffffffffffff831681811061067157610671611b2e565b905060200201602081019061068691906116df565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea284848467ffffffffffffffff168181106106cc576106cc611b2e565b90506020020160208101906106e19190611b44565b604051901515815260200160405180910390a26001016105b5565b5050505050565b61070b611396565b8281146107355760405163088253c360e11b8152600481018490526024810182905260440161036f565b60005b838110156106fc5782828281811061075257610752611b2e565b90506020020160208101906107679190611b44565b6066600087878581811061077d5761077d611b2e565b905060200201602081019061079291906116df565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558484828181106107cc576107cc611b2e565b90506020020160208101906107e191906116df565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a484848481811061081d5761081d611b2e565b90506020020160208101906108329190611b44565b604051901515815260200160405180910390a2600101610738565b610855611396565b61085f60006113f0565b565b6108716000878787878787610ccd565b505050505050565b600054610100900460ff16158080156108995750600054600160ff909116105b806108b35750303b1580156108b3575060005460ff166001145b6109255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161036f565b6000805460ff191660011790558015610948576000805461ff0019166101001790555b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109e65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161036f565b6109ee61145a565b6109f784611309565b6001600160a01b038516600081815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a260005b67ffffffffffffffff8116831115610b435760016066600086868567ffffffffffffffff16818110610a8857610a88611b2e565b9050602002016020810190610a9d91906116df565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055838367ffffffffffffffff8316818110610ae157610ae1611b2e565b9050602002016020810190610af691906116df565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610b33911515815260200190565b60405180910390a2600101610a54565b5080156106fc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6001600160a01b03811660009081526066602052604090205460ff16158015610bc457506033546001600160a01b03163314155b15610c18576033546040517f41fc6f8a0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152336024820152908216604482015260640161036f565b50565b610c23611396565b6000816001600160a01b03168360405160006040518083038185875af1925050503d8060008114610c70576040519150601f19603f3d011682016040523d82523d6000602084013e610c75565b606091505b5050905080610cbb576040517f7edbb4980000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240161036f565b505050565b610cbb600084848461106c565b3360009081526065602052604090205460ff16158015610cf857506033546001600160a01b03163314155b15610d035733610335565b8660005a905086858114610d345760405163088253c360e11b8152600481018290526024810187905260440161036f565b808414610d5e5760405163088253c360e11b8152600481018290526024810185905260440161036f565b60005b81811015610f2e5760008a8a83818110610d7d57610d7d611b2e565b9050602002810190610d8f9190611b61565b90501115610e1c57610dd0888883818110610dac57610dac611b2e565b9050602002016020810190610dc191906116df565b6001600160a01b03163b151590565b610e1c5760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f414444520000000000000000000000000000000000604482015260640161036f565b610e46888883818110610e3157610e31611b2e565b905060200201602081019061025891906116df565b6000888883818110610e5a57610e5a611b2e565b9050602002016020810190610e6f91906116df565b6001600160a01b0316878784818110610e8a57610e8a611b2e565b905060200201358c8c85818110610ea357610ea3611b2e565b9050602002810190610eb59190611b61565b604051610ec3929190611985565b60006040518083038185875af1925050503d8060008114610f00576040519150601f19603f3d011682016040523d82523d6000602084013e610f05565b606091505b5050905080610f1b576040513d806000833e8082fd5b5080610f2681611bc6565b915050610d61565b50506001600160a01b0382161561104d573660006020610f4f83601f6119ab565b610f5991906119c4565b9050610200610f69600283611aca565b610f7391906119c4565b610f7e826006611ad9565b610f8891906119ab565b610f9290846119ab565b9250333214610fa057600091505b836001600160a01b031663e3db8a49335a610fbb9087611af0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af1158015611025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110499190611b11565b5050505b505050505050505050565b611066600085858585610303565b50505050565b3360009081526065602052604090205460ff1615801561109757506033546001600160a01b03163314155b156110a25733610335565b8360005a90508260005b818110156111ee57866001600160a01b0316631b45c86a8787848181106110d5576110d5611b2e565b90506020020160208101906110ea9190611be0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401600060405180830381600087803b15801561114457600080fd5b505af1925050508015611155575060015b6111dc573d808015611183576040519150601f19603f3d011682016040523d82523d6000602084013e611188565b606091505b5080516000036111da5760405162461bcd60e51b815260206004820152600360248201527f4741530000000000000000000000000000000000000000000000000000000000604482015260640161036f565b505b806111e681611bc6565b9150506110ac565b50506001600160a01b0382161561087157366000602061120f83601f6119ab565b61121991906119c4565b9050610200611229600283611aca565b61123391906119c4565b61123e826006611ad9565b61124891906119ab565b61125290846119ab565b925033321461126057600091505b836001600160a01b031663e3db8a49335a61127b9087611af0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af11580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d9190611b11565b611311611396565b6001600160a01b03811661138d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161036f565b610c18816113f0565b6033546001600160a01b0316331461085f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161036f565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161036f565b61085f600054610100900460ff166115575760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161036f565b61085f336113f0565b6001600160a01b0381168114610c1857600080fd5b60008083601f84011261158757600080fd5b50813567ffffffffffffffff81111561159f57600080fd5b6020830191508360208285010111156115b757600080fd5b9250929050565b6000806000806000608086880312156115d657600080fd5b85356115e181611560565b9450602086013567ffffffffffffffff8111156115fd57600080fd5b61160988828901611575565b909550935050604086013561161d81611560565b949793965091946060013592915050565b60008083601f84011261164057600080fd5b50813567ffffffffffffffff81111561165857600080fd5b6020830191508360208260051b85010111156115b757600080fd5b6000806000806040858703121561168957600080fd5b843567ffffffffffffffff808211156116a157600080fd5b6116ad8883890161162e565b909650945060208701359150808211156116c657600080fd5b506116d38782880161162e565b95989497509550505050565b6000602082840312156116f157600080fd5b81356116fc81611560565b9392505050565b6000806000806000806060878903121561171c57600080fd5b863567ffffffffffffffff8082111561173457600080fd5b6117408a838b0161162e565b9098509650602089013591508082111561175957600080fd5b6117658a838b0161162e565b9096509450604089013591508082111561177e57600080fd5b5061178b89828a0161162e565b979a9699509497509295939492505050565b600080600080606085870312156117b357600080fd5b84356117be81611560565b935060208501356117ce81611560565b9250604085013567ffffffffffffffff8111156117ea57600080fd5b6116d38782880161162e565b6000806040838503121561180957600080fd5b82359150602083013561181b81611560565b809150509250929050565b60008060006040848603121561183b57600080fd5b833561184681611560565b9250602084013567ffffffffffffffff81111561186257600080fd5b61186e8682870161162e565b9497909650939450505050565b60008060008060008060006080888a03121561189657600080fd5b87356118a181611560565b9650602088013567ffffffffffffffff808211156118be57600080fd5b6118ca8b838c0161162e565b909850965060408a01359150808211156118e357600080fd5b6118ef8b838c0161162e565b909650945060608a013591508082111561190857600080fd5b506119158a828b0161162e565b989b979a50959850939692959293505050565b6000806000806060858703121561193e57600080fd5b843567ffffffffffffffff81111561195557600080fd5b61196187828801611575565b909550935050602085013561197581611560565b9396929550929360400135925050565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156119be576119be611995565b92915050565b6000826119e157634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115611a21578160001904821115611a0757611a07611995565b80851615611a1457918102915b93841c93908002906119eb565b509250929050565b600082611a38575060016119be565b81611a45575060006119be565b8160018114611a5b5760028114611a6557611a81565b60019150506119be565b60ff841115611a7657611a76611995565b50506001821b6119be565b5060208310610133831016604e8410600b8410161715611aa4575081810a6119be565b611aae83836119e6565b8060001904821115611ac257611ac2611995565b029392505050565b60006116fc60ff841683611a29565b80820281158282048414176119be576119be611995565b818103818111156119be576119be611995565b8015158114610c1857600080fd5b600060208284031215611b2357600080fd5b81516116fc81611b03565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611b5657600080fd5b81356116fc81611b03565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611b9657600080fd5b83018035915067ffffffffffffffff821115611bb157600080fd5b6020019150368190038213156115b757600080fd5b60006000198203611bd957611bd9611995565b5060010190565b600060208284031215611bf257600080fd5b813567ffffffffffffffff811681146116fc57600080fdfea26469706673582212200d8503f54e233f5e4b8a43d8f591d35d49a9703fdc0ead514ccc6e9e15ee419564736f6c63430008110033",
}

// ValidatorWalletCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletCreatorMetaData.ABI instead.
var ValidatorWalletCreatorABI = ValidatorWalletCreatorMetaData.ABI

// ValidatorWalletCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletCreatorMetaData.Bin instead.
var ValidatorWalletCreatorBin = ValidatorWalletCreatorMetaData.Bin

// DeployValidatorWalletCreator deploys a new Ethereum contract, binding an instance of ValidatorWalletCreator to it.
func DeployValidatorWalletCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWalletCreator, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// ValidatorWalletCreator is an auto generated Go binding around an Ethereum contract.
type ValidatorWalletCreator struct {
	ValidatorWalletCreatorCaller     // Read-only binding to the contract
	ValidatorWalletCreatorTransactor // Write-only binding to the contract
	ValidatorWalletCreatorFilterer   // Log filterer for contract events
}

// ValidatorWalletCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletCreatorSession struct {
	Contract     *ValidatorWalletCreator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCreatorCallerSession struct {
	Contract *ValidatorWalletCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ValidatorWalletCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletCreatorTransactorSession struct {
	Contract     *ValidatorWalletCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletCreatorRaw struct {
	Contract *ValidatorWalletCreator // Generic contract binding to access the raw methods on
}

// ValidatorWalletCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCallerRaw struct {
	Contract *ValidatorWalletCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactorRaw struct {
	Contract *ValidatorWalletCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWalletCreator creates a new instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreator(address common.Address, backend bind.ContractBackend) (*ValidatorWalletCreator, error) {
	contract, err := bindValidatorWalletCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// NewValidatorWalletCreatorCaller creates a new read-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCreatorCaller, error) {
	contract, err := bindValidatorWalletCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorCaller{contract: contract}, nil
}

// NewValidatorWalletCreatorTransactor creates a new write-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletCreatorTransactor, error) {
	contract, err := bindValidatorWalletCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTransactor{contract: contract}, nil
}

// NewValidatorWalletCreatorFilterer creates a new log filterer instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletCreatorFilterer, error) {
	contract, err := bindValidatorWalletCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorFilterer{contract: contract}, nil
}

// bindValidatorWalletCreator binds a generic wrapper to an already deployed contract.
func bindValidatorWalletCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Template(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "template")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) CreateWallet(opts *bind.TransactOpts, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "createWallet", initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) SetTemplate(opts *bind.TransactOpts, _template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "setTemplate", _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// ValidatorWalletCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferredIterator struct {
	Event *ValidatorWalletCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorOwnershipTransferredIterator{contract: _ValidatorWalletCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorOwnershipTransferred)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletCreatorOwnershipTransferred, error) {
	event := new(ValidatorWalletCreatorOwnershipTransferred)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorTemplateUpdatedIterator is returned from FilterTemplateUpdated and is used to iterate over the raw logs and unpacked data for TemplateUpdated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdatedIterator struct {
	Event *ValidatorWalletCreatorTemplateUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorTemplateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorTemplateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorTemplateUpdated represents a TemplateUpdated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplateUpdated is a free log retrieval operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterTemplateUpdated(opts *bind.FilterOpts) (*ValidatorWalletCreatorTemplateUpdatedIterator, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTemplateUpdatedIterator{contract: _ValidatorWalletCreator.contract, event: "TemplateUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplateUpdated is a free log subscription operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchTemplateUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorTemplateUpdated) (event.Subscription, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorTemplateUpdated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplateUpdated is a log parse operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseTemplateUpdated(log types.Log) (*ValidatorWalletCreatorTemplateUpdated, error) {
	event := new(ValidatorWalletCreatorTemplateUpdated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorWalletCreatedIterator is returned from FilterWalletCreated and is used to iterate over the raw logs and unpacked data for WalletCreated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreatedIterator struct {
	Event *ValidatorWalletCreatorWalletCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorWalletCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorWalletCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorWalletCreated represents a WalletCreated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreated struct {
	WalletAddress   common.Address
	ExecutorAddress common.Address
	OwnerAddress    common.Address
	AdminProxy      common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWalletCreated is a free log retrieval operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterWalletCreated(opts *bind.FilterOpts, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (*ValidatorWalletCreatorWalletCreatedIterator, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorWalletCreatedIterator{contract: _ValidatorWalletCreator.contract, event: "WalletCreated", logs: logs, sub: sub}, nil
}

// WatchWalletCreated is a free log subscription operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchWalletCreated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorWalletCreated, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (event.Subscription, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorWalletCreated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWalletCreated is a log parse operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseWalletCreated(log types.Log) (*ValidatorWalletCreatorWalletCreated, error) {
	event := new(ValidatorWalletCreatorWalletCreated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
