// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package rollupgen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AssertionInputs is an auto generated low-level Go binding around an user-defined struct.
type AssertionInputs struct {
	BeforeStateData BeforeStateData
	BeforeState     AssertionState
	AfterState      AssertionState
}

// AssertionNode is an auto generated low-level Go binding around an user-defined struct.
type AssertionNode struct {
	FirstChildBlock  uint64
	SecondChildBlock uint64
	CreatedAtBlock   uint64
	IsFirstChild     bool
	Status           uint8
	ConfigHash       [32]byte
}

// AssertionState is an auto generated low-level Go binding around an user-defined struct.
type AssertionState struct {
	GlobalState    GlobalState
	MachineStatus  uint8
	EndHistoryRoot [32]byte
}

// BOLDUpgradeActionContracts is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionContracts struct {
	L1Timelock       common.Address
	Rollup           common.Address
	Bridge           common.Address
	SequencerInbox   common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
	Inbox            common.Address
	Osp              common.Address
}

// BOLDUpgradeActionImplementations is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionImplementations struct {
	Bridge           common.Address
	SeqInbox         common.Address
	Inbox            common.Address
	Rei              common.Address
	Outbox           common.Address
	OldRollupUser    common.Address
	NewRollupUser    common.Address
	NewRollupAdmin   common.Address
	ChallengeManager common.Address
}

// BOLDUpgradeActionProxyAdmins is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionProxyAdmins struct {
	Outbox   common.Address
	Bridge   common.Address
	Rei      common.Address
	SeqInbox common.Address
	Inbox    common.Address
}

// BOLDUpgradeActionSettings is an auto generated low-level Go binding around an user-defined struct.
type BOLDUpgradeActionSettings struct {
	ConfirmPeriodBlocks        uint64
	ChallengePeriodBlocks      uint64
	StakeToken                 common.Address
	StakeAmt                   *big.Int
	MiniStakeAmounts           []*big.Int
	ChainId                    *big.Int
	AnyTrustFastConfirmer      common.Address
	DisableValidatorWhitelist  bool
	BlockLeafSize              *big.Int
	BigStepLeafSize            *big.Int
	SmallStepLeafSize          *big.Int
	NumBigStepLevel            uint8
	ChallengeGracePeriodBlocks uint64
	IsDelayBufferable          bool
	BufferConfig               BufferConfig
}

// BeforeStateData is an auto generated low-level Go binding around an user-defined struct.
type BeforeStateData struct {
	PrevPrevAssertionHash [32]byte
	SequencerBatchAcc     [32]byte
	ConfigData            ConfigData
}

// BridgeCreatorBridgeContracts is an auto generated low-level Go binding around an user-defined struct.
type BridgeCreatorBridgeContracts struct {
	Bridge           common.Address
	Inbox            common.Address
	SequencerInbox   common.Address
	RollupEventInbox common.Address
	Outbox           common.Address
}

// BridgeCreatorBridgeTemplates is an auto generated low-level Go binding around an user-defined struct.
type BridgeCreatorBridgeTemplates struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}

// BufferConfig is an auto generated low-level Go binding around an user-defined struct.
type BufferConfig struct {
	Threshold            uint64
	Max                  uint64
	ReplenishRateInBasis uint64
}

// Config is an auto generated low-level Go binding around an user-defined struct.
type Config struct {
	ConfirmPeriodBlocks            uint64
	StakeToken                     common.Address
	BaseStake                      *big.Int
	WasmModuleRoot                 [32]byte
	Owner                          common.Address
	LoserStakeEscrow               common.Address
	ChainId                        *big.Int
	ChainConfig                    string
	MiniStakeValues                []*big.Int
	SequencerInboxMaxTimeVariation ISequencerInboxMaxTimeVariation
	LayerZeroBlockEdgeHeight       *big.Int
	LayerZeroBigStepEdgeHeight     *big.Int
	LayerZeroSmallStepEdgeHeight   *big.Int
	GenesisAssertionState          AssertionState
	GenesisInboxCount              *big.Int
	AnyTrustFastConfirmer          common.Address
	NumBigStepLevel                uint8
	ChallengeGracePeriodBlocks     uint64
	BufferConfig                   BufferConfig
}

// ConfigData is an auto generated low-level Go binding around an user-defined struct.
type ConfigData struct {
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	NextInboxPosition   uint64
}

// ContractDependencies is an auto generated low-level Go binding around an user-defined struct.
type ContractDependencies struct {
	Bridge                 common.Address
	SequencerInbox         common.Address
	Inbox                  common.Address
	Outbox                 common.Address
	RollupEventInbox       common.Address
	ChallengeManager       common.Address
	RollupAdminLogic       common.Address
	RollupUserLogic        common.Address
	ValidatorWalletCreator common.Address
}

// ExecutionState is an auto generated low-level Go binding around an user-defined struct.
type ExecutionState struct {
	GlobalState   GlobalState
	MachineStatus uint8
}

// GlobalState is an auto generated low-level Go binding around an user-defined struct.
type GlobalState struct {
	Bytes32Vals [2][32]byte
	U64Vals     [2]uint64
}

// IOldRollupAssertion is an auto generated low-level Go binding around an user-defined struct.
type IOldRollupAssertion struct {
	BeforeState ExecutionState
	AfterState  ExecutionState
	NumBlocks   uint64
}

// IRollupCoreStaker is an auto generated low-level Go binding around an user-defined struct.
type IRollupCoreStaker struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}

// ISequencerInboxMaxTimeVariation is an auto generated low-level Go binding around an user-defined struct.
type ISequencerInboxMaxTimeVariation struct {
	DelayBlocks   *big.Int
	FutureBlocks  *big.Int
	DelaySeconds  *big.Int
	FutureSeconds *big.Int
}

// Node is an auto generated low-level Go binding around an user-defined struct.
type Node struct {
	StateHash                   [32]byte
	ChallengeHash               [32]byte
	ConfirmData                 [32]byte
	PrevNum                     uint64
	DeadlineBlock               uint64
	NoChildConfirmedBeforeBlock uint64
	StakerCount                 uint64
	ChildStakerCount            uint64
	FirstChildBlock             uint64
	LatestChildNumber           uint64
	CreatedAtBlock              uint64
	NodeHash                    [32]byte
}

// OldStaker is an auto generated low-level Go binding around an user-defined struct.
type OldStaker struct {
	AmountStaked     *big.Int
	Index            uint64
	LatestStakedNode uint64
	CurrentChallenge uint64
	IsStaked         bool
}

// RollupCreatorRollupDeploymentParams is an auto generated low-level Go binding around an user-defined struct.
type RollupCreatorRollupDeploymentParams struct {
	Config                    Config
	Validators                []common.Address
	MaxDataSize               *big.Int
	NativeToken               common.Address
	DeployFactoriesToL2       bool
	MaxFeePerGasForRetryables *big.Int
	BatchPosters              []common.Address
	BatchPosterManager        common.Address
}

// AbsRollupEventInboxMetaData contains all meta data concerning the AbsRollupEventInbox contract.
var AbsRollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// AbsRollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use AbsRollupEventInboxMetaData.ABI instead.
var AbsRollupEventInboxABI = AbsRollupEventInboxMetaData.ABI

// AbsRollupEventInbox is an auto generated Go binding around an Ethereum contract.
type AbsRollupEventInbox struct {
	AbsRollupEventInboxCaller     // Read-only binding to the contract
	AbsRollupEventInboxTransactor // Write-only binding to the contract
	AbsRollupEventInboxFilterer   // Log filterer for contract events
}

// AbsRollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type AbsRollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AbsRollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AbsRollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbsRollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AbsRollupEventInboxSession struct {
	Contract     *AbsRollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// AbsRollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AbsRollupEventInboxCallerSession struct {
	Contract *AbsRollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// AbsRollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AbsRollupEventInboxTransactorSession struct {
	Contract     *AbsRollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// AbsRollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type AbsRollupEventInboxRaw struct {
	Contract *AbsRollupEventInbox // Generic contract binding to access the raw methods on
}

// AbsRollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AbsRollupEventInboxCallerRaw struct {
	Contract *AbsRollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// AbsRollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AbsRollupEventInboxTransactorRaw struct {
	Contract *AbsRollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAbsRollupEventInbox creates a new instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInbox(address common.Address, backend bind.ContractBackend) (*AbsRollupEventInbox, error) {
	contract, err := bindAbsRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInbox{AbsRollupEventInboxCaller: AbsRollupEventInboxCaller{contract: contract}, AbsRollupEventInboxTransactor: AbsRollupEventInboxTransactor{contract: contract}, AbsRollupEventInboxFilterer: AbsRollupEventInboxFilterer{contract: contract}}, nil
}

// NewAbsRollupEventInboxCaller creates a new read-only instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*AbsRollupEventInboxCaller, error) {
	contract, err := bindAbsRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxCaller{contract: contract}, nil
}

// NewAbsRollupEventInboxTransactor creates a new write-only instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*AbsRollupEventInboxTransactor, error) {
	contract, err := bindAbsRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxTransactor{contract: contract}, nil
}

// NewAbsRollupEventInboxFilterer creates a new log filterer instance of AbsRollupEventInbox, bound to a specific deployed contract.
func NewAbsRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*AbsRollupEventInboxFilterer, error) {
	contract, err := bindAbsRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxFilterer{contract: contract}, nil
}

// bindAbsRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindAbsRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AbsRollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupEventInbox *AbsRollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupEventInbox.Contract.AbsRollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupEventInbox *AbsRollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.AbsRollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupEventInbox *AbsRollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.AbsRollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AbsRollupEventInbox *AbsRollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AbsRollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) Bridge() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Bridge(&_AbsRollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Bridge(&_AbsRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AbsRollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) Rollup() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Rollup(&_AbsRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_AbsRollupEventInbox *AbsRollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _AbsRollupEventInbox.Contract.Rollup(&_AbsRollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _AbsRollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.Initialize(&_AbsRollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.Initialize(&_AbsRollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _AbsRollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.RollupInitialized(&_AbsRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.RollupInitialized(&_AbsRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AbsRollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.UpdateRollupAddress(&_AbsRollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_AbsRollupEventInbox *AbsRollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _AbsRollupEventInbox.Contract.UpdateRollupAddress(&_AbsRollupEventInbox.TransactOpts)
}

// AbsRollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDeliveredIterator struct {
	Event *AbsRollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*AbsRollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxInboxMessageDeliveredIterator{contract: _AbsRollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *AbsRollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupEventInboxInboxMessageDelivered)
				if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*AbsRollupEventInboxInboxMessageDelivered, error) {
	event := new(AbsRollupEventInboxInboxMessageDelivered)
	if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *AbsRollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbsRollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the AbsRollupEventInbox contract.
type AbsRollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &AbsRollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _AbsRollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *AbsRollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _AbsRollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_AbsRollupEventInbox *AbsRollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*AbsRollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(AbsRollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _AbsRollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AssertionNodeLibMetaData contains all meta data concerning the AssertionNodeLib contract.
var AssertionNodeLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122019622c458ea1e2872a72b98fac88beaa6f1462c989dabdb37768c6afd4d2a19664736f6c63430008110033",
}

// AssertionNodeLibABI is the input ABI used to generate the binding from.
// Deprecated: Use AssertionNodeLibMetaData.ABI instead.
var AssertionNodeLibABI = AssertionNodeLibMetaData.ABI

// AssertionNodeLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AssertionNodeLibMetaData.Bin instead.
var AssertionNodeLibBin = AssertionNodeLibMetaData.Bin

// DeployAssertionNodeLib deploys a new Ethereum contract, binding an instance of AssertionNodeLib to it.
func DeployAssertionNodeLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AssertionNodeLib, error) {
	parsed, err := AssertionNodeLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AssertionNodeLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AssertionNodeLib{AssertionNodeLibCaller: AssertionNodeLibCaller{contract: contract}, AssertionNodeLibTransactor: AssertionNodeLibTransactor{contract: contract}, AssertionNodeLibFilterer: AssertionNodeLibFilterer{contract: contract}}, nil
}

// AssertionNodeLib is an auto generated Go binding around an Ethereum contract.
type AssertionNodeLib struct {
	AssertionNodeLibCaller     // Read-only binding to the contract
	AssertionNodeLibTransactor // Write-only binding to the contract
	AssertionNodeLibFilterer   // Log filterer for contract events
}

// AssertionNodeLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type AssertionNodeLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AssertionNodeLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AssertionNodeLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionNodeLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AssertionNodeLibSession struct {
	Contract     *AssertionNodeLib // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AssertionNodeLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AssertionNodeLibCallerSession struct {
	Contract *AssertionNodeLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// AssertionNodeLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AssertionNodeLibTransactorSession struct {
	Contract     *AssertionNodeLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// AssertionNodeLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type AssertionNodeLibRaw struct {
	Contract *AssertionNodeLib // Generic contract binding to access the raw methods on
}

// AssertionNodeLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AssertionNodeLibCallerRaw struct {
	Contract *AssertionNodeLibCaller // Generic read-only contract binding to access the raw methods on
}

// AssertionNodeLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AssertionNodeLibTransactorRaw struct {
	Contract *AssertionNodeLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAssertionNodeLib creates a new instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLib(address common.Address, backend bind.ContractBackend) (*AssertionNodeLib, error) {
	contract, err := bindAssertionNodeLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLib{AssertionNodeLibCaller: AssertionNodeLibCaller{contract: contract}, AssertionNodeLibTransactor: AssertionNodeLibTransactor{contract: contract}, AssertionNodeLibFilterer: AssertionNodeLibFilterer{contract: contract}}, nil
}

// NewAssertionNodeLibCaller creates a new read-only instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibCaller(address common.Address, caller bind.ContractCaller) (*AssertionNodeLibCaller, error) {
	contract, err := bindAssertionNodeLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibCaller{contract: contract}, nil
}

// NewAssertionNodeLibTransactor creates a new write-only instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibTransactor(address common.Address, transactor bind.ContractTransactor) (*AssertionNodeLibTransactor, error) {
	contract, err := bindAssertionNodeLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibTransactor{contract: contract}, nil
}

// NewAssertionNodeLibFilterer creates a new log filterer instance of AssertionNodeLib, bound to a specific deployed contract.
func NewAssertionNodeLibFilterer(address common.Address, filterer bind.ContractFilterer) (*AssertionNodeLibFilterer, error) {
	contract, err := bindAssertionNodeLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AssertionNodeLibFilterer{contract: contract}, nil
}

// bindAssertionNodeLib binds a generic wrapper to an already deployed contract.
func bindAssertionNodeLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AssertionNodeLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionNodeLib *AssertionNodeLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionNodeLib.Contract.AssertionNodeLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionNodeLib *AssertionNodeLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.AssertionNodeLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionNodeLib *AssertionNodeLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.AssertionNodeLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionNodeLib *AssertionNodeLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionNodeLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionNodeLib *AssertionNodeLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionNodeLib *AssertionNodeLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionNodeLib.Contract.contract.Transact(opts, method, params...)
}

// AssertionStateLibMetaData contains all meta data concerning the AssertionStateLib contract.
var AssertionStateLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e5acc0556b54abe140a5e7a2ccc610ddaff33421ed665ed04a2a71b8964b4e3264736f6c63430008110033",
}

// AssertionStateLibABI is the input ABI used to generate the binding from.
// Deprecated: Use AssertionStateLibMetaData.ABI instead.
var AssertionStateLibABI = AssertionStateLibMetaData.ABI

// AssertionStateLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AssertionStateLibMetaData.Bin instead.
var AssertionStateLibBin = AssertionStateLibMetaData.Bin

// DeployAssertionStateLib deploys a new Ethereum contract, binding an instance of AssertionStateLib to it.
func DeployAssertionStateLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AssertionStateLib, error) {
	parsed, err := AssertionStateLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AssertionStateLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AssertionStateLib{AssertionStateLibCaller: AssertionStateLibCaller{contract: contract}, AssertionStateLibTransactor: AssertionStateLibTransactor{contract: contract}, AssertionStateLibFilterer: AssertionStateLibFilterer{contract: contract}}, nil
}

// AssertionStateLib is an auto generated Go binding around an Ethereum contract.
type AssertionStateLib struct {
	AssertionStateLibCaller     // Read-only binding to the contract
	AssertionStateLibTransactor // Write-only binding to the contract
	AssertionStateLibFilterer   // Log filterer for contract events
}

// AssertionStateLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type AssertionStateLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionStateLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AssertionStateLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionStateLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AssertionStateLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AssertionStateLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AssertionStateLibSession struct {
	Contract     *AssertionStateLib // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AssertionStateLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AssertionStateLibCallerSession struct {
	Contract *AssertionStateLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// AssertionStateLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AssertionStateLibTransactorSession struct {
	Contract     *AssertionStateLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// AssertionStateLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type AssertionStateLibRaw struct {
	Contract *AssertionStateLib // Generic contract binding to access the raw methods on
}

// AssertionStateLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AssertionStateLibCallerRaw struct {
	Contract *AssertionStateLibCaller // Generic read-only contract binding to access the raw methods on
}

// AssertionStateLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AssertionStateLibTransactorRaw struct {
	Contract *AssertionStateLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAssertionStateLib creates a new instance of AssertionStateLib, bound to a specific deployed contract.
func NewAssertionStateLib(address common.Address, backend bind.ContractBackend) (*AssertionStateLib, error) {
	contract, err := bindAssertionStateLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AssertionStateLib{AssertionStateLibCaller: AssertionStateLibCaller{contract: contract}, AssertionStateLibTransactor: AssertionStateLibTransactor{contract: contract}, AssertionStateLibFilterer: AssertionStateLibFilterer{contract: contract}}, nil
}

// NewAssertionStateLibCaller creates a new read-only instance of AssertionStateLib, bound to a specific deployed contract.
func NewAssertionStateLibCaller(address common.Address, caller bind.ContractCaller) (*AssertionStateLibCaller, error) {
	contract, err := bindAssertionStateLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionStateLibCaller{contract: contract}, nil
}

// NewAssertionStateLibTransactor creates a new write-only instance of AssertionStateLib, bound to a specific deployed contract.
func NewAssertionStateLibTransactor(address common.Address, transactor bind.ContractTransactor) (*AssertionStateLibTransactor, error) {
	contract, err := bindAssertionStateLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AssertionStateLibTransactor{contract: contract}, nil
}

// NewAssertionStateLibFilterer creates a new log filterer instance of AssertionStateLib, bound to a specific deployed contract.
func NewAssertionStateLibFilterer(address common.Address, filterer bind.ContractFilterer) (*AssertionStateLibFilterer, error) {
	contract, err := bindAssertionStateLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AssertionStateLibFilterer{contract: contract}, nil
}

// bindAssertionStateLib binds a generic wrapper to an already deployed contract.
func bindAssertionStateLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AssertionStateLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionStateLib *AssertionStateLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionStateLib.Contract.AssertionStateLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionStateLib *AssertionStateLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionStateLib.Contract.AssertionStateLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionStateLib *AssertionStateLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionStateLib.Contract.AssertionStateLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AssertionStateLib *AssertionStateLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AssertionStateLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AssertionStateLib *AssertionStateLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AssertionStateLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AssertionStateLib *AssertionStateLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AssertionStateLib.Contract.contract.Transact(opts, method, params...)
}

// BOLDUpgradeActionMetaData contains all meta data concerning the BOLDUpgradeAction contract.
var BOLDUpgradeActionMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"l1Timelock\",\"type\":\"address\"},{\"internalType\":\"contractIOldRollup\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"osp\",\"type\":\"address\"}],\"internalType\":\"structBOLDUpgradeAction.Contracts\",\"name\":\"contracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rei\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seqInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"}],\"internalType\":\"structBOLDUpgradeAction.ProxyAdmins\",\"name\":\"proxyAdmins\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seqInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rei\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldRollupUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRollupUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRollupAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"}],\"internalType\":\"structBOLDUpgradeAction.Implementations\",\"name\":\"implementations\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"challengePeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"disableValidatorWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeafSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bigStepLeafSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"smallStepLeafSize\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isDelayBufferable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"}],\"internalType\":\"structBOLDUpgradeAction.Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"}],\"name\":\"RollupMigrated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANY_TRUST_FAST_CONFIRMER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BIGSTEP_LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCK_LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGE_GRACE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGE_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIRM_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLE_VALIDATOR_WHITELIST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_CHALLENGE_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_NEW_ROLLUP_ADMIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_NEW_ROLLUP_USER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_OUTBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_PATCHED_OLD_ROLLUP_USER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_REI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMPL_SEQUENCER_INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_DELAY_BUFFERABLE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L1_TIMELOCK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINI_STAKE_AMOUNTS_STORAGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_BIGSTEP_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLD_ROLLUP\",\"outputs\":[{\"internalType\":\"contractIOldRollup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OSP\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUTBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREIMAGE_LOOKUP\",\"outputs\":[{\"internalType\":\"contractStateHashPreImageLookup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_BRIDGE\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_INBOX\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_OUTBOX\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_REI\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ADMIN_SEQUENCER_INBOX\",\"outputs\":[{\"internalType\":\"contractProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPLENISH_RATE_IN_BASIS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLLUP_READER\",\"outputs\":[{\"internalType\":\"contractRollupReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQ_INBOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMALLSTEP_LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6105a06040523480156200001257600080fd5b5060405162007f0338038062007f0383398101604081905262000035916200079c565b83516001600160a01b039081166101005260208086015182166101205260408087015183166101405260608088015184166101605260808089015185166101805260a089015185166101a05260c089015185166101c05260e0890151851661038052875185166103a0529287015184166103c0528682015184166103e052860151831661040052908501519091166104205251620000d390620002c2565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b506001600160a01b03166104405260208401516040516200011190620002d0565b6001600160a01b039091168152602001604051809103906000f0801580156200013e573d6000803e3d6000fd5b506001600160a01b0390811661046052825181166104805260208084015182166104a05260408085015183166104c05260608086015184166104e05260808087015185166105005260a08088015186166105205260c088015186166105405260e08801518616610560526101008801518616610580528601516102605285516001600160401b039081166101e0529386015190931661020052848201519093166102205291830151610240528201519051620001fa90620002de565b620002069190620008c3565b604051809103906000f08015801562000223573d6000803e3d6000fd5b506001600160a01b039081166102e05260c0808301519091166102805260e08083015115156102a05261010083015160805261012083015160a05261014083015190915261016082015160ff1690526101808101516001600160401b039081166102c0526101a08201511515610300526101c0909101805160200151821661032052805151821661034052516040015116610360525062000909915050565b610a2d806200665383390190565b610be3806200708083390190565b6102a08062007c6383390190565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715620003285762000328620002ec565b60405290565b6040516101e081016001600160401b0381118282101715620003285762000328620002ec565b60405161010081016001600160401b0381118282101715620003285762000328620002ec565b6001600160a01b03811681146200039057600080fd5b50565b8051620003a0816200037a565b919050565b600060a08284031215620003b857600080fd5b60405160a081016001600160401b0381118282101715620003dd57620003dd620002ec565b80604052508091508251620003f2816200037a565b8152602083015162000404816200037a565b6020820152604083015162000419816200037a565b604082015260608301516200042e816200037a565b6060820152608083015162000443816200037a565b6080919091015292915050565b600061012082840312156200046457600080fd5b6200046e62000302565b90506200047b8262000393565b81526200048b6020830162000393565b60208201526200049e6040830162000393565b6040820152620004b16060830162000393565b6060820152620004c46080830162000393565b6080820152620004d760a0830162000393565b60a0820152620004ea60c0830162000393565b60c0820152620004fd60e0830162000393565b60e08201526101006200051281840162000393565b9082015292915050565b80516001600160401b0381168114620003a057600080fd5b600082601f8301126200054657600080fd5b815160206001600160401b0380831115620005655762000565620002ec565b8260051b604051601f19603f830116810181811084821117156200058d576200058d620002ec565b604052938452858101830193838101925087851115620005ac57600080fd5b83870191505b84821015620005cd57815183529183019190830190620005b2565b979650505050505050565b80518015158114620003a057600080fd5b805160ff81168114620003a057600080fd5b6000606082840312156200060e57600080fd5b604051606081016001600160401b0381118282101715620006335762000633620002ec565b60405290508062000644836200051c565b815262000654602084016200051c565b602082015262000667604084016200051c565b60408201525092915050565b600061022082840312156200068757600080fd5b620006916200032e565b90506200069e826200051c565b8152620006ae602083016200051c565b6020820152620006c16040830162000393565b60408201526060828101519082015260808201516001600160401b03811115620006ea57600080fd5b620006f88482850162000534565b60808301525060a082015160a08201526200071660c0830162000393565b60c08201526200072960e08301620005d8565b60e08201526101008281015190820152610120808301519082015261014080830151908201526101606200075f818401620005e9565b90820152610180620007738382016200051c565b908201526101a062000787838201620005d8565b908201526101c06200051284848301620005fb565b6000806000808486036102e0811215620007b557600080fd5b61010080821215620007c657600080fd5b620007d062000354565b91508651620007df816200037a565b8252620007ef6020880162000393565b6020830152620008026040880162000393565b6040830152620008156060880162000393565b6060830152620008286080880162000393565b60808301526200083b60a0880162000393565b60a08301526200084e60c0880162000393565b60c08301526200086160e0880162000393565b60e08301528195506200087788828901620003a5565b945050506200088b866101a0870162000450565b6102c08601519092506001600160401b03811115620008a957600080fd5b620008b78782880162000673565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015620008fd57835183529284019291840191600101620008df565b50909695505050505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e05161040051610420516104405161046051610480516104a0516104c0516104e051610500516105205161054051610560516105805161599662000cbd600039600081816103fa0152610a240152600081816103230152610bc20152600081816105210152610bf10152600081816104d101526116cc015260008181610815015261223d0152600081816107c50152612101015260008181610624015261203a0152600081816107ed015281816123fc015281816125b201526126710152600081816108dd0152611ed101526000818161057101528181610c2001528181610f9e0152818161135d015281816114550152818161150901528181611763015281816117920152611b5b01526000818161083d015281816118d2015261199c01526000818161054901526120630152600081816104a9015281816123cc015281816125da01526126950152600081816104f9015261212b01526000818161039001528181610a450152611efa01526000818161036801526122670152600081816106c40152610d5801526000818161092d01526124880152600081816105fc01526124280152600081816108b50152612458015260008181610905015281816123a501526127850152600081816107250152611c5e01526000818161096e0152611dc80152600081816106ec0152818161116401526111b10152600081816108650152611d7001526000818161064c0152611c230152600081816109e60152611b3501526000818161044a0152611b0601526000818161069c0152610d370152600081816103b80152611ad601526000818161074d01528181610b26015261201101526000818161042201528181610b550152818161221401526122c801526000818161077501528181610b84015281816120d8015261218c01526000818161088d01528181610af701528181612384015281816127a801526128a401526000818161099601528181610ac801528181611ea80152611f90015260008181610674015281816112e60152818161161401526116f401526000818161079d01528181610d900152611bf40152600081816105990152611d9f0152600081816109be0152611d3e0152600081816104720152611d180152600081816105d40152611cf201526159966000f3fe60806040523480156200001157600080fd5b5060043610620003185760003560e01c80639f9854e511620001a5578063d1da2c5c11620000f5578063eb657a4e11620000a3578063ee9a31a2116200007a578063ee9a31a21462000990578063fa28742014620009b8578063faf5625f14620009e057600080fd5b8063eb657a4e1462000927578063ebe03a93146200094f578063ec4f74ce146200096857600080fd5b8063d49d518111620000d8578063d49d518114620008af578063dae7cb8b14620008d7578063e8180c2914620008ff57600080fd5b8063d1da2c5c146200085f578063d384cb95146200088757600080fd5b8063bf5e3d521162000153578063c519d1511162000136578063c519d15114620007e7578063c897f55e146200080f578063cc8089bb146200083757600080fd5b8063bf5e3d521462000797578063c21c423314620007bf57600080fd5b8063b5e00c3f1162000188578063b5e00c3f146200071f578063b70106971462000747578063be41b367146200076f57600080fd5b80639f9854e514620006be578063b38d57f014620006e657600080fd5b80633c2b7840116200026d578063609fb503116200021b57806385e1f4d011620001f257806385e1f4d014620006465780638765240f146200066e57806391ddb285146200069657600080fd5b8063609fb50314620005ce578063785ffb3714620005f6578063817cd312146200061e57600080fd5b80634b2f51ef11620002505780634b2f51ef14620005435780634e0e75fb146200056b5780635d9e2444146200059357600080fd5b80633c2b784014620004f35780634692de5d146200051b57600080fd5b80631b142ea711620002cb5780631ccc2cd111620002ae5780631ccc2cd1146200046c5780632cfb7ca314620004a35780632db93bdc14620004cb57600080fd5b80631b142ea7146200041c5780631c39b672146200044457600080fd5b80630a54257d11620003005780630a54257d146200038a5780631047fc5214620003b257806310a662e214620003f457600080fd5b8062f9731e146200031d5780630787484b1462000362575b600080fd5b620003457f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003da7f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff909116815260200162000359565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620004947f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200162000359565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620005bb7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200162000359565b620004947f000000000000000000000000000000000000000000000000000000000000000081565b620003da7f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620004947f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003da7f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b6200070e7f000000000000000000000000000000000000000000000000000000000000000081565b604051901515815260200162000359565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620003da7f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b6200070e7f000000000000000000000000000000000000000000000000000000000000000081565b620003da7f000000000000000000000000000000000000000000000000000000000000000081565b620009666200096036600462002b88565b62000a08565b005b620003da7f000000000000000000000000000000000000000000000000000000000000000081565b620003457f000000000000000000000000000000000000000000000000000000000000000081565b620004947f000000000000000000000000000000000000000000000000000000000000000081565b620004947f000000000000000000000000000000000000000000000000000000000000000081565b62000a12620012e4565b600062000a1e62001755565b905060007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060405162000a7290620028fe565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f08015801562000ab5573d6000803e3d6000fd5b50905060006040518061012001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001836001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc45e0ae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c7d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ca3919062002c33565b6001600160a01b0316815250905060008360405160200162000cc6919062002f5d565b604051602081830303815290604052805190602001209050600062000d18826040518060200162000cf7906200290c565b6020820181038252601f19601f820116604052508051906020012062001e05565b905062000d258162001e91565b836001600160a01b0316631a72d54c827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008961014001518a61016001518b61018001518c602001517f00000000000000000000000000000000000000000000000000000000000000008e61020001518f61010001516040518b63ffffffff1660e01b815260040162000de29a9998979695949392919062002f72565b600060405180830381600087803b15801562000dfd57600080fd5b505af115801562000e12573d6000803e3d6000fd5b5050505060008260405162000e27906200290c565b8190604051809103906000f590508015801562000e48573d6000803e3d6000fd5b509050816001600160a01b0316816001600160a01b03161462000eb25760405162461bcd60e51b815260206004820152601560248201527f554e455850435445445f524f4c4c55505f41444452000000000000000000000060448201526064015b60405180910390fd5b608086018051309091526040517fd384644b0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063d384644b9062000f05908a90899060040162002fef565b600060405180830381600087803b15801562000f2057600080fd5b505af115801562000f35573d6000803e3d6000fd5b50505050875160001462001162576000885167ffffffffffffffff81111562000f625762000f6262002aab565b60405190808252806020026020018201604052801562000f8c578160200160208202803683370190505b50905060005b8951811015620010e2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663facd743b8b838151811062000fe05762000fe0620030d5565b60200260200101516040518263ffffffff1660e01b81526004016200101491906001600160a01b0391909116815260200190565b602060405180830381865afa15801562001032573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001058919062003101565b620010a65760405162461bcd60e51b815260206004820152601860248201527f554e45585045435445445f4e45575f56414c494441544f520000000000000000604482015260640162000ea9565b6001828281518110620010bd57620010bd620030d5565b9115156020928302919091019091015280620010d98162003135565b91505062000f92565b506040517fa3ffb7720000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063a3ffb772906200112c908c908590600401620031ab565b600060405180830381600087803b1580156200114757600080fd5b505af11580156200115c573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000001562001220576040517fa2b4f1d80000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000151560048201526001600160a01b0383169063a2b4f1d890602401600060405180830381600087803b1580156200120657600080fd5b505af11580156200121b573d6000803e3d6000fd5b505050505b6040517f13af40350000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301528316906313af403590602401600060405180830381600087803b1580156200127d57600080fd5b505af115801562001292573d6000803e3d6000fd5b5050604080516001600160a01b0380881682528a1660208201527f7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314935001905060405180910390a15050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200134057600080fd5b505af115801562001355573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dff697876040518163ffffffff1660e01b8152600401602060405180830381865afa158015620013ba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013e0919062003221565b905060328167ffffffffffffffff161115620013fa575060325b60005b8167ffffffffffffffff168167ffffffffffffffff1610156200169b576040517f6ddd374400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ddd374490602401602060405180830381865afa158015620014a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014cb919062002c33565b6040517fa23c44b10000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063a23c44b19060240160a060405180830381865afa15801562001551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200157791906200323f565b905080608001518015620015975750606081015167ffffffffffffffff16155b156200168357604080516001808252818301909252600091602080830190803683370190505090508281600081518110620015d657620015d6620030d5565b6001600160a01b0392831660209182029290920101526040517f7c75c2980000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000090911690637c75c298906200164d908490600401620032d2565b600060405180830381600087803b1580156200166857600080fd5b505af11580156200167d573d6000803e3d6000fd5b50505050505b505080806200169290620032e7565b915050620013fd565b506040517f0d40a0fd0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000001690630d40a0fd90602401600060405180830381600087803b1580156200173957600080fd5b505af11580156200174e573d6000803e3d6000fd5b5050505050565b6200175f6200291a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166392c8134c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365f7f80d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620017ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001815919062003221565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff909116600482015260240161018060405180830381865afa15801562001874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200189a919062003311565b516040517f8eaa6ac00000000000000000000000000000000000000000000000000000000081526004810182905290915060009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638eaa6ac09060240160c060405180830381865afa15801562001922573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001948919062003465565b915091506200195662002a24565b8251815260208084015190820190600281111562001978576200197862002d47565b908160028111156200198e576200198e62002d47565b905250836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166331644130620019cc8462002342565b856040518363ffffffff1660e01b8152600401620019ec92919062003536565b602060405180830381865afa15801562001a0a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a3091906200356d565b1462001a7f5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964206c617465737420657865637574696f6e2068617368000000604482015260640162000ea9565b62001aab6040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051606081018252600080825260208201819052918101919091526040518061026001604052807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ee1a1266040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001bb8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bde91906200356d565b8152602001306001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020016040518060200160405280600081525081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b0ec2ae16040518163ffffffff1660e01b8152600401600060405180830381865afa15801562001cbb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001ce5919081019062003587565b81526020018381526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020018481526020018581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000060ff1681526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16815260200182815250965050505050505090565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b90505b92915050565b60405163266a23b160e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081811660048401527f000000000000000000000000000000000000000000000000000000000000000082166024840152917f0000000000000000000000000000000000000000000000000000000000000000909116906399a88ec490604401600060405180830381600087803b15801562001f4157600080fd5b505af115801562001f56573d6000803e3d6000fd5b50506040517f919cc7060000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301527f000000000000000000000000000000000000000000000000000000000000000016925063919cc7069150602401600060405180830381600087803b15801562001fd757600080fd5b505af115801562001fec573d6000803e3d6000fd5b5050505062001ffa62002382565b60405163266a23b160e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081811660048401527f000000000000000000000000000000000000000000000000000000000000000082166024840152917f0000000000000000000000000000000000000000000000000000000000000000909116906399a88ec490604401600060405180830381600087803b158015620020aa57600080fd5b505af1158015620020bf573d6000803e3d6000fd5b505060405163266a23b160e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081811660048401527f00000000000000000000000000000000000000000000000000000000000000008216602484015293507f00000000000000000000000000000000000000000000000000000000000000001691506399a88ec490604401600060405180830381600087803b1580156200217157600080fd5b505af115801562002186573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636ae71f126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620021e657600080fd5b505af1158015620021fb573d6000803e3d6000fd5b505060405163266a23b160e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081811660048401527f00000000000000000000000000000000000000000000000000000000000000008216602484015293507f00000000000000000000000000000000000000000000000000000000000000001691506399a88ec490604401600060405180830381600087803b158015620022ad57600080fd5b505af1158015620022c2573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636ae71f126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200232257600080fd5b505af115801562002337573d6000803e3d6000fd5b505050505050505050565b6200234c62002a4d565b604051806040016040528083600001518152602001836020015160028111156200237a576200237a62002d47565b905292915050565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000001562002593577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639623609d827f000000000000000000000000000000000000000000000000000000000000000060405180606001604052807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16815250604051602401620024c6919062003616565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa655d93700000000000000000000000000000000000000000000000000000000179052517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152620025599392919060040162003648565b600060405180830381600087803b1580156200257457600080fd5b505af115801562002589573d6000803e3d6000fd5b5050505062002639565b60405163266a23b160e21b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000016906399a88ec490604401600060405180830381600087803b1580156200261f57600080fd5b505af115801562002634573d6000803e3d6000fd5b505050505b6040517f204e1c7a0000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063204e1c7a90602401602060405180830381865afa158015620026df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002705919062002c33565b6001600160a01b031614620027835760405162461bcd60e51b815260206004820152603160248201527f44656c61794275666665723a206e65772073657120696e626f7820696d706c6560448201527f6d656e746174696f6e206e6f7420736574000000000000000000000000000000606482015260840162000ea9565b7f000000000000000000000000000000000000000000000000000000000000000015157f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634b678a666040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200282b919062003101565b151514620028a25760405162461bcd60e51b815260206004820152602660248201527f44656c61794275666665723a20697344656c617942756666657261626c65206e60448201527f6f74207365740000000000000000000000000000000000000000000000000000606482015260840162000ea9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636ae71f126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200173957600080fd5b610ed3806200368083390190565b61140e806200455383390190565b604051806102600160405280600067ffffffffffffffff16815260200160006001600160a01b03168152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001620029b96040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001600081526020016000815260200160008152602001620029dd62002a24565b81526000602080830182905260408084018390526060808501849052608085018490528151908101825283815291820183905281019190915260a09091015290565b905290565b604051806060016040528062002a3962002a6e565b815260200160008152600060209091015290565b604051806040016040528062002a6262002a6e565b81526020016000905290565b604051806040016040528062002a8362002a8d565b815260200162002a1f5b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171562002ae85762002ae862002aab565b60405290565b6040805190810167ffffffffffffffff8111828210171562002ae85762002ae862002aab565b604051601f8201601f1916810167ffffffffffffffff8111828210171562002b405762002b4062002aab565b604052919050565b600067ffffffffffffffff82111562002b655762002b6562002aab565b5060051b60200190565b6001600160a01b038116811462002b8557600080fd5b50565b6000602080838503121562002b9c57600080fd5b823567ffffffffffffffff81111562002bb457600080fd5b8301601f8101851362002bc657600080fd5b803562002bdd62002bd78262002b48565b62002b14565b81815260059190911b8201830190838101908783111562002bfd57600080fd5b928401925b8284101562002c2857833562002c188162002b6f565b8252928401929084019062002c02565b979650505050505050565b60006020828403121562002c4657600080fd5b815162002c538162002b6f565b9392505050565b6000815180845260005b8181101562002c825760208185018101518683018201520162002c64565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b8381101562002cd45781518752958201959082019060010162002cb6565b509495945050505050565b80518260005b600281101562002d0657825182526020928301929091019060010162002ce5565b5050506020808201516040840160005b600281101562002d3f57825167ffffffffffffffff168252918301919083019060010162002d16565b505050505050565b634e487b7160e01b600052602160045260246000fd5b6003811062002d7c57634e487b7160e01b600052602160045260246000fd5b9052565b62002d8d82825162002cdf565b602081015162002da1608084018262002d5d565b506040015160a09190910152565b805167ffffffffffffffff16825260006103a0602083015162002ddd60208601826001600160a01b03169052565b506040830151604085015260608301516060850152608083015162002e0d60808601826001600160a01b03169052565b5060a083015162002e2960a08601826001600160a01b03169052565b5060c083015160c085015260e08301518160e086015262002e4d8286018262002c5a565b915050610100808401518583038287015262002e6a838262002ca2565b6101208681015180518983015260208101516101408a015260408101516101608a015260608101516101808a01529194509250905050506101408301516101a0818187015261016085015191506101c0828188015261018086015192506101e08381890152828701519350610200925062002ee88389018562002d80565b908601516102c08801528501516001600160a01b03166102e087015284015160ff166103008601525061022083015167ffffffffffffffff908116610320860152610240840151805182166103408701526020810151821661036087015260408101519091166103808601525b509392505050565b60208152600062001e88602083018462002daf565b60006101406001600160a01b03808e16845267ffffffffffffffff8d166020850152808c1660408501528a60608501528960808501528860a085015280881660c085015280871660e08501525060ff85166101008401528061012084015262002fde8184018562002ca2565b9d9c50505050505050505050505050565b6000610140808352620030058184018662002daf565b9150506001600160a01b03835116602083015260208301516200303360408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e0830151610100620030ba818501836001600160a01b03169052565b8401516001600160a01b038116610120850152905062002f55565b634e487b7160e01b600052603260045260246000fd5b80518015158114620030fc57600080fd5b919050565b6000602082840312156200311457600080fd5b62001e8882620030eb565b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200316957620031696200311f565b5060010190565b600081518084526020808501945080840160005b8381101562002cd45781516001600160a01b03168752958201959082019060010162003184565b604081526000620031c0604083018562003170565b82810360208481019190915284518083528582019282019060005b81811015620031fb578451151583529383019391830191600101620031db565b5090979650505050505050565b805167ffffffffffffffff81168114620030fc57600080fd5b6000602082840312156200323457600080fd5b62001e888262003208565b600060a082840312156200325257600080fd5b60405160a0810181811067ffffffffffffffff8211171562003278576200327862002aab565b604052825181526200328d6020840162003208565b6020820152620032a06040840162003208565b6040820152620032b36060840162003208565b6060820152620032c660808401620030eb565b60808201529392505050565b60208152600062001e88602083018462003170565b600067ffffffffffffffff8083168181036200330757620033076200311f565b6001019392505050565b600061018082840312156200332557600080fd5b6200332f62002ac1565b825181526020830151602082015260408301516040820152620033556060840162003208565b6060820152620033686080840162003208565b60808201526200337b60a0840162003208565b60a08201526200338e60c0840162003208565b60c0820152620033a160e0840162003208565b60e0820152610100620033b681850162003208565b90820152610120620033ca84820162003208565b90820152610140620033de84820162003208565b90820152610160928301519281019290925250919050565b600082601f8301126200340857600080fd5b6200341262002aee565b8060408401858111156200342557600080fd5b845b818110156200344a576200343b8162003208565b84526020938401930162003427565b509095945050505050565b805160038110620030fc57600080fd5b60008082840360c08112156200347a57600080fd5b60a08112156200348957600080fd5b6200349362002aee565b6080821215620034a257600080fd5b620034ac62002aee565b915085601f860112620034be57600080fd5b620034c862002aee565b806040870188811115620034db57600080fd5b875b81811015620034f7578051845260209384019301620034dd565b50818552620035078982620033f6565b6020860152505050818152620035206080860162003455565b602082015260a094909401519395939450505050565b600060c0820190506200354b82855162002cdf565b60208401516200355f608084018262002d5d565b508260a08301529392505050565b6000602082840312156200358057600080fd5b5051919050565b600060208083850312156200359b57600080fd5b825167ffffffffffffffff811115620035b357600080fd5b8301601f81018513620035c557600080fd5b8051620035d662002bd78262002b48565b81815260059190911b82018301908381019087831115620035f657600080fd5b928401925b8284101562002c2857835182529284019290840190620035fb565b6060810162001e8b8284805167ffffffffffffffff908116835260208083015182169084015260409182015116910152565b60006001600160a01b0380861683528085166020840152506060604083015262003676606083018462002c5a565b9594505050505056fe608060405260405162000ed338038062000ed3833981016040819052620000269162000487565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ba565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b6200023e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000eac60279139620002f8565b9392505050565b60006200018060008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200026a1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620001fa1760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000567565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f1919062000585565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b50506000910152565b6000806000606084860312156200049d57600080fd5b620004a8846200042e565b9250620004b8602085016200042e565b60408501519092506001600160401b0380821115620004d657600080fd5b818601915086601f830112620004eb57600080fd5b8151818111156200050057620005006200044b565b604051601f8201601f19908116603f011681019083821181831017156200052b576200052b6200044b565b816040528281528960208487010111156200054557600080fd5b6200055883602083016020880162000461565b80955050505050509250925092565b600082516200057b81846020870162000461565b9190910192915050565b6020815260008251806020840152620005a681604085016020870162000461565b601f01601f19169190910160400192915050565b6108c280620005ca6000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100d9578063f851a440146100f95761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61010e565b005b61006b61010e565b34801561008157600080fd5b5061006b610090366004610736565b610128565b61006b6100a3366004610751565b610165565b3480156100b457600080fd5b506100bd6101cc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e557600080fd5b5061006b6100f4366004610736565b6101fd565b34801561010557600080fd5b506100bd61021d565b610116610279565b610126610121610329565b610333565b565b610130610357565b6001600160a01b0316330361015d5761015a8160405180602001604052806000815250600061038a565b50565b61015a61010e565b61016d610357565b6001600160a01b031633036101c4576101bf8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061038a915050565b505050565b6101bf61010e565b60006101d6610357565b6001600160a01b031633036101f2576101ed610329565b905090565b6101fa61010e565b90565b610205610357565b6001600160a01b0316330361015d5761015a816103b5565b6000610227610357565b6001600160a01b031633036101f2576101ed610357565b6060610263838360405180606001604052806027815260200161086660279139610409565b9392505050565b6001600160a01b03163b151590565b610281610357565b6001600160a01b031633036101265760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60006101ed6104fd565b3660008037600080366000845af43d6000803e808015610352573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039383610525565b6000825111806103a05750805b156101bf576103af838361023e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103de610357565b604080516001600160a01b03928316815291841660208301520160405180910390a161015a81610565565b60606001600160a01b0384163b6104885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610320565b600080856001600160a01b0316856040516104a391906107f8565b600060405180830381855af49150503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50915091506104f382828661063d565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61037b565b61052e81610676565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105e15760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610320565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6060831561064c575081610263565b82511561065c5782518084602001fd5b8160405162461bcd60e51b81526004016103209190610814565b6001600160a01b0381163b6106f35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610320565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610604565b80356001600160a01b038116811461073157600080fd5b919050565b60006020828403121561074857600080fd5b6102638261071a565b60008060006040848603121561076657600080fd5b61076f8461071a565b9250602084013567ffffffffffffffff8082111561078c57600080fd5b818601915086601f8301126107a057600080fd5b8135818111156107af57600080fd5b8760208285010111156107c157600080fd5b6020830194508093505050509250925092565b60005b838110156107ef5781810151838201526020016107d7565b50506000910152565b6000825161080a8184602087016107d4565b9190910192915050565b60208152600082518060208401526108338160408501602087016107d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c1888b421836e473bfc3e72d153dc5c76569ce769e37cfa444506490e142daa564736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564608060405234801561001057600080fd5b506113ee806100206000396000f3fe6080604052600436106100225760003560e01c8063d384644b1461003957610031565b366100315761002f610059565b005b61002f610059565b34801561004557600080fd5b5061002f610054366004610d95565b61006b565b6100696100646101bd565b6102a1565b565b60006100756102ca565b6001600160a01b031614801561009b575060006100906102fd565b6001600160a01b0316145b80156100b7575060006100ac610325565b6001600160a01b0316145b156101b5576101b18160c0015183836040516024016100d792919061113d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9e7e6aa70000000000000000000000000000000000000000000000000000000017905260e08601519087015191516001600160a01b0390921660248301529060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc4d66de800000000000000000000000000000000000000000000000000000000179052608087015161034d565b5050565b6101b1610059565b600060043610156102155760405162461bcd60e51b815260206004820152600b60248201527f4e4f5f46554e435f53494700000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000336102206102ca565b6001600160a01b03160361023b576102366102fd565b610243565b610243610325565b90506001600160a01b0381163b61029c5760405162461bcd60e51b815260206004820152601360248201527f5441524745545f4e4f545f434f4e545241435400000000000000000000000000604482015260640161020c565b919050565b3660008037600080366000845af43d6000803e8080156102c0573d6000f35b3d6000fd5b505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6102ee565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d6102ee565b61037860017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610461132b565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103146103a6576103a661134c565b6103d160017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd61132b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc146103ff576103ff61134c565b61042a60017f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546e61132b565b7f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d146104585761045861134c565b61046181610480565b61046d858560006104d7565b61047983836000610502565b5050505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104a96102ca565b604080516001600160a01b03928316815291841660208301520160405180910390a16104d48161050b565b50565b6104e0836105e3565b6000825111806104ed5750805b156102c5576104fc8383610623565b50505050565b6104e083610651565b6001600160a01b0381166105875760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161020c565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6105ec81610691565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610648838360405180606001604052806027815260200161139260279139610735565b90505b92915050565b61065a8161082b565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b6001600160a01b0381163b61070e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161020c565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105aa565b60606001600160a01b0384163b6107b45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161020c565b600080856001600160a01b0316856040516107cf9190611362565b600060405180830381855af49150503d806000811461080a576040519150601f19603f3d011682016040523d82523d6000602084013e61080f565b606091505b509150915061081f8282866108cf565b925050505b9392505050565b6001600160a01b0381163b6108a85760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e7472616374000000000000000000606482015260840161020c565b807f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d6105aa565b606083156108de575081610824565b8251156108ee5782518084602001fd5b8160405162461bcd60e51b815260040161020c919061137e565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561094157610941610908565b60405290565b6040805190810167ffffffffffffffff8111828210171561094157610941610908565b604051610120810167ffffffffffffffff8111828210171561094157610941610908565b604051610260810167ffffffffffffffff8111828210171561094157610941610908565b604051601f8201601f1916810167ffffffffffffffff811182821017156109db576109db610908565b604052919050565b803567ffffffffffffffff8116811461029c57600080fd5b80356001600160a01b038116811461029c57600080fd5b600082601f830112610a2357600080fd5b813567ffffffffffffffff811115610a3d57610a3d610908565b610a506020601f19601f840116016109b2565b818152846020838601011115610a6557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610a9357600080fd5b8135602067ffffffffffffffff821115610aaf57610aaf610908565b8160051b610abe8282016109b2565b9283528481018201928281019087851115610ad857600080fd5b83870192505b84831015610af757823582529183019190830190610ade565b979650505050505050565b600060808284031215610b1457600080fd5b6040516080810181811067ffffffffffffffff82111715610b3757610b37610908565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f830112610b7957600080fd5b610b81610947565b806040840185811115610b9357600080fd5b845b81811015610bb457610ba6816109e3565b845260209384019301610b95565b509095945050505050565b80356003811061029c57600080fd5b600081830360c0811215610be157600080fd5b610be961091e565b91506080811215610bf957600080fd5b50610c02610947565b83601f840112610c1157600080fd5b610c19610947565b806040850186811115610c2b57600080fd5b855b81811015610c45578035845260209384019301610c2d565b50818452610c538782610b68565b60208501525050508152610c6960808301610bbf565b602082015260a0820135604082015292915050565b803560ff8116811461029c57600080fd5b600060608284031215610ca157600080fd5b610ca961091e565b9050610cb4826109e3565b8152610cc2602083016109e3565b6020820152610cd3604083016109e3565b604082015292915050565b60006101208284031215610cf157600080fd5b610cf961096a565b9050610d04826109fb565b8152610d12602083016109fb565b6020820152610d23604083016109fb565b6040820152610d34606083016109fb565b6060820152610d45608083016109fb565b6080820152610d5660a083016109fb565b60a0820152610d6760c083016109fb565b60c0820152610d7860e083016109fb565b60e0820152610100610d8b8184016109fb565b9082015292915050565b600080610140808486031215610daa57600080fd5b833567ffffffffffffffff80821115610dc257600080fd5b908501906103a08288031215610dd757600080fd5b610ddf61098e565b610de8836109e3565b8152610df6602084016109fb565b60208201526040830135604082015260608301356060820152610e1b608084016109fb565b6080820152610e2c60a084016109fb565b60a082015260c083013560c082015260e083013582811115610e4d57600080fd5b610e5989828601610a12565b60e0830152506101008084013583811115610e7357600080fd5b610e7f8a828701610a82565b8284015250506101209150610e9688838501610b02565b828201526101a0915081830135848201526101c09350838301356101608201526101e080840135610180830152610200610ed28a828701610bce565b848401526102c085013586840152610eed6102e086016109fb565b82840152610efe6103008601610c7e565b9083015250610f1061032084016109e3565b610220820152610f24886103408501610c8f565b61024082015280955050505050610f3e8460208501610cde565b90509250929050565b60005b83811015610f62578181015183820152602001610f4a565b50506000910152565b60008151808452610f83816020860160208601610f47565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015610fc757815187529582019590820190600101610fab565b509495945050505050565b60038110610ff057634e487b7160e01b600052602160045260246000fd5b9052565b805180518360005b600281101561101b578251825260209283019290910190600101610ffc565b505050602090810151906040840160005b600281101561105357835167ffffffffffffffff168252928201929082019060010161102c565b505082015190506110676080840182610fd2565b506040015160a09190910152565b6001600160a01b038082511683528060208301511660208401528060408301511660408401525060608101516110b660608401826001600160a01b03169052565b5060808101516110d160808401826001600160a01b03169052565b5060a08101516110ec60a08401826001600160a01b03169052565b5060c081015161110760c08401826001600160a01b03169052565b5060e081015161112260e08401826001600160a01b03169052565b50610100818101516001600160a01b038116848301526104fc565b600061014080835261115b818401865167ffffffffffffffff169052565b6020850151610160611177818601836001600160a01b03169052565b604087015191506101808281870152606088015192506101a08381880152608089015193506101c06111b3818901866001600160a01b03169052565b60a08a015194506101e06111d1818a01876001600160a01b03169052565b60c08b0151955061020086818b015260e08c015196506102206103a0818c01526111ff6104e08c0189610f6b565b97506101008d01516102407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec08d8b0301818e015261123d8a83610f97565b99506101208f015191506112766102608e0183805182526020810151602083015260408101516040830152606081015160608301525050565b998e01516102e08d0152878e01516103008d0152868e01516103208d0152858e0151996112a76103408e018c610ff4565b948e01516104008d015250918c01516001600160a01b03166104208b01528b015160ff166104408a01528a015167ffffffffffffffff9081166104608a0152908a0151805182166104808a0152602081015182166104a08a015260408101519091166104c0890152945061131a92505050565b915061082490506020830184611075565b8181038181111561064b57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b60008251611374818460208701610f47565b9190910192915050565b6020815260006106486020830184610f6b56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220577ece77367ad682a0e21e0d8e295a83ee6834bb13f8126c050804a725153bab64736f6c63430008110033a2646970667358221220de755e795f8c31ba51fe985c762af04866f88491a3c8d050d5d3650e5ca3343164736f6c63430008110033608060405234801561001057600080fd5b50610a0d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806331644130146100465780638eaa6ac01461006c578063945c94941461008d575b600080fd5b61005961005436600461041d565b6100a2565b6040519081526020015b60405180910390f35b61007f61007a366004610448565b610193565b604051610063929190610483565b6100a061009b36600461050a565b6102bf565b005b60006101526100b636859003850185610598565b8051805160209182015192820151805190830151604080517f476c6f62616c2073746174653a0000000000000000000000000000000000000081870152602d810194909452604d8401959095527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b8261016360a0860160808701610667565b6040516020016101759392919061068b565b60405160208183030381529060405280519060200120905092915050565b61019b6103ab565b600082815260208190526040812080546101b4906106c9565b80601f01602080910402602001604051908101604052809291908181526020018280546101e0906106c9565b801561022d5780601f106102025761010080835404028352916020019161022d565b820191906000526020600020905b81548152906001019060200180831161021057829003601f168201915b50505050508060200190518101906102459190610766565b909250905060008190036102ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f48617368206e6f7420796574207365740000000000000000000000000000000060448201526064015b60405180910390fd5b915091565b6102c982826100a2565b8314610331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642068617368000000000000000000000000000000000000000060448201526064016102b1565b818160405160200161034492919061088c565b60408051601f1981840301815291815260008581526020819052209061036a90826108f5565b507f14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad983838360405161039e939291906109b5565b60405180910390a1505050565b60405180604001604052806103be6103cb565b815260200160005b905290565b60405180604001604052806103de6103e7565b81526020016103c65b60405180604001604052806002906020820280368337509192915050565b600060a0828403121561041757600080fd5b50919050565b60008060c0838503121561043057600080fd5b61043a8484610405565b9460a0939093013593505050565b60006020828403121561045a57600080fd5b5035919050565b6003811061047f57634e487b7160e01b600052602160045260246000fd5b9052565b8251805160c0830191908360005b60028110156104b0578251825260209283019290910190600101610491565b505050602090810151906040840160005b60028110156104e857835167ffffffffffffffff16825292820192908201906001016104c1565b505085015190506104fc6080840182610461565b508260a08301529392505050565b600080600060e0848603121561051f57600080fd5b833592506105308560208601610405565b915060c084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561057957610579610540565b60405290565b67ffffffffffffffff8116811461059557600080fd5b50565b6000608082840312156105aa57600080fd5b6105b2610556565b83601f8401126105c157600080fd5b6105c9610556565b8060408501868111156105db57600080fd5b855b818110156105f55780358452602093840193016105dd565b5081845286605f87011261060857600080fd5b610610610556565b9250829150608086018781111561062657600080fd5b8082101561064b5781356106398161057f565b84526020938401939190910190610626565b50506020830152509392505050565b6003811061059557600080fd5b60006020828403121561067957600080fd5b81356106848161065a565b9392505050565b8381528260208201526000600383106106b457634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b600181811c908216806106dd57607f821691505b60208210810361041757634e487b7160e01b600052602260045260246000fd5b600082601f83011261070e57600080fd5b610716610556565b80604084018581111561072857600080fd5b845b8181101561074b57805161073d8161057f565b84526020938401930161072a565b509095945050505050565b80516107618161065a565b919050565b60008082840360c081121561077a57600080fd5b60a081121561078857600080fd5b610790610556565b608082121561079e57600080fd5b6107a6610556565b915085601f8601126107b757600080fd5b6107bf610556565b8060408701888111156107d157600080fd5b875b818110156107eb5780518452602093840193016107d3565b508185526107f989826106fd565b602086015250505081815261081060808601610756565b602082015260a094909401519395939450505050565b6040818337604082016040820160005b600281101561086957813561084a8161057f565b67ffffffffffffffff1683526020928301929190910190600101610836565b505050608081013561087a8161065a565b6108876080840182610461565b505050565b60c0810161089a8285610826565b8260a08301529392505050565b601f82111561088757600081815260208120601f850160051c810160208610156108ce5750805b601f850160051c820191505b818110156108ed578281556001016108da565b505050505050565b815167ffffffffffffffff81111561090f5761090f610540565b6109238161091d84546106c9565b846108a7565b602080601f83116001811461095857600084156109405750858301515b600019600386901b1c1916600185901b1785556108ed565b600085815260208120601f198616915b8281101561098757888601518255948401946001909101908401610968565b50858210156109a55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b83815260e081016109c96020830185610826565b8260c083015294935050505056fea26469706673582212201810aafa2710cf085af645b315f1aaef8f94d38c67e5d40ba1c50a9af3f75ff164736f6c6343000811003360a060405234801561001057600080fd5b50604051610be3380380610be383398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610b206100c3600039600081816101a5015281816101f6015281816102b601528181610333015281816104500152818161051b0152818161058a0152818161060e01526106a50152610b206000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a23c44b111610076578063cb23bcb51161005b578063cb23bcb5146101a0578063dff69787146101c7578063facd743b146101cf57600080fd5b8063a23c44b11461012f578063bc45e0ae1461019857600080fd5b806365f7f80d146100a85780636ddd3744146100ce5780638ee1a126146100f957806392c8134c1461010f575b600080fd5b6100b06101f2565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6100e16100dc36600461072b565b61027b565b6040516001600160a01b0390911681526020016100c5565b61010161032f565b6040519081526020016100c5565b61012261011d36600461072b565b6103b3565b6040516100c5919061074f565b61014261013d366004610868565b6104bc565b6040516100c59190600060a08201905082518252602083015167ffffffffffffffff8082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b6100e1610586565b6100e17f000000000000000000000000000000000000000000000000000000000000000081565b6100b061060a565b6101e26101dd366004610868565b61066a565b60405190151581526020016100c5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365f7f80d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102769190610895565b905090565b6040517f6ddd374400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ddd374490602401602060405180830381865afa158015610305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032991906108b2565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ee1a1266040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027691906108cf565b6040805161018081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820181905261016082015290517f92c8134c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906392c8134c9060240161018060405180830381865afa158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610939565b6040805160a08101825260008082526020820181905281830181905260608201819052608082015290517fa23c44b10000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a23c44b19060240160a060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610a1b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc45e0ae6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027691906108b2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dff697876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610252573d6000803e3d6000fd5b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063facd743b90602401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610acf565b67ffffffffffffffff8116811461072857600080fd5b50565b60006020828403121561073d57600080fd5b813561074881610712565b9392505050565b600061018082019050825182526020830151602083015260408301516040830152606083015161078b606084018267ffffffffffffffff169052565b5060808301516107a7608084018267ffffffffffffffff169052565b5060a08301516107c360a084018267ffffffffffffffff169052565b5060c08301516107df60c084018267ffffffffffffffff169052565b5060e08301516107fb60e084018267ffffffffffffffff169052565b506101008381015167ffffffffffffffff81168483015250506101208381015167ffffffffffffffff81168483015250506101408381015167ffffffffffffffff811684830152505061016092830151919092015290565b6001600160a01b038116811461072857600080fd5b60006020828403121561087a57600080fd5b813561074881610853565b805161089081610712565b919050565b6000602082840312156108a757600080fd5b815161074881610712565b6000602082840312156108c457600080fd5b815161074881610853565b6000602082840312156108e157600080fd5b5051919050565b604051610180810167ffffffffffffffff81118282101715610933577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b6000610180828403121561094c57600080fd5b6109546108e8565b82518152602083015160208201526040830151604082015261097860608401610885565b606082015261098960808401610885565b608082015261099a60a08401610885565b60a08201526109ab60c08401610885565b60c08201526109bc60e08401610885565b60e08201526101006109cf818501610885565b908201526101206109e1848201610885565b908201526101406109f3848201610885565b90820152610160928301519281019290925250919050565b8051801515811461089057600080fd5b600060a08284031215610a2d57600080fd5b60405160a0810181811067ffffffffffffffff82111715610a77577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052825181526020830151610a8c81610712565b60208201526040830151610a9f81610712565b60408201526060830151610ab281610712565b6060820152610ac360808401610a0b565b60808201529392505050565b600060208284031215610ae157600080fd5b61074882610a0b56fea2646970667358221220e7d173d7427911ae1261bfcb8df4436ba036e779c448fabcffea3e87feb3abf864736f6c63430008110033608060405234801561001057600080fd5b506040516102a03803806102a083398101604081905261002f916100bf565b8051610042906000906020840190610049565b505061017c565b828054828255906000526020600020908101928215610084579160200282015b82811115610084578251825591602001919060010190610069565b50610090929150610094565b5090565b5b808211156100905760008155600101610095565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156100d257600080fd5b82516001600160401b03808211156100e957600080fd5b818501915085601f8301126100fd57600080fd5b81518181111561010f5761010f6100a9565b8060051b604051601f19603f83011681018181108582111715610134576101346100a9565b60405291825284820192508381018501918883111561015257600080fd5b938501935b8285101561017057845184529385019392850192610157565b98975050505050505050565b6101158061018b6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063b0ec2ae114602d575b600080fd5b60336047565b604051603e9190609d565b60405180910390f35b60606000805480602002602001604051908101604052809291908181526020018280548015609357602002820191906000526020600020905b8154815260200190600101908083116080575b5050505050905090565b6020808252825182820181905260009190848201906040850190845b8181101560d35783518352928401929184019160010160b9565b5090969550505050505056fea26469706673582212202f269e929f4817e35935475eda876bc6d672c7ccad46939d0d194266206869ab64736f6c63430008110033",
}

// BOLDUpgradeActionABI is the input ABI used to generate the binding from.
// Deprecated: Use BOLDUpgradeActionMetaData.ABI instead.
var BOLDUpgradeActionABI = BOLDUpgradeActionMetaData.ABI

// BOLDUpgradeActionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BOLDUpgradeActionMetaData.Bin instead.
var BOLDUpgradeActionBin = BOLDUpgradeActionMetaData.Bin

// DeployBOLDUpgradeAction deploys a new Ethereum contract, binding an instance of BOLDUpgradeAction to it.
func DeployBOLDUpgradeAction(auth *bind.TransactOpts, backend bind.ContractBackend, contracts BOLDUpgradeActionContracts, proxyAdmins BOLDUpgradeActionProxyAdmins, implementations BOLDUpgradeActionImplementations, settings BOLDUpgradeActionSettings) (common.Address, *types.Transaction, *BOLDUpgradeAction, error) {
	parsed, err := BOLDUpgradeActionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BOLDUpgradeActionBin), backend, contracts, proxyAdmins, implementations, settings)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BOLDUpgradeAction{BOLDUpgradeActionCaller: BOLDUpgradeActionCaller{contract: contract}, BOLDUpgradeActionTransactor: BOLDUpgradeActionTransactor{contract: contract}, BOLDUpgradeActionFilterer: BOLDUpgradeActionFilterer{contract: contract}}, nil
}

// BOLDUpgradeAction is an auto generated Go binding around an Ethereum contract.
type BOLDUpgradeAction struct {
	BOLDUpgradeActionCaller     // Read-only binding to the contract
	BOLDUpgradeActionTransactor // Write-only binding to the contract
	BOLDUpgradeActionFilterer   // Log filterer for contract events
}

// BOLDUpgradeActionCaller is an auto generated read-only Go binding around an Ethereum contract.
type BOLDUpgradeActionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOLDUpgradeActionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BOLDUpgradeActionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOLDUpgradeActionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BOLDUpgradeActionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOLDUpgradeActionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BOLDUpgradeActionSession struct {
	Contract     *BOLDUpgradeAction // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BOLDUpgradeActionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BOLDUpgradeActionCallerSession struct {
	Contract *BOLDUpgradeActionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// BOLDUpgradeActionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BOLDUpgradeActionTransactorSession struct {
	Contract     *BOLDUpgradeActionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// BOLDUpgradeActionRaw is an auto generated low-level Go binding around an Ethereum contract.
type BOLDUpgradeActionRaw struct {
	Contract *BOLDUpgradeAction // Generic contract binding to access the raw methods on
}

// BOLDUpgradeActionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BOLDUpgradeActionCallerRaw struct {
	Contract *BOLDUpgradeActionCaller // Generic read-only contract binding to access the raw methods on
}

// BOLDUpgradeActionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BOLDUpgradeActionTransactorRaw struct {
	Contract *BOLDUpgradeActionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBOLDUpgradeAction creates a new instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeAction(address common.Address, backend bind.ContractBackend) (*BOLDUpgradeAction, error) {
	contract, err := bindBOLDUpgradeAction(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeAction{BOLDUpgradeActionCaller: BOLDUpgradeActionCaller{contract: contract}, BOLDUpgradeActionTransactor: BOLDUpgradeActionTransactor{contract: contract}, BOLDUpgradeActionFilterer: BOLDUpgradeActionFilterer{contract: contract}}, nil
}

// NewBOLDUpgradeActionCaller creates a new read-only instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeActionCaller(address common.Address, caller bind.ContractCaller) (*BOLDUpgradeActionCaller, error) {
	contract, err := bindBOLDUpgradeAction(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionCaller{contract: contract}, nil
}

// NewBOLDUpgradeActionTransactor creates a new write-only instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeActionTransactor(address common.Address, transactor bind.ContractTransactor) (*BOLDUpgradeActionTransactor, error) {
	contract, err := bindBOLDUpgradeAction(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionTransactor{contract: contract}, nil
}

// NewBOLDUpgradeActionFilterer creates a new log filterer instance of BOLDUpgradeAction, bound to a specific deployed contract.
func NewBOLDUpgradeActionFilterer(address common.Address, filterer bind.ContractFilterer) (*BOLDUpgradeActionFilterer, error) {
	contract, err := bindBOLDUpgradeAction(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionFilterer{contract: contract}, nil
}

// bindBOLDUpgradeAction binds a generic wrapper to an already deployed contract.
func bindBOLDUpgradeAction(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BOLDUpgradeActionMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BOLDUpgradeAction *BOLDUpgradeActionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BOLDUpgradeAction.Contract.BOLDUpgradeActionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BOLDUpgradeAction *BOLDUpgradeActionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.BOLDUpgradeActionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BOLDUpgradeAction *BOLDUpgradeActionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.BOLDUpgradeActionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BOLDUpgradeAction.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.contract.Transact(opts, method, params...)
}

// ANYTRUSTFASTCONFIRMER is a free data retrieval call binding the contract method 0xd1da2c5c.
//
// Solidity: function ANY_TRUST_FAST_CONFIRMER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) ANYTRUSTFASTCONFIRMER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "ANY_TRUST_FAST_CONFIRMER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ANYTRUSTFASTCONFIRMER is a free data retrieval call binding the contract method 0xd1da2c5c.
//
// Solidity: function ANY_TRUST_FAST_CONFIRMER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) ANYTRUSTFASTCONFIRMER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ANYTRUSTFASTCONFIRMER(&_BOLDUpgradeAction.CallOpts)
}

// ANYTRUSTFASTCONFIRMER is a free data retrieval call binding the contract method 0xd1da2c5c.
//
// Solidity: function ANY_TRUST_FAST_CONFIRMER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) ANYTRUSTFASTCONFIRMER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ANYTRUSTFASTCONFIRMER(&_BOLDUpgradeAction.CallOpts)
}

// BIGSTEPLEAFSIZE is a free data retrieval call binding the contract method 0x1ccc2cd1.
//
// Solidity: function BIGSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) BIGSTEPLEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "BIGSTEP_LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BIGSTEPLEAFSIZE is a free data retrieval call binding the contract method 0x1ccc2cd1.
//
// Solidity: function BIGSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) BIGSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BIGSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BIGSTEPLEAFSIZE is a free data retrieval call binding the contract method 0x1ccc2cd1.
//
// Solidity: function BIGSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) BIGSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BIGSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BLOCKLEAFSIZE is a free data retrieval call binding the contract method 0x609fb503.
//
// Solidity: function BLOCK_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) BLOCKLEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "BLOCK_LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BLOCKLEAFSIZE is a free data retrieval call binding the contract method 0x609fb503.
//
// Solidity: function BLOCK_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) BLOCKLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BLOCKLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BLOCKLEAFSIZE is a free data retrieval call binding the contract method 0x609fb503.
//
// Solidity: function BLOCK_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) BLOCKLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.BLOCKLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) BRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) BRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.BRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) BRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.BRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CHAINID() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.CHAINID(&_BOLDUpgradeAction.CallOpts)
}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CHAINID() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.CHAINID(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEGRACEPERIODBLOCKS is a free data retrieval call binding the contract method 0xec4f74ce.
//
// Solidity: function CHALLENGE_GRACE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CHALLENGEGRACEPERIODBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CHALLENGE_GRACE_PERIOD_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CHALLENGEGRACEPERIODBLOCKS is a free data retrieval call binding the contract method 0xec4f74ce.
//
// Solidity: function CHALLENGE_GRACE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CHALLENGEGRACEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEGRACEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEGRACEPERIODBLOCKS is a free data retrieval call binding the contract method 0xec4f74ce.
//
// Solidity: function CHALLENGE_GRACE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CHALLENGEGRACEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEGRACEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEPERIODBLOCKS is a free data retrieval call binding the contract method 0x91ddb285.
//
// Solidity: function CHALLENGE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CHALLENGEPERIODBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CHALLENGE_PERIOD_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CHALLENGEPERIODBLOCKS is a free data retrieval call binding the contract method 0x91ddb285.
//
// Solidity: function CHALLENGE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CHALLENGEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CHALLENGEPERIODBLOCKS is a free data retrieval call binding the contract method 0x91ddb285.
//
// Solidity: function CHALLENGE_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CHALLENGEPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CHALLENGEPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CONFIRMPERIODBLOCKS is a free data retrieval call binding the contract method 0x1047fc52.
//
// Solidity: function CONFIRM_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) CONFIRMPERIODBLOCKS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "CONFIRM_PERIOD_BLOCKS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CONFIRMPERIODBLOCKS is a free data retrieval call binding the contract method 0x1047fc52.
//
// Solidity: function CONFIRM_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) CONFIRMPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CONFIRMPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// CONFIRMPERIODBLOCKS is a free data retrieval call binding the contract method 0x1047fc52.
//
// Solidity: function CONFIRM_PERIOD_BLOCKS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) CONFIRMPERIODBLOCKS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.CONFIRMPERIODBLOCKS(&_BOLDUpgradeAction.CallOpts)
}

// DISABLEVALIDATORWHITELIST is a free data retrieval call binding the contract method 0xb38d57f0.
//
// Solidity: function DISABLE_VALIDATOR_WHITELIST() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) DISABLEVALIDATORWHITELIST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "DISABLE_VALIDATOR_WHITELIST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DISABLEVALIDATORWHITELIST is a free data retrieval call binding the contract method 0xb38d57f0.
//
// Solidity: function DISABLE_VALIDATOR_WHITELIST() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) DISABLEVALIDATORWHITELIST() (bool, error) {
	return _BOLDUpgradeAction.Contract.DISABLEVALIDATORWHITELIST(&_BOLDUpgradeAction.CallOpts)
}

// DISABLEVALIDATORWHITELIST is a free data retrieval call binding the contract method 0xb38d57f0.
//
// Solidity: function DISABLE_VALIDATOR_WHITELIST() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) DISABLEVALIDATORWHITELIST() (bool, error) {
	return _BOLDUpgradeAction.Contract.DISABLEVALIDATORWHITELIST(&_BOLDUpgradeAction.CallOpts)
}

// IMPLBRIDGE is a free data retrieval call binding the contract method 0xdae7cb8b.
//
// Solidity: function IMPL_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLBRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLBRIDGE is a free data retrieval call binding the contract method 0xdae7cb8b.
//
// Solidity: function IMPL_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// IMPLBRIDGE is a free data retrieval call binding the contract method 0xdae7cb8b.
//
// Solidity: function IMPL_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// IMPLCHALLENGEMANAGER is a free data retrieval call binding the contract method 0x10a662e2.
//
// Solidity: function IMPL_CHALLENGE_MANAGER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLCHALLENGEMANAGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_CHALLENGE_MANAGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLCHALLENGEMANAGER is a free data retrieval call binding the contract method 0x10a662e2.
//
// Solidity: function IMPL_CHALLENGE_MANAGER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLCHALLENGEMANAGER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLCHALLENGEMANAGER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLCHALLENGEMANAGER is a free data retrieval call binding the contract method 0x10a662e2.
//
// Solidity: function IMPL_CHALLENGE_MANAGER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLCHALLENGEMANAGER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLCHALLENGEMANAGER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLINBOX is a free data retrieval call binding the contract method 0x817cd312.
//
// Solidity: function IMPL_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLINBOX is a free data retrieval call binding the contract method 0x817cd312.
//
// Solidity: function IMPL_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLINBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLINBOX is a free data retrieval call binding the contract method 0x817cd312.
//
// Solidity: function IMPL_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLINBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPADMIN is a free data retrieval call binding the contract method 0x00f9731e.
//
// Solidity: function IMPL_NEW_ROLLUP_ADMIN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLNEWROLLUPADMIN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_NEW_ROLLUP_ADMIN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLNEWROLLUPADMIN is a free data retrieval call binding the contract method 0x00f9731e.
//
// Solidity: function IMPL_NEW_ROLLUP_ADMIN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLNEWROLLUPADMIN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPADMIN(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPADMIN is a free data retrieval call binding the contract method 0x00f9731e.
//
// Solidity: function IMPL_NEW_ROLLUP_ADMIN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLNEWROLLUPADMIN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPADMIN(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPUSER is a free data retrieval call binding the contract method 0x4692de5d.
//
// Solidity: function IMPL_NEW_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLNEWROLLUPUSER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_NEW_ROLLUP_USER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLNEWROLLUPUSER is a free data retrieval call binding the contract method 0x4692de5d.
//
// Solidity: function IMPL_NEW_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLNEWROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLNEWROLLUPUSER is a free data retrieval call binding the contract method 0x4692de5d.
//
// Solidity: function IMPL_NEW_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLNEWROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLNEWROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLOUTBOX is a free data retrieval call binding the contract method 0xc897f55e.
//
// Solidity: function IMPL_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLOUTBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_OUTBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLOUTBOX is a free data retrieval call binding the contract method 0xc897f55e.
//
// Solidity: function IMPL_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLOUTBOX is a free data retrieval call binding the contract method 0xc897f55e.
//
// Solidity: function IMPL_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLPATCHEDOLDROLLUPUSER is a free data retrieval call binding the contract method 0x2db93bdc.
//
// Solidity: function IMPL_PATCHED_OLD_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLPATCHEDOLDROLLUPUSER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_PATCHED_OLD_ROLLUP_USER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLPATCHEDOLDROLLUPUSER is a free data retrieval call binding the contract method 0x2db93bdc.
//
// Solidity: function IMPL_PATCHED_OLD_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLPATCHEDOLDROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLPATCHEDOLDROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLPATCHEDOLDROLLUPUSER is a free data retrieval call binding the contract method 0x2db93bdc.
//
// Solidity: function IMPL_PATCHED_OLD_ROLLUP_USER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLPATCHEDOLDROLLUPUSER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLPATCHEDOLDROLLUPUSER(&_BOLDUpgradeAction.CallOpts)
}

// IMPLREI is a free data retrieval call binding the contract method 0xc21c4233.
//
// Solidity: function IMPL_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLREI(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_REI")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLREI is a free data retrieval call binding the contract method 0xc21c4233.
//
// Solidity: function IMPL_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLREI(&_BOLDUpgradeAction.CallOpts)
}

// IMPLREI is a free data retrieval call binding the contract method 0xc21c4233.
//
// Solidity: function IMPL_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLREI(&_BOLDUpgradeAction.CallOpts)
}

// IMPLSEQUENCERINBOX is a free data retrieval call binding the contract method 0xc519d151.
//
// Solidity: function IMPL_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) IMPLSEQUENCERINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IMPL_SEQUENCER_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IMPLSEQUENCERINBOX is a free data retrieval call binding the contract method 0xc519d151.
//
// Solidity: function IMPL_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) IMPLSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// IMPLSEQUENCERINBOX is a free data retrieval call binding the contract method 0xc519d151.
//
// Solidity: function IMPL_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) IMPLSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.IMPLSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// INBOX is a free data retrieval call binding the contract method 0xb7010697.
//
// Solidity: function INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) INBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// INBOX is a free data retrieval call binding the contract method 0xb7010697.
//
// Solidity: function INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) INBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.INBOX(&_BOLDUpgradeAction.CallOpts)
}

// INBOX is a free data retrieval call binding the contract method 0xb7010697.
//
// Solidity: function INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) INBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.INBOX(&_BOLDUpgradeAction.CallOpts)
}

// ISDELAYBUFFERABLE is a free data retrieval call binding the contract method 0xe8180c29.
//
// Solidity: function IS_DELAY_BUFFERABLE() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) ISDELAYBUFFERABLE(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "IS_DELAY_BUFFERABLE")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISDELAYBUFFERABLE is a free data retrieval call binding the contract method 0xe8180c29.
//
// Solidity: function IS_DELAY_BUFFERABLE() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) ISDELAYBUFFERABLE() (bool, error) {
	return _BOLDUpgradeAction.Contract.ISDELAYBUFFERABLE(&_BOLDUpgradeAction.CallOpts)
}

// ISDELAYBUFFERABLE is a free data retrieval call binding the contract method 0xe8180c29.
//
// Solidity: function IS_DELAY_BUFFERABLE() view returns(bool)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) ISDELAYBUFFERABLE() (bool, error) {
	return _BOLDUpgradeAction.Contract.ISDELAYBUFFERABLE(&_BOLDUpgradeAction.CallOpts)
}

// L1TIMELOCK is a free data retrieval call binding the contract method 0xbf5e3d52.
//
// Solidity: function L1_TIMELOCK() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) L1TIMELOCK(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "L1_TIMELOCK")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1TIMELOCK is a free data retrieval call binding the contract method 0xbf5e3d52.
//
// Solidity: function L1_TIMELOCK() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) L1TIMELOCK() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.L1TIMELOCK(&_BOLDUpgradeAction.CallOpts)
}

// L1TIMELOCK is a free data retrieval call binding the contract method 0xbf5e3d52.
//
// Solidity: function L1_TIMELOCK() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) L1TIMELOCK() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.L1TIMELOCK(&_BOLDUpgradeAction.CallOpts)
}

// MAX is a free data retrieval call binding the contract method 0xd49d5181.
//
// Solidity: function MAX() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) MAX(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "MAX")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// MAX is a free data retrieval call binding the contract method 0xd49d5181.
//
// Solidity: function MAX() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) MAX() (uint64, error) {
	return _BOLDUpgradeAction.Contract.MAX(&_BOLDUpgradeAction.CallOpts)
}

// MAX is a free data retrieval call binding the contract method 0xd49d5181.
//
// Solidity: function MAX() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) MAX() (uint64, error) {
	return _BOLDUpgradeAction.Contract.MAX(&_BOLDUpgradeAction.CallOpts)
}

// MINISTAKEAMOUNTSSTORAGE is a free data retrieval call binding the contract method 0xb5e00c3f.
//
// Solidity: function MINI_STAKE_AMOUNTS_STORAGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) MINISTAKEAMOUNTSSTORAGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "MINI_STAKE_AMOUNTS_STORAGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MINISTAKEAMOUNTSSTORAGE is a free data retrieval call binding the contract method 0xb5e00c3f.
//
// Solidity: function MINI_STAKE_AMOUNTS_STORAGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) MINISTAKEAMOUNTSSTORAGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.MINISTAKEAMOUNTSSTORAGE(&_BOLDUpgradeAction.CallOpts)
}

// MINISTAKEAMOUNTSSTORAGE is a free data retrieval call binding the contract method 0xb5e00c3f.
//
// Solidity: function MINI_STAKE_AMOUNTS_STORAGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) MINISTAKEAMOUNTSSTORAGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.MINISTAKEAMOUNTSSTORAGE(&_BOLDUpgradeAction.CallOpts)
}

// NUMBIGSTEPLEVEL is a free data retrieval call binding the contract method 0x5d9e2444.
//
// Solidity: function NUM_BIGSTEP_LEVEL() view returns(uint8)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) NUMBIGSTEPLEVEL(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "NUM_BIGSTEP_LEVEL")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// NUMBIGSTEPLEVEL is a free data retrieval call binding the contract method 0x5d9e2444.
//
// Solidity: function NUM_BIGSTEP_LEVEL() view returns(uint8)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) NUMBIGSTEPLEVEL() (uint8, error) {
	return _BOLDUpgradeAction.Contract.NUMBIGSTEPLEVEL(&_BOLDUpgradeAction.CallOpts)
}

// NUMBIGSTEPLEVEL is a free data retrieval call binding the contract method 0x5d9e2444.
//
// Solidity: function NUM_BIGSTEP_LEVEL() view returns(uint8)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) NUMBIGSTEPLEVEL() (uint8, error) {
	return _BOLDUpgradeAction.Contract.NUMBIGSTEPLEVEL(&_BOLDUpgradeAction.CallOpts)
}

// OLDROLLUP is a free data retrieval call binding the contract method 0x8765240f.
//
// Solidity: function OLD_ROLLUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) OLDROLLUP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "OLD_ROLLUP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OLDROLLUP is a free data retrieval call binding the contract method 0x8765240f.
//
// Solidity: function OLD_ROLLUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) OLDROLLUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OLDROLLUP(&_BOLDUpgradeAction.CallOpts)
}

// OLDROLLUP is a free data retrieval call binding the contract method 0x8765240f.
//
// Solidity: function OLD_ROLLUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) OLDROLLUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OLDROLLUP(&_BOLDUpgradeAction.CallOpts)
}

// OSP is a free data retrieval call binding the contract method 0x9f9854e5.
//
// Solidity: function OSP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) OSP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "OSP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OSP is a free data retrieval call binding the contract method 0x9f9854e5.
//
// Solidity: function OSP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) OSP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OSP(&_BOLDUpgradeAction.CallOpts)
}

// OSP is a free data retrieval call binding the contract method 0x9f9854e5.
//
// Solidity: function OSP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) OSP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OSP(&_BOLDUpgradeAction.CallOpts)
}

// OUTBOX is a free data retrieval call binding the contract method 0x1b142ea7.
//
// Solidity: function OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) OUTBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "OUTBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OUTBOX is a free data retrieval call binding the contract method 0x1b142ea7.
//
// Solidity: function OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) OUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// OUTBOX is a free data retrieval call binding the contract method 0x1b142ea7.
//
// Solidity: function OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) OUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.OUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// PREIMAGELOOKUP is a free data retrieval call binding the contract method 0xcc8089bb.
//
// Solidity: function PREIMAGE_LOOKUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PREIMAGELOOKUP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PREIMAGE_LOOKUP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PREIMAGELOOKUP is a free data retrieval call binding the contract method 0xcc8089bb.
//
// Solidity: function PREIMAGE_LOOKUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PREIMAGELOOKUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PREIMAGELOOKUP(&_BOLDUpgradeAction.CallOpts)
}

// PREIMAGELOOKUP is a free data retrieval call binding the contract method 0xcc8089bb.
//
// Solidity: function PREIMAGE_LOOKUP() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PREIMAGELOOKUP() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PREIMAGELOOKUP(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINBRIDGE is a free data retrieval call binding the contract method 0x0a54257d.
//
// Solidity: function PROXY_ADMIN_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINBRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINBRIDGE is a free data retrieval call binding the contract method 0x0a54257d.
//
// Solidity: function PROXY_ADMIN_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINBRIDGE is a free data retrieval call binding the contract method 0x0a54257d.
//
// Solidity: function PROXY_ADMIN_BRIDGE() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINBRIDGE() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINBRIDGE(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMININBOX is a free data retrieval call binding the contract method 0x4b2f51ef.
//
// Solidity: function PROXY_ADMIN_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMININBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMININBOX is a free data retrieval call binding the contract method 0x4b2f51ef.
//
// Solidity: function PROXY_ADMIN_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMININBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMININBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMININBOX is a free data retrieval call binding the contract method 0x4b2f51ef.
//
// Solidity: function PROXY_ADMIN_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMININBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMININBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINOUTBOX is a free data retrieval call binding the contract method 0x0787484b.
//
// Solidity: function PROXY_ADMIN_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINOUTBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_OUTBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINOUTBOX is a free data retrieval call binding the contract method 0x0787484b.
//
// Solidity: function PROXY_ADMIN_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINOUTBOX is a free data retrieval call binding the contract method 0x0787484b.
//
// Solidity: function PROXY_ADMIN_OUTBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINOUTBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINOUTBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINREI is a free data retrieval call binding the contract method 0x3c2b7840.
//
// Solidity: function PROXY_ADMIN_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINREI(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_REI")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINREI is a free data retrieval call binding the contract method 0x3c2b7840.
//
// Solidity: function PROXY_ADMIN_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINREI(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINREI is a free data retrieval call binding the contract method 0x3c2b7840.
//
// Solidity: function PROXY_ADMIN_REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINREI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINREI(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINSEQUENCERINBOX is a free data retrieval call binding the contract method 0x2cfb7ca3.
//
// Solidity: function PROXY_ADMIN_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) PROXYADMINSEQUENCERINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "PROXY_ADMIN_SEQUENCER_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROXYADMINSEQUENCERINBOX is a free data retrieval call binding the contract method 0x2cfb7ca3.
//
// Solidity: function PROXY_ADMIN_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) PROXYADMINSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// PROXYADMINSEQUENCERINBOX is a free data retrieval call binding the contract method 0x2cfb7ca3.
//
// Solidity: function PROXY_ADMIN_SEQUENCER_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) PROXYADMINSEQUENCERINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.PROXYADMINSEQUENCERINBOX(&_BOLDUpgradeAction.CallOpts)
}

// REI is a free data retrieval call binding the contract method 0xbe41b367.
//
// Solidity: function REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) REI(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "REI")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// REI is a free data retrieval call binding the contract method 0xbe41b367.
//
// Solidity: function REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) REI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.REI(&_BOLDUpgradeAction.CallOpts)
}

// REI is a free data retrieval call binding the contract method 0xbe41b367.
//
// Solidity: function REI() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) REI() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.REI(&_BOLDUpgradeAction.CallOpts)
}

// REPLENISHRATEINBASIS is a free data retrieval call binding the contract method 0xeb657a4e.
//
// Solidity: function REPLENISH_RATE_IN_BASIS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) REPLENISHRATEINBASIS(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "REPLENISH_RATE_IN_BASIS")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// REPLENISHRATEINBASIS is a free data retrieval call binding the contract method 0xeb657a4e.
//
// Solidity: function REPLENISH_RATE_IN_BASIS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) REPLENISHRATEINBASIS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.REPLENISHRATEINBASIS(&_BOLDUpgradeAction.CallOpts)
}

// REPLENISHRATEINBASIS is a free data retrieval call binding the contract method 0xeb657a4e.
//
// Solidity: function REPLENISH_RATE_IN_BASIS() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) REPLENISHRATEINBASIS() (uint64, error) {
	return _BOLDUpgradeAction.Contract.REPLENISHRATEINBASIS(&_BOLDUpgradeAction.CallOpts)
}

// ROLLUPREADER is a free data retrieval call binding the contract method 0x4e0e75fb.
//
// Solidity: function ROLLUP_READER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) ROLLUPREADER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "ROLLUP_READER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ROLLUPREADER is a free data retrieval call binding the contract method 0x4e0e75fb.
//
// Solidity: function ROLLUP_READER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) ROLLUPREADER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ROLLUPREADER(&_BOLDUpgradeAction.CallOpts)
}

// ROLLUPREADER is a free data retrieval call binding the contract method 0x4e0e75fb.
//
// Solidity: function ROLLUP_READER() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) ROLLUPREADER() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.ROLLUPREADER(&_BOLDUpgradeAction.CallOpts)
}

// SEQINBOX is a free data retrieval call binding the contract method 0xd384cb95.
//
// Solidity: function SEQ_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) SEQINBOX(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "SEQ_INBOX")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SEQINBOX is a free data retrieval call binding the contract method 0xd384cb95.
//
// Solidity: function SEQ_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) SEQINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.SEQINBOX(&_BOLDUpgradeAction.CallOpts)
}

// SEQINBOX is a free data retrieval call binding the contract method 0xd384cb95.
//
// Solidity: function SEQ_INBOX() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) SEQINBOX() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.SEQINBOX(&_BOLDUpgradeAction.CallOpts)
}

// SMALLSTEPLEAFSIZE is a free data retrieval call binding the contract method 0xfa287420.
//
// Solidity: function SMALLSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) SMALLSTEPLEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "SMALLSTEP_LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SMALLSTEPLEAFSIZE is a free data retrieval call binding the contract method 0xfa287420.
//
// Solidity: function SMALLSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) SMALLSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.SMALLSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// SMALLSTEPLEAFSIZE is a free data retrieval call binding the contract method 0xfa287420.
//
// Solidity: function SMALLSTEP_LEAF_SIZE() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) SMALLSTEPLEAFSIZE() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.SMALLSTEPLEAFSIZE(&_BOLDUpgradeAction.CallOpts)
}

// STAKEAMOUNT is a free data retrieval call binding the contract method 0xfaf5625f.
//
// Solidity: function STAKE_AMOUNT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) STAKEAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "STAKE_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STAKEAMOUNT is a free data retrieval call binding the contract method 0xfaf5625f.
//
// Solidity: function STAKE_AMOUNT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) STAKEAMOUNT() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.STAKEAMOUNT(&_BOLDUpgradeAction.CallOpts)
}

// STAKEAMOUNT is a free data retrieval call binding the contract method 0xfaf5625f.
//
// Solidity: function STAKE_AMOUNT() view returns(uint256)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) STAKEAMOUNT() (*big.Int, error) {
	return _BOLDUpgradeAction.Contract.STAKEAMOUNT(&_BOLDUpgradeAction.CallOpts)
}

// STAKETOKEN is a free data retrieval call binding the contract method 0x1c39b672.
//
// Solidity: function STAKE_TOKEN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) STAKETOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "STAKE_TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// STAKETOKEN is a free data retrieval call binding the contract method 0x1c39b672.
//
// Solidity: function STAKE_TOKEN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) STAKETOKEN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.STAKETOKEN(&_BOLDUpgradeAction.CallOpts)
}

// STAKETOKEN is a free data retrieval call binding the contract method 0x1c39b672.
//
// Solidity: function STAKE_TOKEN() view returns(address)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) STAKETOKEN() (common.Address, error) {
	return _BOLDUpgradeAction.Contract.STAKETOKEN(&_BOLDUpgradeAction.CallOpts)
}

// THRESHOLD is a free data retrieval call binding the contract method 0x785ffb37.
//
// Solidity: function THRESHOLD() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCaller) THRESHOLD(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _BOLDUpgradeAction.contract.Call(opts, &out, "THRESHOLD")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// THRESHOLD is a free data retrieval call binding the contract method 0x785ffb37.
//
// Solidity: function THRESHOLD() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) THRESHOLD() (uint64, error) {
	return _BOLDUpgradeAction.Contract.THRESHOLD(&_BOLDUpgradeAction.CallOpts)
}

// THRESHOLD is a free data retrieval call binding the contract method 0x785ffb37.
//
// Solidity: function THRESHOLD() view returns(uint64)
func (_BOLDUpgradeAction *BOLDUpgradeActionCallerSession) THRESHOLD() (uint64, error) {
	return _BOLDUpgradeAction.Contract.THRESHOLD(&_BOLDUpgradeAction.CallOpts)
}

// Perform is a paid mutator transaction binding the contract method 0xebe03a93.
//
// Solidity: function perform(address[] validators) returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactor) Perform(opts *bind.TransactOpts, validators []common.Address) (*types.Transaction, error) {
	return _BOLDUpgradeAction.contract.Transact(opts, "perform", validators)
}

// Perform is a paid mutator transaction binding the contract method 0xebe03a93.
//
// Solidity: function perform(address[] validators) returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionSession) Perform(validators []common.Address) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.Perform(&_BOLDUpgradeAction.TransactOpts, validators)
}

// Perform is a paid mutator transaction binding the contract method 0xebe03a93.
//
// Solidity: function perform(address[] validators) returns()
func (_BOLDUpgradeAction *BOLDUpgradeActionTransactorSession) Perform(validators []common.Address) (*types.Transaction, error) {
	return _BOLDUpgradeAction.Contract.Perform(&_BOLDUpgradeAction.TransactOpts, validators)
}

// BOLDUpgradeActionRollupMigratedIterator is returned from FilterRollupMigrated and is used to iterate over the raw logs and unpacked data for RollupMigrated events raised by the BOLDUpgradeAction contract.
type BOLDUpgradeActionRollupMigratedIterator struct {
	Event *BOLDUpgradeActionRollupMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BOLDUpgradeActionRollupMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BOLDUpgradeActionRollupMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BOLDUpgradeActionRollupMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BOLDUpgradeActionRollupMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BOLDUpgradeActionRollupMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BOLDUpgradeActionRollupMigrated represents a RollupMigrated event raised by the BOLDUpgradeAction contract.
type BOLDUpgradeActionRollupMigrated struct {
	Rollup           common.Address
	ChallengeManager common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterRollupMigrated is a free log retrieval operation binding the contract event 0x7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314.
//
// Solidity: event RollupMigrated(address rollup, address challengeManager)
func (_BOLDUpgradeAction *BOLDUpgradeActionFilterer) FilterRollupMigrated(opts *bind.FilterOpts) (*BOLDUpgradeActionRollupMigratedIterator, error) {

	logs, sub, err := _BOLDUpgradeAction.contract.FilterLogs(opts, "RollupMigrated")
	if err != nil {
		return nil, err
	}
	return &BOLDUpgradeActionRollupMigratedIterator{contract: _BOLDUpgradeAction.contract, event: "RollupMigrated", logs: logs, sub: sub}, nil
}

// WatchRollupMigrated is a free log subscription operation binding the contract event 0x7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314.
//
// Solidity: event RollupMigrated(address rollup, address challengeManager)
func (_BOLDUpgradeAction *BOLDUpgradeActionFilterer) WatchRollupMigrated(opts *bind.WatchOpts, sink chan<- *BOLDUpgradeActionRollupMigrated) (event.Subscription, error) {

	logs, sub, err := _BOLDUpgradeAction.contract.WatchLogs(opts, "RollupMigrated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BOLDUpgradeActionRollupMigrated)
				if err := _BOLDUpgradeAction.contract.UnpackLog(event, "RollupMigrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupMigrated is a log parse operation binding the contract event 0x7e5cc5c3fce046d868d5918548df8d3e8ef9f09e6fb30a68081f1f1348cd0314.
//
// Solidity: event RollupMigrated(address rollup, address challengeManager)
func (_BOLDUpgradeAction *BOLDUpgradeActionFilterer) ParseRollupMigrated(log types.Log) (*BOLDUpgradeActionRollupMigrated, error) {
	event := new(BOLDUpgradeActionRollupMigrated)
	if err := _BOLDUpgradeAction.contract.UnpackLog(event, "RollupMigrated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorMetaData contains all meta data concerning the BridgeCreator contract.
var BridgeCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeTemplates\",\"name\":\"_ethBasedTemplates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeTemplates\",\"name\":\"_erc20BasedTemplates\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ERC20TemplatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"maxTimeVariation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"}],\"name\":\"createBridge\",\"outputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeContracts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20BasedTemplates\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBasedTemplates\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeTemplates\",\"name\":\"_newTemplates\",\"type\":\"tuple\"}],\"name\":\"updateERC20Templates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"delayBufferableSequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"}],\"internalType\":\"structBridgeCreator.BridgeTemplates\",\"name\":\"_newTemplates\",\"type\":\"tuple\"}],\"name\":\"updateTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162001f6638038062001f66833981016040819052620000349162000268565b6200003f336200013e565b8151600180546001600160a01b03199081166001600160a01b039384161790915560208085015160028054841691851691909117905560408086015160038054851691861691909117905560608087015160048054861691871691909117905560808088015160058054871691881691909117905560a09788015160068054871691881691909117905586516007805487169188169190911790559286015160088054861691871691909117905590850151600980548516918616919091179055840151600a80548416918516919091179055830151600b805483169184169190911790559190920151600c80549092169216919091179055620002a3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001a657600080fd5b919050565b600060c08284031215620001be57600080fd5b60405160c081016001600160401b0381118282101715620001ef57634e487b7160e01b600052604160045260246000fd5b60405290508062000200836200018e565b815262000210602084016200018e565b602082015262000223604084016200018e565b604082015262000236606084016200018e565b606082015262000249608084016200018e565b60808201526200025c60a084016200018e565b60a08201525092915050565b60008061018083850312156200027d57600080fd5b620002898484620001ab565b91506200029a8460c08501620001ab565b90509250929050565b611cb380620002b36000396000f3fe60806040523480156200001157600080fd5b5060043610620000935760003560e01c80638da5cb5b11620000625780638da5cb5b14620001b8578063ceab941014620001d4578063e83b0e1614620001eb578063f2fde38b146200020257600080fd5b806311f02227146200009857806357d3a2001462000112578063715018a6146200017957806376768ab91462000185575b600080fd5b600154600254600354600454600554600654620000cb956001600160a01b03908116958116948116938116928116911686565b604080516001600160a01b03978816815295871660208701529386169385019390935290841660608401528316608083015290911660a082015260c0015b60405180910390f35b620001296200012336600462000a80565b62000219565b60405162000109919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151821690830152608092830151169181019190915260a00190565b62000183620005c0565b005b600754600854600954600a54600b54600c54620000cb956001600160a01b03908116958116948116938116928116911686565b6000546040516001600160a01b03909116815260200162000109565b62000183620001e536600462000b47565b620005d8565b62000183620001fc36600462000b47565b6200061f565b620001836200021336600462000b60565b62000666565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600062000255602084018462000ba5565b67ffffffffffffffff16151590506000620002e3886001600160a01b038816156200028257600762000285565b60015b6040805160c08101825282546001600160a01b03908116825260018401548116602083015260028401548116928201929092526003830154821660608201526004830154821660808201526005909201541660a0820152846200071a565b90506001600160a01b0386166200035a57805160405163189acdbd60e31b81526001600160a01b0389811660048301529091169063c4d66de890602401600060405180830381600087803b1580156200033b57600080fd5b505af115801562000350573d6000803e3d6000fd5b50505050620003dc565b80516040517f485cc9550000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301529091169063485cc95590604401600060405180830381600087803b158015620003c257600080fd5b505af1158015620003d7573d6000803e3d6000fd5b505050505b604080820151825191517f1ad87e450000000000000000000000000000000000000000000000000000000081526001600160a01b0390911691631ad87e45916200042e91908990899060040162000bc3565b600060405180830381600087803b1580156200044957600080fd5b505af11580156200045e573d6000803e3d6000fd5b505050506020810151815160408084015190517f485cc9550000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015291169063485cc95590604401600060405180830381600087803b158015620004d357600080fd5b505af1158015620004e8573d6000803e3d6000fd5b505050506060810151815160405163189acdbd60e31b81526001600160a01b03918216600482015291169063c4d66de890602401600060405180830381600087803b1580156200053757600080fd5b505af11580156200054c573d6000803e3d6000fd5b505050506080810151815160405163189acdbd60e31b81526001600160a01b03918216600482015291169063c4d66de890602401600060405180830381600087803b1580156200059b57600080fd5b505af1158015620005b0573d6000803e3d6000fd5b50929a9950505050505050505050565b620005ca62000989565b620005d66000620009ff565b565b620005e262000989565b806007620005f1828262000c4b565b50506040517fa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e90600090a150565b6200062962000989565b80600162000638828262000c4b565b50506040517fc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b90600090a150565b6200067062000989565b6001600160a01b0381166200070c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6200071781620009ff565b50565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a08101825260008082526020820181905291810182905260608101829052608081019190915283516040518690620007829062000a5c565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f080158015620007c5573d6000803e3d6000fd5b506001600160a01b0316815282620007e2578360200151620007e8565b83604001515b85604051620007f79062000a5c565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f0801580156200083a573d6000803e3d6000fd5b506001600160a01b0316604080830191909152606085015190518690620008619062000a5c565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f080158015620008a4573d6000803e3d6000fd5b506001600160a01b0316602082015260808401516040518690620008c89062000a5c565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f0801580156200090b573d6000803e3d6000fd5b506001600160a01b0316606082015260a084015160405186906200092f9062000a5c565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f08015801562000972573d6000803e3d6000fd5b506001600160a01b03166080820152949350505050565b6000546001600160a01b03163314620005d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000703565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ed38062000dab83390190565b6001600160a01b03811681146200071757600080fd5b600080600080600085870361014081121562000a9b57600080fd5b863562000aa88162000a6a565b9550602087013562000aba8162000a6a565b9450604087013562000acc8162000a6a565b935060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08201121562000aff57600080fd5b60608701925060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff208201121562000b3657600080fd5b5060e0860190509295509295909350565b600060c0828403121562000b5a57600080fd5b50919050565b60006020828403121562000b7357600080fd5b813562000b808162000a6a565b9392505050565b803567ffffffffffffffff8116811462000ba057600080fd5b919050565b60006020828403121562000bb857600080fd5b62000b808262000b87565b6000610100820190506001600160a01b03851682528335602083015260208401356040830152604084013560608301526060840135608083015267ffffffffffffffff8062000c128562000b87565b1660a08401528062000c276020860162000b87565b1660c08401528062000c3c6040860162000b87565b1660e084015250949350505050565b813562000c588162000a6a565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03821617825550602082013562000c8f8162000a6a565b60018201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550604082013562000cca8162000a6a565b60028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550606082013562000d058162000a6a565b60038201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550608082013562000d408162000a6a565b60048201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790555060a082013562000d7b8162000a6a565b60058201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831617905550505056fe608060405260405162000ed338038062000ed3833981016040819052620000269162000487565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ba565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b6200023e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000eac60279139620002f8565b9392505050565b60006200018060008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200026a1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620001fa1760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000567565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f1919062000585565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b50506000910152565b6000806000606084860312156200049d57600080fd5b620004a8846200042e565b9250620004b8602085016200042e565b60408501519092506001600160401b0380821115620004d657600080fd5b818601915086601f830112620004eb57600080fd5b8151818111156200050057620005006200044b565b604051601f8201601f19908116603f011681019083821181831017156200052b576200052b6200044b565b816040528281528960208487010111156200054557600080fd5b6200055883602083016020880162000461565b80955050505050509250925092565b600082516200057b81846020870162000461565b9190910192915050565b6020815260008251806020840152620005a681604085016020870162000461565b601f01601f19169190910160400192915050565b6108c280620005ca6000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100d9578063f851a440146100f95761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61010e565b005b61006b61010e565b34801561008157600080fd5b5061006b610090366004610736565b610128565b61006b6100a3366004610751565b610165565b3480156100b457600080fd5b506100bd6101cc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e557600080fd5b5061006b6100f4366004610736565b6101fd565b34801561010557600080fd5b506100bd61021d565b610116610279565b610126610121610329565b610333565b565b610130610357565b6001600160a01b0316330361015d5761015a8160405180602001604052806000815250600061038a565b50565b61015a61010e565b61016d610357565b6001600160a01b031633036101c4576101bf8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061038a915050565b505050565b6101bf61010e565b60006101d6610357565b6001600160a01b031633036101f2576101ed610329565b905090565b6101fa61010e565b90565b610205610357565b6001600160a01b0316330361015d5761015a816103b5565b6000610227610357565b6001600160a01b031633036101f2576101ed610357565b6060610263838360405180606001604052806027815260200161086660279139610409565b9392505050565b6001600160a01b03163b151590565b610281610357565b6001600160a01b031633036101265760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60006101ed6104fd565b3660008037600080366000845af43d6000803e808015610352573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039383610525565b6000825111806103a05750805b156101bf576103af838361023e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103de610357565b604080516001600160a01b03928316815291841660208301520160405180910390a161015a81610565565b60606001600160a01b0384163b6104885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610320565b600080856001600160a01b0316856040516104a391906107f8565b600060405180830381855af49150503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50915091506104f382828661063d565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61037b565b61052e81610676565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105e15760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610320565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6060831561064c575081610263565b82511561065c5782518084602001fd5b8160405162461bcd60e51b81526004016103209190610814565b6001600160a01b0381163b6106f35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610320565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610604565b80356001600160a01b038116811461073157600080fd5b919050565b60006020828403121561074857600080fd5b6102638261071a565b60008060006040848603121561076657600080fd5b61076f8461071a565b9250602084013567ffffffffffffffff8082111561078c57600080fd5b818601915086601f8301126107a057600080fd5b8135818111156107af57600080fd5b8760208285010111156107c157600080fd5b6020830194508093505050509250925092565b60005b838110156107ef5781810151838201526020016107d7565b50506000910152565b6000825161080a8184602087016107d4565b9190910192915050565b60208152600082518060208401526108338160408501602087016107d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c1888b421836e473bfc3e72d153dc5c76569ce769e37cfa444506490e142daa564736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e658a1f22074c54ee589fdffc99172894def39e1ced6c91f351ce3a39500c7c364736f6c63430008110033",
}

// BridgeCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeCreatorMetaData.ABI instead.
var BridgeCreatorABI = BridgeCreatorMetaData.ABI

// BridgeCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeCreatorMetaData.Bin instead.
var BridgeCreatorBin = BridgeCreatorMetaData.Bin

// DeployBridgeCreator deploys a new Ethereum contract, binding an instance of BridgeCreator to it.
func DeployBridgeCreator(auth *bind.TransactOpts, backend bind.ContractBackend, _ethBasedTemplates BridgeCreatorBridgeTemplates, _erc20BasedTemplates BridgeCreatorBridgeTemplates) (common.Address, *types.Transaction, *BridgeCreator, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeCreatorBin), backend, _ethBasedTemplates, _erc20BasedTemplates)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// BridgeCreator is an auto generated Go binding around an Ethereum contract.
type BridgeCreator struct {
	BridgeCreatorCaller     // Read-only binding to the contract
	BridgeCreatorTransactor // Write-only binding to the contract
	BridgeCreatorFilterer   // Log filterer for contract events
}

// BridgeCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeCreatorSession struct {
	Contract     *BridgeCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCreatorCallerSession struct {
	Contract *BridgeCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// BridgeCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeCreatorTransactorSession struct {
	Contract     *BridgeCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BridgeCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeCreatorRaw struct {
	Contract *BridgeCreator // Generic contract binding to access the raw methods on
}

// BridgeCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCreatorCallerRaw struct {
	Contract *BridgeCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeCreatorTransactorRaw struct {
	Contract *BridgeCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeCreator creates a new instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreator(address common.Address, backend bind.ContractBackend) (*BridgeCreator, error) {
	contract, err := bindBridgeCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeCreator{BridgeCreatorCaller: BridgeCreatorCaller{contract: contract}, BridgeCreatorTransactor: BridgeCreatorTransactor{contract: contract}, BridgeCreatorFilterer: BridgeCreatorFilterer{contract: contract}}, nil
}

// NewBridgeCreatorCaller creates a new read-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorCaller(address common.Address, caller bind.ContractCaller) (*BridgeCreatorCaller, error) {
	contract, err := bindBridgeCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorCaller{contract: contract}, nil
}

// NewBridgeCreatorTransactor creates a new write-only instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeCreatorTransactor, error) {
	contract, err := bindBridgeCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTransactor{contract: contract}, nil
}

// NewBridgeCreatorFilterer creates a new log filterer instance of BridgeCreator, bound to a specific deployed contract.
func NewBridgeCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeCreatorFilterer, error) {
	contract, err := bindBridgeCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorFilterer{contract: contract}, nil
}

// bindBridgeCreator binds a generic wrapper to an already deployed contract.
func bindBridgeCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.BridgeCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.BridgeCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeCreator *BridgeCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeCreator *BridgeCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeCreator.Contract.contract.Transact(opts, method, params...)
}

// Erc20BasedTemplates is a free data retrieval call binding the contract method 0x76768ab9.
//
// Solidity: function erc20BasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCaller) Erc20BasedTemplates(opts *bind.CallOpts) (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "erc20BasedTemplates")

	outstruct := new(struct {
		Bridge                        common.Address
		SequencerInbox                common.Address
		DelayBufferableSequencerInbox common.Address
		Inbox                         common.Address
		RollupEventInbox              common.Address
		Outbox                        common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Bridge = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.SequencerInbox = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.DelayBufferableSequencerInbox = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Inbox = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RollupEventInbox = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Outbox = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Erc20BasedTemplates is a free data retrieval call binding the contract method 0x76768ab9.
//
// Solidity: function erc20BasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorSession) Erc20BasedTemplates() (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	return _BridgeCreator.Contract.Erc20BasedTemplates(&_BridgeCreator.CallOpts)
}

// Erc20BasedTemplates is a free data retrieval call binding the contract method 0x76768ab9.
//
// Solidity: function erc20BasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCallerSession) Erc20BasedTemplates() (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	return _BridgeCreator.Contract.Erc20BasedTemplates(&_BridgeCreator.CallOpts)
}

// EthBasedTemplates is a free data retrieval call binding the contract method 0x11f02227.
//
// Solidity: function ethBasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCaller) EthBasedTemplates(opts *bind.CallOpts) (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "ethBasedTemplates")

	outstruct := new(struct {
		Bridge                        common.Address
		SequencerInbox                common.Address
		DelayBufferableSequencerInbox common.Address
		Inbox                         common.Address
		RollupEventInbox              common.Address
		Outbox                        common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Bridge = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.SequencerInbox = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.DelayBufferableSequencerInbox = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Inbox = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.RollupEventInbox = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Outbox = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// EthBasedTemplates is a free data retrieval call binding the contract method 0x11f02227.
//
// Solidity: function ethBasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorSession) EthBasedTemplates() (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	return _BridgeCreator.Contract.EthBasedTemplates(&_BridgeCreator.CallOpts)
}

// EthBasedTemplates is a free data retrieval call binding the contract method 0x11f02227.
//
// Solidity: function ethBasedTemplates() view returns(address bridge, address sequencerInbox, address delayBufferableSequencerInbox, address inbox, address rollupEventInbox, address outbox)
func (_BridgeCreator *BridgeCreatorCallerSession) EthBasedTemplates() (struct {
	Bridge                        common.Address
	SequencerInbox                common.Address
	DelayBufferableSequencerInbox common.Address
	Inbox                         common.Address
	RollupEventInbox              common.Address
	Outbox                        common.Address
}, error) {
	return _BridgeCreator.Contract.EthBasedTemplates(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BridgeCreator *BridgeCreatorCallerSession) Owner() (common.Address, error) {
	return _BridgeCreator.Contract.Owner(&_BridgeCreator.CallOpts)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x57d3a200.
//
// Solidity: function createBridge(address adminProxy, address rollup, address nativeToken, (uint256,uint256,uint256,uint256) maxTimeVariation, (uint64,uint64,uint64) bufferConfig) returns((address,address,address,address,address))
func (_BridgeCreator *BridgeCreatorTransactor) CreateBridge(opts *bind.TransactOpts, adminProxy common.Address, rollup common.Address, nativeToken common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation, bufferConfig BufferConfig) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "createBridge", adminProxy, rollup, nativeToken, maxTimeVariation, bufferConfig)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x57d3a200.
//
// Solidity: function createBridge(address adminProxy, address rollup, address nativeToken, (uint256,uint256,uint256,uint256) maxTimeVariation, (uint64,uint64,uint64) bufferConfig) returns((address,address,address,address,address))
func (_BridgeCreator *BridgeCreatorSession) CreateBridge(adminProxy common.Address, rollup common.Address, nativeToken common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation, bufferConfig BufferConfig) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, nativeToken, maxTimeVariation, bufferConfig)
}

// CreateBridge is a paid mutator transaction binding the contract method 0x57d3a200.
//
// Solidity: function createBridge(address adminProxy, address rollup, address nativeToken, (uint256,uint256,uint256,uint256) maxTimeVariation, (uint64,uint64,uint64) bufferConfig) returns((address,address,address,address,address))
func (_BridgeCreator *BridgeCreatorTransactorSession) CreateBridge(adminProxy common.Address, rollup common.Address, nativeToken common.Address, maxTimeVariation ISequencerInboxMaxTimeVariation, bufferConfig BufferConfig) (*types.Transaction, error) {
	return _BridgeCreator.Contract.CreateBridge(&_BridgeCreator.TransactOpts, adminProxy, rollup, nativeToken, maxTimeVariation, bufferConfig)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BridgeCreator.Contract.RenounceOwnership(&_BridgeCreator.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BridgeCreator.Contract.TransferOwnership(&_BridgeCreator.TransactOpts, newOwner)
}

// UpdateERC20Templates is a paid mutator transaction binding the contract method 0xceab9410.
//
// Solidity: function updateERC20Templates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactor) UpdateERC20Templates(opts *bind.TransactOpts, _newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "updateERC20Templates", _newTemplates)
}

// UpdateERC20Templates is a paid mutator transaction binding the contract method 0xceab9410.
//
// Solidity: function updateERC20Templates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorSession) UpdateERC20Templates(_newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateERC20Templates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// UpdateERC20Templates is a paid mutator transaction binding the contract method 0xceab9410.
//
// Solidity: function updateERC20Templates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) UpdateERC20Templates(_newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateERC20Templates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0xe83b0e16.
//
// Solidity: function updateTemplates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactor) UpdateTemplates(opts *bind.TransactOpts, _newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.contract.Transact(opts, "updateTemplates", _newTemplates)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0xe83b0e16.
//
// Solidity: function updateTemplates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorSession) UpdateTemplates(_newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// UpdateTemplates is a paid mutator transaction binding the contract method 0xe83b0e16.
//
// Solidity: function updateTemplates((address,address,address,address,address,address) _newTemplates) returns()
func (_BridgeCreator *BridgeCreatorTransactorSession) UpdateTemplates(_newTemplates BridgeCreatorBridgeTemplates) (*types.Transaction, error) {
	return _BridgeCreator.Contract.UpdateTemplates(&_BridgeCreator.TransactOpts, _newTemplates)
}

// BridgeCreatorERC20TemplatesUpdatedIterator is returned from FilterERC20TemplatesUpdated and is used to iterate over the raw logs and unpacked data for ERC20TemplatesUpdated events raised by the BridgeCreator contract.
type BridgeCreatorERC20TemplatesUpdatedIterator struct {
	Event *BridgeCreatorERC20TemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorERC20TemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorERC20TemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorERC20TemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorERC20TemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorERC20TemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorERC20TemplatesUpdated represents a ERC20TemplatesUpdated event raised by the BridgeCreator contract.
type BridgeCreatorERC20TemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterERC20TemplatesUpdated is a free log retrieval operation binding the contract event 0xa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e.
//
// Solidity: event ERC20TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) FilterERC20TemplatesUpdated(opts *bind.FilterOpts) (*BridgeCreatorERC20TemplatesUpdatedIterator, error) {

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "ERC20TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorERC20TemplatesUpdatedIterator{contract: _BridgeCreator.contract, event: "ERC20TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchERC20TemplatesUpdated is a free log subscription operation binding the contract event 0xa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e.
//
// Solidity: event ERC20TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) WatchERC20TemplatesUpdated(opts *bind.WatchOpts, sink chan<- *BridgeCreatorERC20TemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "ERC20TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorERC20TemplatesUpdated)
				if err := _BridgeCreator.contract.UnpackLog(event, "ERC20TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20TemplatesUpdated is a log parse operation binding the contract event 0xa47434bb6d1ddd5521e8980ded6a783513e159f80437d78715b10e6e8b6bba5e.
//
// Solidity: event ERC20TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) ParseERC20TemplatesUpdated(log types.Log) (*BridgeCreatorERC20TemplatesUpdated, error) {
	event := new(BridgeCreatorERC20TemplatesUpdated)
	if err := _BridgeCreator.contract.UnpackLog(event, "ERC20TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferredIterator struct {
	Event *BridgeCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the BridgeCreator contract.
type BridgeCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorOwnershipTransferredIterator{contract: _BridgeCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorOwnershipTransferred)
				if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BridgeCreator *BridgeCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeCreatorOwnershipTransferred, error) {
	event := new(BridgeCreatorOwnershipTransferred)
	if err := _BridgeCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdatedIterator struct {
	Event *BridgeCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the BridgeCreator contract.
type BridgeCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*BridgeCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _BridgeCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &BridgeCreatorTemplatesUpdatedIterator{contract: _BridgeCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *BridgeCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _BridgeCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeCreatorTemplatesUpdated)
				if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_BridgeCreator *BridgeCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*BridgeCreatorTemplatesUpdated, error) {
	event := new(BridgeCreatorTemplatesUpdated)
	if err := _BridgeCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ConstantArrayStorageMetaData contains all meta data concerning the ConstantArrayStorage contract.
var ConstantArrayStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"__array\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"array\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506040516102a03803806102a083398101604081905261002f916100bf565b8051610042906000906020840190610049565b505061017c565b828054828255906000526020600020908101928215610084579160200282015b82811115610084578251825591602001919060010190610069565b50610090929150610094565b5090565b5b808211156100905760008155600101610095565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156100d257600080fd5b82516001600160401b03808211156100e957600080fd5b818501915085601f8301126100fd57600080fd5b81518181111561010f5761010f6100a9565b8060051b604051601f19603f83011681018181108582111715610134576101346100a9565b60405291825284820192508381018501918883111561015257600080fd5b938501935b8285101561017057845184529385019392850192610157565b98975050505050505050565b6101158061018b6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063b0ec2ae114602d575b600080fd5b60336047565b604051603e9190609d565b60405180910390f35b60606000805480602002602001604051908101604052809291908181526020018280548015609357602002820191906000526020600020905b8154815260200190600101908083116080575b5050505050905090565b6020808252825182820181905260009190848201906040850190845b8181101560d35783518352928401929184019160010160b9565b5090969550505050505056fea26469706673582212202f269e929f4817e35935475eda876bc6d672c7ccad46939d0d194266206869ab64736f6c63430008110033",
}

// ConstantArrayStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ConstantArrayStorageMetaData.ABI instead.
var ConstantArrayStorageABI = ConstantArrayStorageMetaData.ABI

// ConstantArrayStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ConstantArrayStorageMetaData.Bin instead.
var ConstantArrayStorageBin = ConstantArrayStorageMetaData.Bin

// DeployConstantArrayStorage deploys a new Ethereum contract, binding an instance of ConstantArrayStorage to it.
func DeployConstantArrayStorage(auth *bind.TransactOpts, backend bind.ContractBackend, __array []*big.Int) (common.Address, *types.Transaction, *ConstantArrayStorage, error) {
	parsed, err := ConstantArrayStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ConstantArrayStorageBin), backend, __array)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ConstantArrayStorage{ConstantArrayStorageCaller: ConstantArrayStorageCaller{contract: contract}, ConstantArrayStorageTransactor: ConstantArrayStorageTransactor{contract: contract}, ConstantArrayStorageFilterer: ConstantArrayStorageFilterer{contract: contract}}, nil
}

// ConstantArrayStorage is an auto generated Go binding around an Ethereum contract.
type ConstantArrayStorage struct {
	ConstantArrayStorageCaller     // Read-only binding to the contract
	ConstantArrayStorageTransactor // Write-only binding to the contract
	ConstantArrayStorageFilterer   // Log filterer for contract events
}

// ConstantArrayStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConstantArrayStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantArrayStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConstantArrayStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantArrayStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConstantArrayStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantArrayStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConstantArrayStorageSession struct {
	Contract     *ConstantArrayStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ConstantArrayStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConstantArrayStorageCallerSession struct {
	Contract *ConstantArrayStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ConstantArrayStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConstantArrayStorageTransactorSession struct {
	Contract     *ConstantArrayStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ConstantArrayStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConstantArrayStorageRaw struct {
	Contract *ConstantArrayStorage // Generic contract binding to access the raw methods on
}

// ConstantArrayStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConstantArrayStorageCallerRaw struct {
	Contract *ConstantArrayStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ConstantArrayStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConstantArrayStorageTransactorRaw struct {
	Contract *ConstantArrayStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConstantArrayStorage creates a new instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorage(address common.Address, backend bind.ContractBackend) (*ConstantArrayStorage, error) {
	contract, err := bindConstantArrayStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorage{ConstantArrayStorageCaller: ConstantArrayStorageCaller{contract: contract}, ConstantArrayStorageTransactor: ConstantArrayStorageTransactor{contract: contract}, ConstantArrayStorageFilterer: ConstantArrayStorageFilterer{contract: contract}}, nil
}

// NewConstantArrayStorageCaller creates a new read-only instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorageCaller(address common.Address, caller bind.ContractCaller) (*ConstantArrayStorageCaller, error) {
	contract, err := bindConstantArrayStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorageCaller{contract: contract}, nil
}

// NewConstantArrayStorageTransactor creates a new write-only instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ConstantArrayStorageTransactor, error) {
	contract, err := bindConstantArrayStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorageTransactor{contract: contract}, nil
}

// NewConstantArrayStorageFilterer creates a new log filterer instance of ConstantArrayStorage, bound to a specific deployed contract.
func NewConstantArrayStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ConstantArrayStorageFilterer, error) {
	contract, err := bindConstantArrayStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConstantArrayStorageFilterer{contract: contract}, nil
}

// bindConstantArrayStorage binds a generic wrapper to an already deployed contract.
func bindConstantArrayStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ConstantArrayStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConstantArrayStorage *ConstantArrayStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ConstantArrayStorage.Contract.ConstantArrayStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConstantArrayStorage *ConstantArrayStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.ConstantArrayStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConstantArrayStorage *ConstantArrayStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.ConstantArrayStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConstantArrayStorage *ConstantArrayStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ConstantArrayStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConstantArrayStorage *ConstantArrayStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConstantArrayStorage *ConstantArrayStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConstantArrayStorage.Contract.contract.Transact(opts, method, params...)
}

// Array is a free data retrieval call binding the contract method 0xb0ec2ae1.
//
// Solidity: function array() view returns(uint256[])
func (_ConstantArrayStorage *ConstantArrayStorageCaller) Array(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _ConstantArrayStorage.contract.Call(opts, &out, "array")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// Array is a free data retrieval call binding the contract method 0xb0ec2ae1.
//
// Solidity: function array() view returns(uint256[])
func (_ConstantArrayStorage *ConstantArrayStorageSession) Array() ([]*big.Int, error) {
	return _ConstantArrayStorage.Contract.Array(&_ConstantArrayStorage.CallOpts)
}

// Array is a free data retrieval call binding the contract method 0xb0ec2ae1.
//
// Solidity: function array() view returns(uint256[])
func (_ConstantArrayStorage *ConstantArrayStorageCallerSession) Array() ([]*big.Int, error) {
	return _ConstantArrayStorage.Contract.Array(&_ConstantArrayStorage.CallOpts)
}

// DeployHelperMetaData contains all meta data concerning the DeployHelper contract.
var DeployHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ERC1820_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1820_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1820_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC2470_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC2470_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC2470_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICK_CREATE2_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICK_CREATE2_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NICK_CREATE2_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOLTU_CREATE2_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOLTU_CREATE2_PAYLOAD\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZOLTU_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"getDeploymentTotalCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50611726806100206000396000f3fe6080604052600436106100dd5760003560e01c80639ed2c6f01161007f578063d7c641e711610059578063d7c641e71461024d578063db633c3e14610262578063dd0c625a1461016f578063ef77e71a1461027e57600080fd5b80639ed2c6f0146101ea578063acd7d02a14610205578063d3a3faab1461022557600080fd5b80634367d652116100bb5780634367d6521461016f57806355e34a6b1461019857806375ae22b5146101c057806389cf8ae6146101d557600080fd5b80631b9a680c146100e2578063290302ce1461010d5780632e7966411461015a575b600080fd5b3480156100ee57600080fd5b506100f76102a6565b60405161010491906108ab565b60405180910390f35b34801561011957600080fd5b5061013573a990077c3205cbdf861e17fa532eeb069ce9ff9681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610104565b34801561016657600080fd5b506100f76102c2565b34801561017b57600080fd5b5061018a662386f26fc1000081565b604051908152602001610104565b3480156101a457600080fd5b5061013573bb6e024b9cffacb947a71991e386681b1cd1477d81565b3480156101cc57600080fd5b506100f76102e1565b3480156101e157600080fd5b506100f76102fd565b3480156101f657600080fd5b5061018a6657c084e5f3c00081565b34801561021157600080fd5b5061018a61022036600461093c565b61031c565b34801561023157600080fd5b50610135734c8d290a1b368ac4728d83a9e8321fc3af2b39b181565b61026061025b366004610968565b610423565b005b34801561026e57600080fd5b5061018a67011c37937e08000081565b34801561028a57600080fd5b50610135733fab184622dc19b6109349b94811493bf2a4536281565b6040518060e0016040528060a8815260200161164960a8913981565b60405180610a600160405280610a3c8152602001610a1c610a3c913981565b6040518060c00160405280608181526020016114586081913981565b604051806101a0016040528061017081526020016114d9610170913981565b6040517fa66b327d00000000000000000000000000000000000000000000000000000000815260006004820181905248602483015290819073ffffffffffffffffffffffffffffffffffffffff85169063a66b327d90604401602060405180830381865afa158015610392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b691906109a9565b90506103c4836152086109f1565b6103ce9082610a08565b6103d99060046109f1565b67011c37937e080000662386f26fc100006103fb6657c084e5f3c00082610a08565b6104059190610a08565b61040f9190610a08565b6104199190610a08565b9150505b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415905061049884662386f26fc10000733fab184622dc19b6109349b94811493bf2a453626040518060e0016040528060a8815260200161164960a89139858761059b565b6104dc846657c084e5f3c00073bb6e024b9cffacb947a71991e386681b1cd1477d604051806101a0016040528061017081526020016114d96101709139858761059b565b61051d84662386f26fc10000734c8d290a1b368ac4728d83a9e8321fc3af2b39b16040518060c001604052806081815260200161145860819139858761059b565b6105628467011c37937e08000073a990077c3205cbdf861e17fa532eeb069ce9ff9660405180610a600160405280610a3c8152602001610a1c610a3c9139858761059b565b806105955760405133904780156108fc02916000818181858888f19350505050158015610593573d6000803e3d6000fd5b505b50505050565b6040517fa66b327d0000000000000000000000000000000000000000000000000000000081526000600482018190524860248301529073ffffffffffffffffffffffffffffffffffffffff88169063a66b327d90604401602060405180830381865afa15801561060f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063391906109a9565b90506000610643836152086109f1565b61064d8389610a08565b6106579190610a08565b9050831561073a576040517f549e842600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201899052604482018490523360648301819052608483015261520860a483015260c4820185905260e48201839052610120610104830152600061012483015289169063549e842690610144016020604051808303816000875af1158015610710573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073491906109a9565b5061080b565b6040517f679b6ded00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201899052604482018490523360648301819052608483015261520860a483015260c4820185905261010060e4830152600061010483015289169063679b6ded9083906101240160206040518083038185885af11580156107e4573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061080991906109a9565b505b6040517fb75436bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169063b75436bb9061085d9088906004016108ab565b6020604051808303816000875af115801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a091906109a9565b505050505050505050565b600060208083528351808285015260005b818110156108d8578581018301518582016040015282016108bc565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461093957600080fd5b50565b6000806040838503121561094f57600080fd5b823561095a81610917565b946020939093013593505050565b60008060006060848603121561097d57600080fd5b833561098881610917565b9250602084013561099881610917565b929592945050506040919091013590565b6000602082840312156109bb57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761041d5761041d6109c2565b8082018082111561041d5761041d6109c256fe04f90a388085174876e800830c35008080b909e5608060405234801561001057600080fd5b506109c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063a41e7d5111610078578063a41e7d51146101d4578063aabbb8ca1461020a578063b705676514610236578063f712f3e814610280576100a5565b806329965a1d146100aa5780633d584063146100e25780635df8122f1461012457806365ba36c114610152575b600080fd5b6100e0600480360360608110156100c057600080fd5b50600160a060020a038135811691602081013591604090910135166102b6565b005b610108600480360360208110156100f857600080fd5b5035600160a060020a0316610570565b60408051600160a060020a039092168252519081900360200190f35b6100e06004803603604081101561013a57600080fd5b50600160a060020a03813581169160200135166105bc565b6101c26004803603602081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460018302840111640100000000831117156101b757600080fd5b5090925090506106b3565b60408051918252519081900360200190f35b6100e0600480360360408110156101ea57600080fd5b508035600160a060020a03169060200135600160e060020a0319166106ee565b6101086004803603604081101561022057600080fd5b50600160a060020a038135169060200135610778565b61026c6004803603604081101561024c57600080fd5b508035600160a060020a03169060200135600160e060020a0319166107ef565b604080519115158252519081900360200190f35b61026c6004803603604081101561029657600080fd5b508035600160a060020a03169060200135600160e060020a0319166108aa565b6000600160a060020a038416156102cd57836102cf565b335b9050336102db82610570565b600160a060020a031614610339576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b6103428361092a565b15610397576040805160e560020a62461bcd02815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b600160a060020a038216158015906103b85750600160a060020a0382163314155b156104ff5760405160200180807f455243313832305f4143434550545f4d4147494300000000000000000000000081525060140190506040516020818303038152906040528051906020012082600160a060020a031663249cb3fa85846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d60208110156104a857600080fd5b5051146104ff576040805160e560020a62461bcd02815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b600160a060020a03818116600081815260208181526040808320888452909152808220805473ffffffffffffffffffffffffffffffffffffffff19169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b600160a060020a03818116600090815260016020526040812054909116151561059a5750806105b7565b50600160a060020a03808216600090815260016020526040902054165b919050565b336105c683610570565b600160a060020a031614610624576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031681600160a060020a0316146106435780610646565b60005b600160a060020a03838116600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106f882826107ef565b610703576000610705565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b600080600160a060020a038416156107905783610792565b335b905061079d8361092a565b156107c357826107ad82826108aa565b6107b85760006107ba565b815b925050506106e8565b600160a060020a0390811660009081526020818152604080832086845290915290205416905092915050565b6000808061081d857f01ffc9a70000000000000000000000000000000000000000000000000000000061094c565b909250905081158061082d575080155b1561083d576000925050506106e8565b61084f85600160e060020a031961094c565b909250905081158061086057508015155b15610870576000925050506106e8565b61087a858561094c565b909250905060018214801561088f5750806001145b1561089f576001925050506106e8565b506000949350505050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff1615156108f2576108eb83836107ef565b90506106e8565b50600160a060020a03808316600081815260208181526040808320600160e060020a0319871684529091529020549091161492915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea165627a7a72305820377f4a2d4301ede9949f163f319021a6e9c687c292a5e2b2c4734c126b524e6c00291ba01820182018201820182018201820182018201820182018201820182018201820a0182018201820182018201820182018201820182018201820182018201820182004f87e8085174876e800830186a08080ad601f80600e600039806000f350fe60003681823780368234f58015156014578182fd5b80825250506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a0222222222222222222222222222222222222222222222222222222222222222204f9016c8085174876e8008303c4d88080b90154608060405234801561001057600080fd5b50610134806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80634af63f0214602d575b600080fd5b60cf60048036036040811015604157600080fd5b810190602081018135640100000000811115605b57600080fd5b820183602082011115606c57600080fd5b80359060200191846001830284011164010000000083111715608d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925060eb915050565b604080516001600160a01b039092168252519081900360200190f35b6000818351602085016000f5939250505056fea26469706673582212206b44f8a82cb6b156bfcc3dc6aadd6df4eefd204bc928a4397fd15dacf6d5320564736f6c634300060200331b8324700082247004f8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222a264697066735822122051c60d9d00174e2d47560057593222ba6cbb0c4cb3260da4d1b00843299c4b3664736f6c63430008110033",
}

// DeployHelperABI is the input ABI used to generate the binding from.
// Deprecated: Use DeployHelperMetaData.ABI instead.
var DeployHelperABI = DeployHelperMetaData.ABI

// DeployHelperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DeployHelperMetaData.Bin instead.
var DeployHelperBin = DeployHelperMetaData.Bin

// DeployDeployHelper deploys a new Ethereum contract, binding an instance of DeployHelper to it.
func DeployDeployHelper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DeployHelper, error) {
	parsed, err := DeployHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DeployHelperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DeployHelper{DeployHelperCaller: DeployHelperCaller{contract: contract}, DeployHelperTransactor: DeployHelperTransactor{contract: contract}, DeployHelperFilterer: DeployHelperFilterer{contract: contract}}, nil
}

// DeployHelper is an auto generated Go binding around an Ethereum contract.
type DeployHelper struct {
	DeployHelperCaller     // Read-only binding to the contract
	DeployHelperTransactor // Write-only binding to the contract
	DeployHelperFilterer   // Log filterer for contract events
}

// DeployHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type DeployHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeployHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DeployHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeployHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DeployHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeployHelperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DeployHelperSession struct {
	Contract     *DeployHelper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DeployHelperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DeployHelperCallerSession struct {
	Contract *DeployHelperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// DeployHelperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DeployHelperTransactorSession struct {
	Contract     *DeployHelperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// DeployHelperRaw is an auto generated low-level Go binding around an Ethereum contract.
type DeployHelperRaw struct {
	Contract *DeployHelper // Generic contract binding to access the raw methods on
}

// DeployHelperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DeployHelperCallerRaw struct {
	Contract *DeployHelperCaller // Generic read-only contract binding to access the raw methods on
}

// DeployHelperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DeployHelperTransactorRaw struct {
	Contract *DeployHelperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeployHelper creates a new instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelper(address common.Address, backend bind.ContractBackend) (*DeployHelper, error) {
	contract, err := bindDeployHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DeployHelper{DeployHelperCaller: DeployHelperCaller{contract: contract}, DeployHelperTransactor: DeployHelperTransactor{contract: contract}, DeployHelperFilterer: DeployHelperFilterer{contract: contract}}, nil
}

// NewDeployHelperCaller creates a new read-only instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelperCaller(address common.Address, caller bind.ContractCaller) (*DeployHelperCaller, error) {
	contract, err := bindDeployHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DeployHelperCaller{contract: contract}, nil
}

// NewDeployHelperTransactor creates a new write-only instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*DeployHelperTransactor, error) {
	contract, err := bindDeployHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DeployHelperTransactor{contract: contract}, nil
}

// NewDeployHelperFilterer creates a new log filterer instance of DeployHelper, bound to a specific deployed contract.
func NewDeployHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*DeployHelperFilterer, error) {
	contract, err := bindDeployHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DeployHelperFilterer{contract: contract}, nil
}

// bindDeployHelper binds a generic wrapper to an already deployed contract.
func bindDeployHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DeployHelperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeployHelper *DeployHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeployHelper.Contract.DeployHelperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeployHelper *DeployHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeployHelper.Contract.DeployHelperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeployHelper *DeployHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeployHelper.Contract.DeployHelperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeployHelper *DeployHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeployHelper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeployHelper *DeployHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeployHelper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeployHelper *DeployHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeployHelper.Contract.contract.Transact(opts, method, params...)
}

// ERC1820DEPLOYER is a free data retrieval call binding the contract method 0x290302ce.
//
// Solidity: function ERC1820_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) ERC1820DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC1820_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ERC1820DEPLOYER is a free data retrieval call binding the contract method 0x290302ce.
//
// Solidity: function ERC1820_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) ERC1820DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC1820DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC1820DEPLOYER is a free data retrieval call binding the contract method 0x290302ce.
//
// Solidity: function ERC1820_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) ERC1820DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC1820DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC1820PAYLOAD is a free data retrieval call binding the contract method 0x2e796641.
//
// Solidity: function ERC1820_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) ERC1820PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC1820_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ERC1820PAYLOAD is a free data retrieval call binding the contract method 0x2e796641.
//
// Solidity: function ERC1820_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) ERC1820PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC1820PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC1820PAYLOAD is a free data retrieval call binding the contract method 0x2e796641.
//
// Solidity: function ERC1820_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) ERC1820PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC1820PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC1820VALUE is a free data retrieval call binding the contract method 0xdb633c3e.
//
// Solidity: function ERC1820_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) ERC1820VALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC1820_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ERC1820VALUE is a free data retrieval call binding the contract method 0xdb633c3e.
//
// Solidity: function ERC1820_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) ERC1820VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC1820VALUE(&_DeployHelper.CallOpts)
}

// ERC1820VALUE is a free data retrieval call binding the contract method 0xdb633c3e.
//
// Solidity: function ERC1820_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) ERC1820VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC1820VALUE(&_DeployHelper.CallOpts)
}

// ERC2470DEPLOYER is a free data retrieval call binding the contract method 0x55e34a6b.
//
// Solidity: function ERC2470_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) ERC2470DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC2470_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ERC2470DEPLOYER is a free data retrieval call binding the contract method 0x55e34a6b.
//
// Solidity: function ERC2470_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) ERC2470DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC2470DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC2470DEPLOYER is a free data retrieval call binding the contract method 0x55e34a6b.
//
// Solidity: function ERC2470_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) ERC2470DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ERC2470DEPLOYER(&_DeployHelper.CallOpts)
}

// ERC2470PAYLOAD is a free data retrieval call binding the contract method 0x89cf8ae6.
//
// Solidity: function ERC2470_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) ERC2470PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC2470_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ERC2470PAYLOAD is a free data retrieval call binding the contract method 0x89cf8ae6.
//
// Solidity: function ERC2470_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) ERC2470PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC2470PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC2470PAYLOAD is a free data retrieval call binding the contract method 0x89cf8ae6.
//
// Solidity: function ERC2470_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) ERC2470PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ERC2470PAYLOAD(&_DeployHelper.CallOpts)
}

// ERC2470VALUE is a free data retrieval call binding the contract method 0x9ed2c6f0.
//
// Solidity: function ERC2470_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) ERC2470VALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ERC2470_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ERC2470VALUE is a free data retrieval call binding the contract method 0x9ed2c6f0.
//
// Solidity: function ERC2470_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) ERC2470VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC2470VALUE(&_DeployHelper.CallOpts)
}

// ERC2470VALUE is a free data retrieval call binding the contract method 0x9ed2c6f0.
//
// Solidity: function ERC2470_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) ERC2470VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ERC2470VALUE(&_DeployHelper.CallOpts)
}

// NICKCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xef77e71a.
//
// Solidity: function NICK_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) NICKCREATE2DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "NICK_CREATE2_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NICKCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xef77e71a.
//
// Solidity: function NICK_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) NICKCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.NICKCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// NICKCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xef77e71a.
//
// Solidity: function NICK_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) NICKCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.NICKCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// NICKCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x1b9a680c.
//
// Solidity: function NICK_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) NICKCREATE2PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "NICK_CREATE2_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// NICKCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x1b9a680c.
//
// Solidity: function NICK_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) NICKCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.NICKCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// NICKCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x1b9a680c.
//
// Solidity: function NICK_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) NICKCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.NICKCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// NICKCREATE2VALUE is a free data retrieval call binding the contract method 0x4367d652.
//
// Solidity: function NICK_CREATE2_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) NICKCREATE2VALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "NICK_CREATE2_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NICKCREATE2VALUE is a free data retrieval call binding the contract method 0x4367d652.
//
// Solidity: function NICK_CREATE2_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) NICKCREATE2VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.NICKCREATE2VALUE(&_DeployHelper.CallOpts)
}

// NICKCREATE2VALUE is a free data retrieval call binding the contract method 0x4367d652.
//
// Solidity: function NICK_CREATE2_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) NICKCREATE2VALUE() (*big.Int, error) {
	return _DeployHelper.Contract.NICKCREATE2VALUE(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xd3a3faab.
//
// Solidity: function ZOLTU_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCaller) ZOLTUCREATE2DEPLOYER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ZOLTU_CREATE2_DEPLOYER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZOLTUCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xd3a3faab.
//
// Solidity: function ZOLTU_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperSession) ZOLTUCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2DEPLOYER is a free data retrieval call binding the contract method 0xd3a3faab.
//
// Solidity: function ZOLTU_CREATE2_DEPLOYER() view returns(address)
func (_DeployHelper *DeployHelperCallerSession) ZOLTUCREATE2DEPLOYER() (common.Address, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2DEPLOYER(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x75ae22b5.
//
// Solidity: function ZOLTU_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCaller) ZOLTUCREATE2PAYLOAD(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ZOLTU_CREATE2_PAYLOAD")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ZOLTUCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x75ae22b5.
//
// Solidity: function ZOLTU_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperSession) ZOLTUCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// ZOLTUCREATE2PAYLOAD is a free data retrieval call binding the contract method 0x75ae22b5.
//
// Solidity: function ZOLTU_CREATE2_PAYLOAD() view returns(bytes)
func (_DeployHelper *DeployHelperCallerSession) ZOLTUCREATE2PAYLOAD() ([]byte, error) {
	return _DeployHelper.Contract.ZOLTUCREATE2PAYLOAD(&_DeployHelper.CallOpts)
}

// ZOLTUVALUE is a free data retrieval call binding the contract method 0xdd0c625a.
//
// Solidity: function ZOLTU_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCaller) ZOLTUVALUE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "ZOLTU_VALUE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZOLTUVALUE is a free data retrieval call binding the contract method 0xdd0c625a.
//
// Solidity: function ZOLTU_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperSession) ZOLTUVALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ZOLTUVALUE(&_DeployHelper.CallOpts)
}

// ZOLTUVALUE is a free data retrieval call binding the contract method 0xdd0c625a.
//
// Solidity: function ZOLTU_VALUE() view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) ZOLTUVALUE() (*big.Int, error) {
	return _DeployHelper.Contract.ZOLTUVALUE(&_DeployHelper.CallOpts)
}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_DeployHelper *DeployHelperCaller) GetDeploymentTotalCost(opts *bind.CallOpts, inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DeployHelper.contract.Call(opts, &out, "getDeploymentTotalCost", inbox, maxFeePerGas)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_DeployHelper *DeployHelperSession) GetDeploymentTotalCost(inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	return _DeployHelper.Contract.GetDeploymentTotalCost(&_DeployHelper.CallOpts, inbox, maxFeePerGas)
}

// GetDeploymentTotalCost is a free data retrieval call binding the contract method 0xacd7d02a.
//
// Solidity: function getDeploymentTotalCost(address inbox, uint256 maxFeePerGas) view returns(uint256)
func (_DeployHelper *DeployHelperCallerSession) GetDeploymentTotalCost(inbox common.Address, maxFeePerGas *big.Int) (*big.Int, error) {
	return _DeployHelper.Contract.GetDeploymentTotalCost(&_DeployHelper.CallOpts, inbox, maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_DeployHelper *DeployHelperTransactor) Perform(opts *bind.TransactOpts, _inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _DeployHelper.contract.Transact(opts, "perform", _inbox, _nativeToken, _maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_DeployHelper *DeployHelperSession) Perform(_inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _DeployHelper.Contract.Perform(&_DeployHelper.TransactOpts, _inbox, _nativeToken, _maxFeePerGas)
}

// Perform is a paid mutator transaction binding the contract method 0xd7c641e7.
//
// Solidity: function perform(address _inbox, address _nativeToken, uint256 _maxFeePerGas) payable returns()
func (_DeployHelper *DeployHelperTransactorSession) Perform(_inbox common.Address, _nativeToken common.Address, _maxFeePerGas *big.Int) (*types.Transaction, error) {
	return _DeployHelper.Contract.Perform(&_DeployHelper.TransactOpts, _inbox, _nativeToken, _maxFeePerGas)
}

// ERC20RollupEventInboxMetaData contains all meta data concerning the ERC20RollupEventInbox contract.
var ERC20RollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051610a7161003060003960006103380152610a716000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063cb23bcb511610050578063cb23bcb514610089578063cf8d56d6146100b8578063e78cea92146100cb57600080fd5b80636ae71f121461006c578063c4d66de814610076575b600080fd5b6100746100de565b005b61007461008436600461084e565b61032e565b60015461009c906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100746100c636600461086b565b610522565b60005461009c906001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610131573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015591906108e7565b6001600160a01b0316336001600160a01b03161461023d57600154604080517f8da5cb5b000000000000000000000000000000000000000000000000000000008152905133926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f391906108e7565b6040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152911660248201526044015b60405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663cb23bcb56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b591906108e7565b6001549091506001600160a01b038083169116036102ff576040517fd054909f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103cc5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610234565b6000546001600160a01b03161561040f576040517fef34ca5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811661044f576040517f1ad0f74300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155604080517fcb23bcb5000000000000000000000000000000000000000000000000000000008152905163cb23bcb5916004808201926020929091908290030181865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f291906108e7565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b6001546001600160a01b0316331461057c5760405162461bcd60e51b815260206004820152600b60248201527f4f4e4c595f524f4c4c55500000000000000000000000000000000000000000006044820152606401610234565b806105c95760405162461bcd60e51b815260206004820152601260248201527f454d5054595f434841494e5f434f4e46494700000000000000000000000000006044820152606401610234565b6001486105d46106c3565b1561064957606c6001600160a01b031663f5d6ded76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190610904565b610646908261091d565b90505b6000858383878760405160200161066495949392919061095d565b6040516020818303038152906040529050600061068082610789565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b836040516106b291906109ce565b60405180910390a250505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f051038f20000000000000000000000000000000000000000000000000000000017905290516000918291829160649161072f9190610a1f565b600060405180830381855afa9150503d806000811461076a576040519150601f19603f3d011682016040523d82523d6000602084013e61076f565b606091505b5091509150818015610782575080516020145b9250505090565b60008054825160208401206040517f75d81e25000000000000000000000000000000000000000000000000000000008152600b60048201526024810184905260448101919091526064810183905282916001600160a01b0316906375d81e25906084016020604051808303816000875af115801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190610904565b9392505050565b6001600160a01b038116811461084b57600080fd5b50565b60006020828403121561086057600080fd5b813561082f81610836565b60008060006040848603121561088057600080fd5b83359250602084013567ffffffffffffffff8082111561089f57600080fd5b818601915086601f8301126108b357600080fd5b8135818111156108c257600080fd5b8760208285010111156108d457600080fd5b6020830194508093505050509250925092565b6000602082840312156108f957600080fd5b815161082f81610836565b60006020828403121561091657600080fd5b5051919050565b80820180821115610957577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b8581527fff000000000000000000000000000000000000000000000000000000000000008560f81b1660208201528360218201528183604183013760009101604101908152949350505050565b60005b838110156109c55781810151838201526020016109ad565b50506000910152565b60208152600082518060208401526109ed8160408501602087016109aa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008251610a318184602087016109aa565b919091019291505056fea26469706673582212201dade64e6acef0fec2c24b2ee7dd24cce1658249a13c511e95708a10eae1f12f64736f6c63430008110033",
}

// ERC20RollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20RollupEventInboxMetaData.ABI instead.
var ERC20RollupEventInboxABI = ERC20RollupEventInboxMetaData.ABI

// ERC20RollupEventInboxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20RollupEventInboxMetaData.Bin instead.
var ERC20RollupEventInboxBin = ERC20RollupEventInboxMetaData.Bin

// DeployERC20RollupEventInbox deploys a new Ethereum contract, binding an instance of ERC20RollupEventInbox to it.
func DeployERC20RollupEventInbox(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20RollupEventInbox, error) {
	parsed, err := ERC20RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20RollupEventInboxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20RollupEventInbox{ERC20RollupEventInboxCaller: ERC20RollupEventInboxCaller{contract: contract}, ERC20RollupEventInboxTransactor: ERC20RollupEventInboxTransactor{contract: contract}, ERC20RollupEventInboxFilterer: ERC20RollupEventInboxFilterer{contract: contract}}, nil
}

// ERC20RollupEventInbox is an auto generated Go binding around an Ethereum contract.
type ERC20RollupEventInbox struct {
	ERC20RollupEventInboxCaller     // Read-only binding to the contract
	ERC20RollupEventInboxTransactor // Write-only binding to the contract
	ERC20RollupEventInboxFilterer   // Log filterer for contract events
}

// ERC20RollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20RollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20RollupEventInboxSession struct {
	Contract     *ERC20RollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ERC20RollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20RollupEventInboxCallerSession struct {
	Contract *ERC20RollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ERC20RollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20RollupEventInboxTransactorSession struct {
	Contract     *ERC20RollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ERC20RollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20RollupEventInboxRaw struct {
	Contract *ERC20RollupEventInbox // Generic contract binding to access the raw methods on
}

// ERC20RollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxCallerRaw struct {
	Contract *ERC20RollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20RollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20RollupEventInboxTransactorRaw struct {
	Contract *ERC20RollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20RollupEventInbox creates a new instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInbox(address common.Address, backend bind.ContractBackend) (*ERC20RollupEventInbox, error) {
	contract, err := bindERC20RollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInbox{ERC20RollupEventInboxCaller: ERC20RollupEventInboxCaller{contract: contract}, ERC20RollupEventInboxTransactor: ERC20RollupEventInboxTransactor{contract: contract}, ERC20RollupEventInboxFilterer: ERC20RollupEventInboxFilterer{contract: contract}}, nil
}

// NewERC20RollupEventInboxCaller creates a new read-only instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*ERC20RollupEventInboxCaller, error) {
	contract, err := bindERC20RollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxCaller{contract: contract}, nil
}

// NewERC20RollupEventInboxTransactor creates a new write-only instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20RollupEventInboxTransactor, error) {
	contract, err := bindERC20RollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxTransactor{contract: contract}, nil
}

// NewERC20RollupEventInboxFilterer creates a new log filterer instance of ERC20RollupEventInbox, bound to a specific deployed contract.
func NewERC20RollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20RollupEventInboxFilterer, error) {
	contract, err := bindERC20RollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxFilterer{contract: contract}, nil
}

// bindERC20RollupEventInbox binds a generic wrapper to an already deployed contract.
func bindERC20RollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupEventInbox.Contract.ERC20RollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.ERC20RollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.ERC20RollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) Bridge() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Bridge(&_ERC20RollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Bridge(&_ERC20RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) Rollup() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Rollup(&_ERC20RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _ERC20RollupEventInbox.Contract.Rollup(&_ERC20RollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.Initialize(&_ERC20RollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.Initialize(&_ERC20RollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.RollupInitialized(&_ERC20RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.RollupInitialized(&_ERC20RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.UpdateRollupAddress(&_ERC20RollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_ERC20RollupEventInbox *ERC20RollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _ERC20RollupEventInbox.Contract.UpdateRollupAddress(&_ERC20RollupEventInbox.TransactOpts)
}

// ERC20RollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDeliveredIterator struct {
	Event *ERC20RollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*ERC20RollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxInboxMessageDeliveredIterator{contract: _ERC20RollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *ERC20RollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupEventInboxInboxMessageDelivered)
				if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*ERC20RollupEventInboxInboxMessageDelivered, error) {
	event := new(ERC20RollupEventInboxInboxMessageDelivered)
	if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *ERC20RollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the ERC20RollupEventInbox contract.
type ERC20RollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _ERC20RollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *ERC20RollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _ERC20RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_ERC20RollupEventInbox *ERC20RollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*ERC20RollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(ERC20RollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _ERC20RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOldRollupMetaData contains all meta data concerning the IOldRollup contract.
var IOldRollupMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structIOldRollup.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structOldStaker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IOldRollupABI is the input ABI used to generate the binding from.
// Deprecated: Use IOldRollupMetaData.ABI instead.
var IOldRollupABI = IOldRollupMetaData.ABI

// IOldRollup is an auto generated Go binding around an Ethereum contract.
type IOldRollup struct {
	IOldRollupCaller     // Read-only binding to the contract
	IOldRollupTransactor // Write-only binding to the contract
	IOldRollupFilterer   // Log filterer for contract events
}

// IOldRollupCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOldRollupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOldRollupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOldRollupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOldRollupSession struct {
	Contract     *IOldRollup       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOldRollupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOldRollupCallerSession struct {
	Contract *IOldRollupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// IOldRollupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOldRollupTransactorSession struct {
	Contract     *IOldRollupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IOldRollupRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOldRollupRaw struct {
	Contract *IOldRollup // Generic contract binding to access the raw methods on
}

// IOldRollupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOldRollupCallerRaw struct {
	Contract *IOldRollupCaller // Generic read-only contract binding to access the raw methods on
}

// IOldRollupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOldRollupTransactorRaw struct {
	Contract *IOldRollupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOldRollup creates a new instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollup(address common.Address, backend bind.ContractBackend) (*IOldRollup, error) {
	contract, err := bindIOldRollup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOldRollup{IOldRollupCaller: IOldRollupCaller{contract: contract}, IOldRollupTransactor: IOldRollupTransactor{contract: contract}, IOldRollupFilterer: IOldRollupFilterer{contract: contract}}, nil
}

// NewIOldRollupCaller creates a new read-only instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollupCaller(address common.Address, caller bind.ContractCaller) (*IOldRollupCaller, error) {
	contract, err := bindIOldRollup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupCaller{contract: contract}, nil
}

// NewIOldRollupTransactor creates a new write-only instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollupTransactor(address common.Address, transactor bind.ContractTransactor) (*IOldRollupTransactor, error) {
	contract, err := bindIOldRollup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupTransactor{contract: contract}, nil
}

// NewIOldRollupFilterer creates a new log filterer instance of IOldRollup, bound to a specific deployed contract.
func NewIOldRollupFilterer(address common.Address, filterer bind.ContractFilterer) (*IOldRollupFilterer, error) {
	contract, err := bindIOldRollup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOldRollupFilterer{contract: contract}, nil
}

// bindIOldRollup binds a generic wrapper to an already deployed contract.
func bindIOldRollup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IOldRollupMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollup *IOldRollupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollup.Contract.IOldRollupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollup *IOldRollupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollup.Contract.IOldRollupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollup *IOldRollupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollup.Contract.IOldRollupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollup *IOldRollupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollup *IOldRollupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollup *IOldRollupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollup.Contract.contract.Transact(opts, method, params...)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IOldRollup *IOldRollupCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IOldRollup *IOldRollupSession) GetNode(nodeNum uint64) (Node, error) {
	return _IOldRollup.Contract.GetNode(&_IOldRollup.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_IOldRollup *IOldRollupCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _IOldRollup.Contract.GetNode(&_IOldRollup.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IOldRollup *IOldRollupCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (OldStaker, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(OldStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(OldStaker)).(*OldStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IOldRollup *IOldRollupSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _IOldRollup.Contract.GetStaker(&_IOldRollup.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_IOldRollup *IOldRollupCallerSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _IOldRollup.Contract.GetStaker(&_IOldRollup.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IOldRollup *IOldRollupCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IOldRollup *IOldRollupSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IOldRollup.Contract.GetStakerAddress(&_IOldRollup.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IOldRollup *IOldRollupCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IOldRollup.Contract.GetStakerAddress(&_IOldRollup.CallOpts, stakerNum)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_IOldRollup *IOldRollupCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_IOldRollup *IOldRollupSession) IsValidator(validator common.Address) (bool, error) {
	return _IOldRollup.Contract.IsValidator(&_IOldRollup.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_IOldRollup *IOldRollupCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _IOldRollup.Contract.IsValidator(&_IOldRollup.CallOpts, validator)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IOldRollup *IOldRollupCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IOldRollup *IOldRollupSession) LatestConfirmed() (uint64, error) {
	return _IOldRollup.Contract.LatestConfirmed(&_IOldRollup.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_IOldRollup *IOldRollupCallerSession) LatestConfirmed() (uint64, error) {
	return _IOldRollup.Contract.LatestConfirmed(&_IOldRollup.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IOldRollup *IOldRollupCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IOldRollup *IOldRollupSession) StakerCount() (uint64, error) {
	return _IOldRollup.Contract.StakerCount(&_IOldRollup.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IOldRollup *IOldRollupCallerSession) StakerCount() (uint64, error) {
	return _IOldRollup.Contract.StakerCount(&_IOldRollup.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_IOldRollup *IOldRollupCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_IOldRollup *IOldRollupSession) ValidatorWalletCreator() (common.Address, error) {
	return _IOldRollup.Contract.ValidatorWalletCreator(&_IOldRollup.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_IOldRollup *IOldRollupCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _IOldRollup.Contract.ValidatorWalletCreator(&_IOldRollup.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IOldRollup *IOldRollupCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IOldRollup.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IOldRollup *IOldRollupSession) WasmModuleRoot() ([32]byte, error) {
	return _IOldRollup.Contract.WasmModuleRoot(&_IOldRollup.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IOldRollup *IOldRollupCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IOldRollup.Contract.WasmModuleRoot(&_IOldRollup.CallOpts)
}

// IOldRollupNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the IOldRollup contract.
type IOldRollupNodeCreatedIterator struct {
	Event *IOldRollupNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IOldRollupNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IOldRollupNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IOldRollupNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IOldRollupNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IOldRollupNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IOldRollupNodeCreated represents a NodeCreated event raised by the IOldRollup contract.
type IOldRollupNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          IOldRollupAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IOldRollup *IOldRollupFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*IOldRollupNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IOldRollup.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &IOldRollupNodeCreatedIterator{contract: _IOldRollup.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IOldRollup *IOldRollupFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *IOldRollupNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _IOldRollup.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IOldRollupNodeCreated)
				if err := _IOldRollup.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_IOldRollup *IOldRollupFilterer) ParseNodeCreated(log types.Log) (*IOldRollupNodeCreated, error) {
	event := new(IOldRollupNodeCreated)
	if err := _IOldRollup.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IOldRollupAdminMetaData contains all meta data concerning the IOldRollupAdmin contract.
var IOldRollupAdminMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stacker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IOldRollupAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IOldRollupAdminMetaData.ABI instead.
var IOldRollupAdminABI = IOldRollupAdminMetaData.ABI

// IOldRollupAdmin is an auto generated Go binding around an Ethereum contract.
type IOldRollupAdmin struct {
	IOldRollupAdminCaller     // Read-only binding to the contract
	IOldRollupAdminTransactor // Write-only binding to the contract
	IOldRollupAdminFilterer   // Log filterer for contract events
}

// IOldRollupAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOldRollupAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOldRollupAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOldRollupAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOldRollupAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOldRollupAdminSession struct {
	Contract     *IOldRollupAdmin  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOldRollupAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOldRollupAdminCallerSession struct {
	Contract *IOldRollupAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IOldRollupAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOldRollupAdminTransactorSession struct {
	Contract     *IOldRollupAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IOldRollupAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOldRollupAdminRaw struct {
	Contract *IOldRollupAdmin // Generic contract binding to access the raw methods on
}

// IOldRollupAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOldRollupAdminCallerRaw struct {
	Contract *IOldRollupAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IOldRollupAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOldRollupAdminTransactorRaw struct {
	Contract *IOldRollupAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOldRollupAdmin creates a new instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdmin(address common.Address, backend bind.ContractBackend) (*IOldRollupAdmin, error) {
	contract, err := bindIOldRollupAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdmin{IOldRollupAdminCaller: IOldRollupAdminCaller{contract: contract}, IOldRollupAdminTransactor: IOldRollupAdminTransactor{contract: contract}, IOldRollupAdminFilterer: IOldRollupAdminFilterer{contract: contract}}, nil
}

// NewIOldRollupAdminCaller creates a new read-only instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdminCaller(address common.Address, caller bind.ContractCaller) (*IOldRollupAdminCaller, error) {
	contract, err := bindIOldRollupAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdminCaller{contract: contract}, nil
}

// NewIOldRollupAdminTransactor creates a new write-only instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IOldRollupAdminTransactor, error) {
	contract, err := bindIOldRollupAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdminTransactor{contract: contract}, nil
}

// NewIOldRollupAdminFilterer creates a new log filterer instance of IOldRollupAdmin, bound to a specific deployed contract.
func NewIOldRollupAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IOldRollupAdminFilterer, error) {
	contract, err := bindIOldRollupAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOldRollupAdminFilterer{contract: contract}, nil
}

// bindIOldRollupAdmin binds a generic wrapper to an already deployed contract.
func bindIOldRollupAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IOldRollupAdminMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollupAdmin *IOldRollupAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollupAdmin.Contract.IOldRollupAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollupAdmin *IOldRollupAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.IOldRollupAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollupAdmin *IOldRollupAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.IOldRollupAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOldRollupAdmin *IOldRollupAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOldRollupAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOldRollupAdmin *IOldRollupAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOldRollupAdmin *IOldRollupAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.contract.Transact(opts, method, params...)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactor) ForceRefundStaker(opts *bind.TransactOpts, stacker []common.Address) (*types.Transaction, error) {
	return _IOldRollupAdmin.contract.Transact(opts, "forceRefundStaker", stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IOldRollupAdmin *IOldRollupAdminSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.ForceRefundStaker(&_IOldRollupAdmin.TransactOpts, stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactorSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.ForceRefundStaker(&_IOldRollupAdmin.TransactOpts, stacker)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IOldRollupAdmin *IOldRollupAdminSession) Pause() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Pause(&_IOldRollupAdmin.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactorSession) Pause() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Pause(&_IOldRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOldRollupAdmin.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IOldRollupAdmin *IOldRollupAdminSession) Resume() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Resume(&_IOldRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IOldRollupAdmin *IOldRollupAdminTransactorSession) Resume() (*types.Transaction, error) {
	return _IOldRollupAdmin.Contract.Resume(&_IOldRollupAdmin.TransactOpts)
}

// IRollupAdminMetaData contains all meta data concerning the IRollupAdmin contract.
var IRollupAdminMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stacker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"genesisAssertionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_challengeManager\",\"type\":\"address\"}],\"name\":\"setChallengeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupAdminMetaData.ABI instead.
var IRollupAdminABI = IRollupAdminMetaData.ABI

// IRollupAdmin is an auto generated Go binding around an Ethereum contract.
type IRollupAdmin struct {
	IRollupAdminCaller     // Read-only binding to the contract
	IRollupAdminTransactor // Write-only binding to the contract
	IRollupAdminFilterer   // Log filterer for contract events
}

// IRollupAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupAdminSession struct {
	Contract     *IRollupAdmin     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupAdminCallerSession struct {
	Contract *IRollupAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IRollupAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupAdminTransactorSession struct {
	Contract     *IRollupAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IRollupAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupAdminRaw struct {
	Contract *IRollupAdmin // Generic contract binding to access the raw methods on
}

// IRollupAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupAdminCallerRaw struct {
	Contract *IRollupAdminCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupAdminTransactorRaw struct {
	Contract *IRollupAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupAdmin creates a new instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdmin(address common.Address, backend bind.ContractBackend) (*IRollupAdmin, error) {
	contract, err := bindIRollupAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupAdmin{IRollupAdminCaller: IRollupAdminCaller{contract: contract}, IRollupAdminTransactor: IRollupAdminTransactor{contract: contract}, IRollupAdminFilterer: IRollupAdminFilterer{contract: contract}}, nil
}

// NewIRollupAdminCaller creates a new read-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminCaller(address common.Address, caller bind.ContractCaller) (*IRollupAdminCaller, error) {
	contract, err := bindIRollupAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminCaller{contract: contract}, nil
}

// NewIRollupAdminTransactor creates a new write-only instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupAdminTransactor, error) {
	contract, err := bindIRollupAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminTransactor{contract: contract}, nil
}

// NewIRollupAdminFilterer creates a new log filterer instance of IRollupAdmin, bound to a specific deployed contract.
func NewIRollupAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupAdminFilterer, error) {
	contract, err := bindIRollupAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminFilterer{contract: contract}, nil
}

// bindIRollupAdmin binds a generic wrapper to an already deployed contract.
func bindIRollupAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupAdminMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.IRollupAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.IRollupAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupAdmin *IRollupAdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupAdmin *IRollupAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.contract.Transact(opts, method, params...)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmAssertion(&_IRollupAdmin.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceConfirmAssertion(&_IRollupAdmin.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceCreateAssertion(opts *bind.TransactOpts, prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceCreateAssertion", prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateAssertion(&_IRollupAdmin.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceCreateAssertion(&_IRollupAdmin.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactor) ForceRefundStaker(opts *bind.TransactOpts, stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "forceRefundStaker", stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] stacker) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) ForceRefundStaker(stacker []common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.ForceRefundStaker(&_IRollupAdmin.TransactOpts, stacker)
}

// Initialize is a paid mutator transaction binding the contract method 0x9e7e6aa7.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x9e7e6aa7.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x9e7e6aa7.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Initialize(&_IRollupAdmin.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Pause() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Pause(&_IRollupAdmin.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.RemoveOldOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) Resume() (*types.Transaction, error) {
	return _IRollupAdmin.Contract.Resume(&_IRollupAdmin.TransactOpts)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetBaseStake(&_IRollupAdmin.TransactOpts, newBaseStake)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetChallengeManager(opts *bind.TransactOpts, _challengeManager common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setChallengeManager", _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_IRollupAdmin *IRollupAdminSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetChallengeManager(&_IRollupAdmin.TransactOpts, _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetChallengeManager(&_IRollupAdmin.TransactOpts, _challengeManager)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetConfirmPeriodBlocks(&_IRollupAdmin.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetDelayedInbox(&_IRollupAdmin.TransactOpts, _inbox, _enabled)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetLoserStakeEscrow(&_IRollupAdmin.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetMinimumAssertionPeriod(&_IRollupAdmin.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOutbox(&_IRollupAdmin.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetOwner(&_IRollupAdmin.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetSequencerInbox(&_IRollupAdmin.TransactOpts, _sequencerInbox)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidator(&_IRollupAdmin.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetValidatorWhitelistDisabled(&_IRollupAdmin.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_IRollupAdmin *IRollupAdminTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _IRollupAdmin.Contract.SetWasmModuleRoot(&_IRollupAdmin.TransactOpts, newWasmModuleRoot)
}

// IRollupAdminOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalledIterator struct {
	Event *IRollupAdminOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupAdminOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupAdminOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupAdminOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupAdminOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupAdminOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupAdminOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the IRollupAdmin contract.
type IRollupAdminOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*IRollupAdminOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &IRollupAdminOwnerFunctionCalledIterator{contract: _IRollupAdmin.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *IRollupAdminOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IRollupAdmin.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupAdminOwnerFunctionCalled)
				if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_IRollupAdmin *IRollupAdminFilterer) ParseOwnerFunctionCalled(log types.Log) (*IRollupAdminOwnerFunctionCalled, error) {
	event := new(IRollupAdminOwnerFunctionCalled)
	if err := _IRollupAdmin.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreMetaData contains all meta data concerning the IRollupCore contract.
var IRollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupCoreMetaData.ABI instead.
var IRollupCoreABI = IRollupCoreMetaData.ABI

// IRollupCore is an auto generated Go binding around an Ethereum contract.
type IRollupCore struct {
	IRollupCoreCaller     // Read-only binding to the contract
	IRollupCoreTransactor // Write-only binding to the contract
	IRollupCoreFilterer   // Log filterer for contract events
}

// IRollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupCoreSession struct {
	Contract     *IRollupCore      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupCoreCallerSession struct {
	Contract *IRollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupCoreTransactorSession struct {
	Contract     *IRollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupCoreRaw struct {
	Contract *IRollupCore // Generic contract binding to access the raw methods on
}

// IRollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupCoreCallerRaw struct {
	Contract *IRollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupCoreTransactorRaw struct {
	Contract *IRollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupCore creates a new instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCore(address common.Address, backend bind.ContractBackend) (*IRollupCore, error) {
	contract, err := bindIRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupCore{IRollupCoreCaller: IRollupCoreCaller{contract: contract}, IRollupCoreTransactor: IRollupCoreTransactor{contract: contract}, IRollupCoreFilterer: IRollupCoreFilterer{contract: contract}}, nil
}

// NewIRollupCoreCaller creates a new read-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*IRollupCoreCaller, error) {
	contract, err := bindIRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreCaller{contract: contract}, nil
}

// NewIRollupCoreTransactor creates a new write-only instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupCoreTransactor, error) {
	contract, err := bindIRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreTransactor{contract: contract}, nil
}

// NewIRollupCoreFilterer creates a new log filterer instance of IRollupCore, bound to a specific deployed contract.
func NewIRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupCoreFilterer, error) {
	contract, err := bindIRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreFilterer{contract: contract}, nil
}

// bindIRollupCore binds a generic wrapper to an already deployed contract.
func bindIRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupCoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.IRollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.IRollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupCore *IRollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupCore *IRollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupCore *IRollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupCore.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.AmountStaked(&_IRollupCore.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupCore.Contract.BaseStake(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Bridge() (common.Address, error) {
	return _IRollupCore.Contract.Bridge(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _IRollupCore.Contract.ChainId(&_IRollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreSession) ChallengeManager() (common.Address, error) {
	return _IRollupCore.Contract.ChallengeManager(&_IRollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupCore.Contract.ChallengeManager(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupCore.Contract.ConfirmPeriodBlocks(&_IRollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupCore.Contract.GenesisAssertionHash(&_IRollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupCore.Contract.GenesisAssertionHash(&_IRollupCore.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupCore.Contract.GetAssertion(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupCore *IRollupCoreCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupCore.Contract.GetAssertion(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetFirstChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetFirstChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetSecondChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupCore.Contract.GetSecondChildCreationBlock(&_IRollupCore.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupCore *IRollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupCore *IRollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupCore *IRollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupCore.Contract.GetStaker(&_IRollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupCore.Contract.GetStakerAddress(&_IRollupCore.CallOpts, stakerNum)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsFirstChild(&_IRollupCore.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsFirstChild(&_IRollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsPending(&_IRollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupCore.Contract.IsPending(&_IRollupCore.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupCore.Contract.IsStaked(&_IRollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupCore.Contract.IsValidator(&_IRollupCore.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupCore.Contract.LatestConfirmed(&_IRollupCore.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupCore.Contract.LatestStakedAssertion(&_IRollupCore.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupCore.Contract.LatestStakedAssertion(&_IRollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupCore.Contract.LoserStakeEscrow(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupCore.Contract.MinimumAssertionPeriod(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) Outbox() (common.Address, error) {
	return _IRollupCore.Contract.Outbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupCore.Contract.RollupEventInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupCore.Contract.SequencerInbox(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupCore *IRollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _IRollupCore.Contract.StakeToken(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupCore *IRollupCoreCallerSession) StakerCount() (uint64, error) {
	return _IRollupCore.Contract.StakerCount(&_IRollupCore.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupCore.Contract.ValidateAssertionHash(&_IRollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupCore *IRollupCoreCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupCore.Contract.ValidateAssertionHash(&_IRollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupCore.Contract.ValidateConfig(&_IRollupCore.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupCore *IRollupCoreCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupCore.Contract.ValidateConfig(&_IRollupCore.CallOpts, assertionHash, configData)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupCore *IRollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupCore.Contract.ValidatorWhitelistDisabled(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupCore *IRollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupCore.Contract.WasmModuleRoot(&_IRollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupCore.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupCore *IRollupCoreCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupCore.Contract.WithdrawableFunds(&_IRollupCore.CallOpts, owner)
}

// IRollupCoreAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the IRollupCore contract.
type IRollupCoreAssertionConfirmedIterator struct {
	Event *IRollupCoreAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreAssertionConfirmed represents a AssertionConfirmed event raised by the IRollupCore contract.
type IRollupCoreAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupCoreAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreAssertionConfirmedIterator{contract: _IRollupCore.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupCoreAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreAssertionConfirmed)
				if err := _IRollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupCore *IRollupCoreFilterer) ParseAssertionConfirmed(log types.Log) (*IRollupCoreAssertionConfirmed, error) {
	event := new(IRollupCoreAssertionConfirmed)
	if err := _IRollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the IRollupCore contract.
type IRollupCoreAssertionCreatedIterator struct {
	Event *IRollupCoreAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreAssertionCreated represents a AssertionCreated event raised by the IRollupCore contract.
type IRollupCoreAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*IRollupCoreAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreAssertionCreatedIterator{contract: _IRollupCore.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *IRollupCoreAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreAssertionCreated)
				if err := _IRollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupCore *IRollupCoreFilterer) ParseAssertionCreated(log types.Log) (*IRollupCoreAssertionCreated, error) {
	event := new(IRollupCoreAssertionCreated)
	if err := _IRollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStartedIterator struct {
	Event *IRollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupCore contract.
type IRollupCoreRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupChallengeStartedIterator{contract: _IRollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupChallengeStarted)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupCoreRollupChallengeStarted, error) {
	event := new(IRollupCoreRollupChallengeStarted)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupCore contract.
type IRollupCoreRollupInitializedIterator struct {
	Event *IRollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreRollupInitialized represents a RollupInitialized event raised by the IRollupCore contract.
type IRollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupCoreRollupInitializedIterator{contract: _IRollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreRollupInitialized)
				if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupCore *IRollupCoreFilterer) ParseRollupInitialized(log types.Log) (*IRollupCoreRollupInitialized, error) {
	event := new(IRollupCoreRollupInitialized)
	if err := _IRollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdatedIterator struct {
	Event *IRollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupCore contract.
type IRollupCoreUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*IRollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserStakeUpdatedIterator{contract: _IRollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserStakeUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupCoreUserStakeUpdated, error) {
	event := new(IRollupCoreUserStakeUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupCore contract.
type IRollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupCoreUserWithdrawableFundsUpdatedIterator{contract: _IRollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupCoreUserWithdrawableFundsUpdated)
				if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupCore *IRollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(IRollupCoreUserWithdrawableFundsUpdated)
	if err := _IRollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupEventInboxMetaData contains all meta data concerning the IRollupEventInbox contract.
var IRollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IRollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupEventInboxMetaData.ABI instead.
var IRollupEventInboxABI = IRollupEventInboxMetaData.ABI

// IRollupEventInbox is an auto generated Go binding around an Ethereum contract.
type IRollupEventInbox struct {
	IRollupEventInboxCaller     // Read-only binding to the contract
	IRollupEventInboxTransactor // Write-only binding to the contract
	IRollupEventInboxFilterer   // Log filterer for contract events
}

// IRollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupEventInboxSession struct {
	Contract     *IRollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IRollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupEventInboxCallerSession struct {
	Contract *IRollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IRollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupEventInboxTransactorSession struct {
	Contract     *IRollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IRollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupEventInboxRaw struct {
	Contract *IRollupEventInbox // Generic contract binding to access the raw methods on
}

// IRollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupEventInboxCallerRaw struct {
	Contract *IRollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupEventInboxTransactorRaw struct {
	Contract *IRollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupEventInbox creates a new instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInbox(address common.Address, backend bind.ContractBackend) (*IRollupEventInbox, error) {
	contract, err := bindIRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInbox{IRollupEventInboxCaller: IRollupEventInboxCaller{contract: contract}, IRollupEventInboxTransactor: IRollupEventInboxTransactor{contract: contract}, IRollupEventInboxFilterer: IRollupEventInboxFilterer{contract: contract}}, nil
}

// NewIRollupEventInboxCaller creates a new read-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*IRollupEventInboxCaller, error) {
	contract, err := bindIRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxCaller{contract: contract}, nil
}

// NewIRollupEventInboxTransactor creates a new write-only instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupEventInboxTransactor, error) {
	contract, err := bindIRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxTransactor{contract: contract}, nil
}

// NewIRollupEventInboxFilterer creates a new log filterer instance of IRollupEventInbox, bound to a specific deployed contract.
func NewIRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupEventInboxFilterer, error) {
	contract, err := bindIRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupEventInboxFilterer{contract: contract}, nil
}

// bindIRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindIRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.IRollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.IRollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupEventInbox *IRollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupEventInbox *IRollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _IRollupEventInbox.Contract.Bridge(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_IRollupEventInbox *IRollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _IRollupEventInbox.Contract.Rollup(&_IRollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.Initialize(&_IRollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.RollupInitialized(&_IRollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.UpdateRollupAddress(&_IRollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_IRollupEventInbox *IRollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _IRollupEventInbox.Contract.UpdateRollupAddress(&_IRollupEventInbox.TransactOpts)
}

// IRollupUserMetaData contains all meta data concerning the IRollupUser contract.
var IRollupUserMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"winningEdgeId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"prevConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"confirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IRollupUserABI is the input ABI used to generate the binding from.
// Deprecated: Use IRollupUserMetaData.ABI instead.
var IRollupUserABI = IRollupUserMetaData.ABI

// IRollupUser is an auto generated Go binding around an Ethereum contract.
type IRollupUser struct {
	IRollupUserCaller     // Read-only binding to the contract
	IRollupUserTransactor // Write-only binding to the contract
	IRollupUserFilterer   // Log filterer for contract events
}

// IRollupUserCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRollupUserCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRollupUserTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRollupUserFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRollupUserSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRollupUserSession struct {
	Contract     *IRollupUser      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRollupUserCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRollupUserCallerSession struct {
	Contract *IRollupUserCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IRollupUserTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRollupUserTransactorSession struct {
	Contract     *IRollupUserTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IRollupUserRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRollupUserRaw struct {
	Contract *IRollupUser // Generic contract binding to access the raw methods on
}

// IRollupUserCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRollupUserCallerRaw struct {
	Contract *IRollupUserCaller // Generic read-only contract binding to access the raw methods on
}

// IRollupUserTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRollupUserTransactorRaw struct {
	Contract *IRollupUserTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRollupUser creates a new instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUser(address common.Address, backend bind.ContractBackend) (*IRollupUser, error) {
	contract, err := bindIRollupUser(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRollupUser{IRollupUserCaller: IRollupUserCaller{contract: contract}, IRollupUserTransactor: IRollupUserTransactor{contract: contract}, IRollupUserFilterer: IRollupUserFilterer{contract: contract}}, nil
}

// NewIRollupUserCaller creates a new read-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserCaller(address common.Address, caller bind.ContractCaller) (*IRollupUserCaller, error) {
	contract, err := bindIRollupUser(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserCaller{contract: contract}, nil
}

// NewIRollupUserTransactor creates a new write-only instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserTransactor(address common.Address, transactor bind.ContractTransactor) (*IRollupUserTransactor, error) {
	contract, err := bindIRollupUser(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRollupUserTransactor{contract: contract}, nil
}

// NewIRollupUserFilterer creates a new log filterer instance of IRollupUser, bound to a specific deployed contract.
func NewIRollupUserFilterer(address common.Address, filterer bind.ContractFilterer) (*IRollupUserFilterer, error) {
	contract, err := bindIRollupUser(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRollupUserFilterer{contract: contract}, nil
}

// bindIRollupUser binds a generic wrapper to an already deployed contract.
func bindIRollupUser(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IRollupUserMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.IRollupUserCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.IRollupUserTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRollupUser *IRollupUserCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IRollupUser.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRollupUser *IRollupUserTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRollupUser *IRollupUserTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRollupUser.Contract.contract.Transact(opts, method, params...)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.AmountStaked(&_IRollupUser.CallOpts, staker)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) BaseStake() (*big.Int, error) {
	return _IRollupUser.Contract.BaseStake(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Bridge() (common.Address, error) {
	return _IRollupUser.Contract.Bridge(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) ChainId() (*big.Int, error) {
	return _IRollupUser.Contract.ChainId(&_IRollupUser.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserSession) ChallengeManager() (common.Address, error) {
	return _IRollupUser.Contract.ChallengeManager(&_IRollupUser.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) ChallengeManager() (common.Address, error) {
	return _IRollupUser.Contract.ChallengeManager(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _IRollupUser.Contract.ConfirmPeriodBlocks(&_IRollupUser.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupUser.Contract.GenesisAssertionHash(&_IRollupUser.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _IRollupUser.Contract.GenesisAssertionHash(&_IRollupUser.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupUser.Contract.GetAssertion(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_IRollupUser *IRollupUserCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _IRollupUser.Contract.GetAssertion(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupUser.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _IRollupUser.Contract.GetAssertionCreationBlockForLogLookup(&_IRollupUser.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetFirstChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetFirstChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetSecondChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _IRollupUser.Contract.GetSecondChildCreationBlock(&_IRollupUser.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupUser *IRollupUserCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupUser *IRollupUserSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_IRollupUser *IRollupUserCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _IRollupUser.Contract.GetStaker(&_IRollupUser.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_IRollupUser *IRollupUserCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _IRollupUser.Contract.GetStakerAddress(&_IRollupUser.CallOpts, stakerNum)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCaller) Initialize(opts *bind.CallOpts, stakeToken common.Address) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "initialize", stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address stakeToken) view returns()
func (_IRollupUser *IRollupUserCallerSession) Initialize(stakeToken common.Address) error {
	return _IRollupUser.Contract.Initialize(&_IRollupUser.CallOpts, stakeToken)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsFirstChild(&_IRollupUser.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsFirstChild(&_IRollupUser.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsPending(&_IRollupUser.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _IRollupUser.Contract.IsPending(&_IRollupUser.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _IRollupUser.Contract.IsStaked(&_IRollupUser.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _IRollupUser.Contract.IsValidator(&_IRollupUser.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) LatestConfirmed() ([32]byte, error) {
	return _IRollupUser.Contract.LatestConfirmed(&_IRollupUser.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupUser.Contract.LatestStakedAssertion(&_IRollupUser.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _IRollupUser.Contract.LatestStakedAssertion(&_IRollupUser.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _IRollupUser.Contract.LoserStakeEscrow(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _IRollupUser.Contract.MinimumAssertionPeriod(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Outbox() (common.Address, error) {
	return _IRollupUser.Contract.Outbox(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) Owner() (common.Address, error) {
	return _IRollupUser.Contract.Owner(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) RollupEventInbox() (common.Address, error) {
	return _IRollupUser.Contract.RollupEventInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) SequencerInbox() (common.Address, error) {
	return _IRollupUser.Contract.SequencerInbox(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_IRollupUser *IRollupUserCallerSession) StakeToken() (common.Address, error) {
	return _IRollupUser.Contract.StakeToken(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_IRollupUser *IRollupUserCallerSession) StakerCount() (uint64, error) {
	return _IRollupUser.Contract.StakerCount(&_IRollupUser.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupUser.Contract.ValidateAssertionHash(&_IRollupUser.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) view returns()
func (_IRollupUser *IRollupUserCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _IRollupUser.Contract.ValidateAssertionHash(&_IRollupUser.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupUser.Contract.ValidateConfig(&_IRollupUser.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_IRollupUser *IRollupUserCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _IRollupUser.Contract.ValidateConfig(&_IRollupUser.CallOpts, assertionHash, configData)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_IRollupUser *IRollupUserCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _IRollupUser.Contract.ValidatorWhitelistDisabled(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_IRollupUser *IRollupUserCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _IRollupUser.Contract.WasmModuleRoot(&_IRollupUser.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCaller) WithdrawableFunds(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IRollupUser.contract.Call(opts, &out, "withdrawableFunds", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address owner) view returns(uint256)
func (_IRollupUser *IRollupUserCallerSession) WithdrawableFunds(owner common.Address) (*big.Int, error) {
	return _IRollupUser.Contract.WithdrawableFunds(&_IRollupUser.CallOpts, owner)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_IRollupUser *IRollupUserTransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.AddToDeposit(&_IRollupUser.TransactOpts, stakerAddress, tokenAmount)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserTransactor) ConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "confirmAssertion", assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmAssertion(&_IRollupUser.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_IRollupUser *IRollupUserTransactorSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.ConfirmAssertion(&_IRollupUser.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address withdrawalAddress) returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnNewAssertion50f32f68(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnNewAssertion", tokenAmount, assertion, expectedAssertionHash, withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address withdrawalAddress) returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnNewAssertion50f32f68(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion50f32f68(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash, withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address withdrawalAddress) returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnNewAssertion50f32f68(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion50f32f68(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash, withdrawalAddress)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactor) NewStakeOnNewAssertion7300201c(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "newStakeOnNewAssertion0", tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserSession) NewStakeOnNewAssertion7300201c(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion7300201c(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) NewStakeOnNewAssertion7300201c(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.NewStakeOnNewAssertion7300201c(&_IRollupUser.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_IRollupUser *IRollupUserTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _IRollupUser.Contract.ReduceDeposit(&_IRollupUser.TransactOpts, target)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterFork(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_IRollupUser *IRollupUserTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _IRollupUser.Contract.RemoveWhitelistAfterValidatorAfk(&_IRollupUser.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserTransactor) ReturnOldDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "returnOldDeposit")
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_IRollupUser *IRollupUserTransactorSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _IRollupUser.Contract.ReturnOldDeposit(&_IRollupUser.TransactOpts)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactor) StakeOnNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "stakeOnNewAssertion", assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewAssertion(&_IRollupUser.TransactOpts, assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_IRollupUser *IRollupUserTransactorSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _IRollupUser.Contract.StakeOnNewAssertion(&_IRollupUser.TransactOpts, assertion, expectedAssertionHash)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRollupUser.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_IRollupUser *IRollupUserTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _IRollupUser.Contract.WithdrawStakerFunds(&_IRollupUser.TransactOpts)
}

// IRollupUserAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the IRollupUser contract.
type IRollupUserAssertionConfirmedIterator struct {
	Event *IRollupUserAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAssertionConfirmed represents a AssertionConfirmed event raised by the IRollupUser contract.
type IRollupUserAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*IRollupUserAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAssertionConfirmedIterator{contract: _IRollupUser.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *IRollupUserAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAssertionConfirmed)
				if err := _IRollupUser.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_IRollupUser *IRollupUserFilterer) ParseAssertionConfirmed(log types.Log) (*IRollupUserAssertionConfirmed, error) {
	event := new(IRollupUserAssertionConfirmed)
	if err := _IRollupUser.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the IRollupUser contract.
type IRollupUserAssertionCreatedIterator struct {
	Event *IRollupUserAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserAssertionCreated represents a AssertionCreated event raised by the IRollupUser contract.
type IRollupUserAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*IRollupUserAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserAssertionCreatedIterator{contract: _IRollupUser.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *IRollupUserAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserAssertionCreated)
				if err := _IRollupUser.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_IRollupUser *IRollupUserFilterer) ParseAssertionCreated(log types.Log) (*IRollupUserAssertionCreated, error) {
	event := new(IRollupUserAssertionCreated)
	if err := _IRollupUser.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the IRollupUser contract.
type IRollupUserRollupChallengeStartedIterator struct {
	Event *IRollupUserRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupChallengeStarted represents a RollupChallengeStarted event raised by the IRollupUser contract.
type IRollupUserRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*IRollupUserRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupChallengeStartedIterator{contract: _IRollupUser.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupChallengeStarted)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_IRollupUser *IRollupUserFilterer) ParseRollupChallengeStarted(log types.Log) (*IRollupUserRollupChallengeStarted, error) {
	event := new(IRollupUserRollupChallengeStarted)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the IRollupUser contract.
type IRollupUserRollupInitializedIterator struct {
	Event *IRollupUserRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserRollupInitialized represents a RollupInitialized event raised by the IRollupUser contract.
type IRollupUserRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*IRollupUserRollupInitializedIterator, error) {

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &IRollupUserRollupInitializedIterator{contract: _IRollupUser.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *IRollupUserRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserRollupInitialized)
				if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_IRollupUser *IRollupUserFilterer) ParseRollupInitialized(log types.Log) (*IRollupUserRollupInitialized, error) {
	event := new(IRollupUserRollupInitialized)
	if err := _IRollupUser.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the IRollupUser contract.
type IRollupUserUserStakeUpdatedIterator struct {
	Event *IRollupUserUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserStakeUpdated represents a UserStakeUpdated event raised by the IRollupUser contract.
type IRollupUserUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*IRollupUserUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserStakeUpdatedIterator{contract: _IRollupUser.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserStakeUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserStakeUpdated(log types.Log) (*IRollupUserUserStakeUpdated, error) {
	event := new(IRollupUserUserStakeUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IRollupUserUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdatedIterator struct {
	Event *IRollupUserUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRollupUserUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRollupUserUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRollupUserUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the IRollupUser contract.
type IRollupUserUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*IRollupUserUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &IRollupUserUserWithdrawableFundsUpdatedIterator{contract: _IRollupUser.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *IRollupUserUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IRollupUser.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRollupUserUserWithdrawableFundsUpdated)
				if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_IRollupUser *IRollupUserFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*IRollupUserUserWithdrawableFundsUpdated, error) {
	event := new(IRollupUserUserWithdrawableFundsUpdated)
	if err := _IRollupUser.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ISeqInboxPostUpgradeInitMetaData contains all meta data concerning the ISeqInboxPostUpgradeInit contract.
var ISeqInboxPostUpgradeInitMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig_\",\"type\":\"tuple\"}],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ISeqInboxPostUpgradeInitABI is the input ABI used to generate the binding from.
// Deprecated: Use ISeqInboxPostUpgradeInitMetaData.ABI instead.
var ISeqInboxPostUpgradeInitABI = ISeqInboxPostUpgradeInitMetaData.ABI

// ISeqInboxPostUpgradeInit is an auto generated Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInit struct {
	ISeqInboxPostUpgradeInitCaller     // Read-only binding to the contract
	ISeqInboxPostUpgradeInitTransactor // Write-only binding to the contract
	ISeqInboxPostUpgradeInitFilterer   // Log filterer for contract events
}

// ISeqInboxPostUpgradeInitCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISeqInboxPostUpgradeInitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISeqInboxPostUpgradeInitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISeqInboxPostUpgradeInitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISeqInboxPostUpgradeInitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISeqInboxPostUpgradeInitSession struct {
	Contract     *ISeqInboxPostUpgradeInit // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ISeqInboxPostUpgradeInitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISeqInboxPostUpgradeInitCallerSession struct {
	Contract *ISeqInboxPostUpgradeInitCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// ISeqInboxPostUpgradeInitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISeqInboxPostUpgradeInitTransactorSession struct {
	Contract     *ISeqInboxPostUpgradeInitTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// ISeqInboxPostUpgradeInitRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitRaw struct {
	Contract *ISeqInboxPostUpgradeInit // Generic contract binding to access the raw methods on
}

// ISeqInboxPostUpgradeInitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitCallerRaw struct {
	Contract *ISeqInboxPostUpgradeInitCaller // Generic read-only contract binding to access the raw methods on
}

// ISeqInboxPostUpgradeInitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISeqInboxPostUpgradeInitTransactorRaw struct {
	Contract *ISeqInboxPostUpgradeInitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISeqInboxPostUpgradeInit creates a new instance of ISeqInboxPostUpgradeInit, bound to a specific deployed contract.
func NewISeqInboxPostUpgradeInit(address common.Address, backend bind.ContractBackend) (*ISeqInboxPostUpgradeInit, error) {
	contract, err := bindISeqInboxPostUpgradeInit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISeqInboxPostUpgradeInit{ISeqInboxPostUpgradeInitCaller: ISeqInboxPostUpgradeInitCaller{contract: contract}, ISeqInboxPostUpgradeInitTransactor: ISeqInboxPostUpgradeInitTransactor{contract: contract}, ISeqInboxPostUpgradeInitFilterer: ISeqInboxPostUpgradeInitFilterer{contract: contract}}, nil
}

// NewISeqInboxPostUpgradeInitCaller creates a new read-only instance of ISeqInboxPostUpgradeInit, bound to a specific deployed contract.
func NewISeqInboxPostUpgradeInitCaller(address common.Address, caller bind.ContractCaller) (*ISeqInboxPostUpgradeInitCaller, error) {
	contract, err := bindISeqInboxPostUpgradeInit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISeqInboxPostUpgradeInitCaller{contract: contract}, nil
}

// NewISeqInboxPostUpgradeInitTransactor creates a new write-only instance of ISeqInboxPostUpgradeInit, bound to a specific deployed contract.
func NewISeqInboxPostUpgradeInitTransactor(address common.Address, transactor bind.ContractTransactor) (*ISeqInboxPostUpgradeInitTransactor, error) {
	contract, err := bindISeqInboxPostUpgradeInit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISeqInboxPostUpgradeInitTransactor{contract: contract}, nil
}

// NewISeqInboxPostUpgradeInitFilterer creates a new log filterer instance of ISeqInboxPostUpgradeInit, bound to a specific deployed contract.
func NewISeqInboxPostUpgradeInitFilterer(address common.Address, filterer bind.ContractFilterer) (*ISeqInboxPostUpgradeInitFilterer, error) {
	contract, err := bindISeqInboxPostUpgradeInit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISeqInboxPostUpgradeInitFilterer{contract: contract}, nil
}

// bindISeqInboxPostUpgradeInit binds a generic wrapper to an already deployed contract.
func bindISeqInboxPostUpgradeInit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ISeqInboxPostUpgradeInitMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISeqInboxPostUpgradeInit.Contract.ISeqInboxPostUpgradeInitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.ISeqInboxPostUpgradeInitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.ISeqInboxPostUpgradeInitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISeqInboxPostUpgradeInit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.contract.Transact(opts, method, params...)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0xa655d937.
//
// Solidity: function postUpgradeInit((uint64,uint64,uint64) bufferConfig_) returns()
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitTransactor) PostUpgradeInit(opts *bind.TransactOpts, bufferConfig_ BufferConfig) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.contract.Transact(opts, "postUpgradeInit", bufferConfig_)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0xa655d937.
//
// Solidity: function postUpgradeInit((uint64,uint64,uint64) bufferConfig_) returns()
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitSession) PostUpgradeInit(bufferConfig_ BufferConfig) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.PostUpgradeInit(&_ISeqInboxPostUpgradeInit.TransactOpts, bufferConfig_)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0xa655d937.
//
// Solidity: function postUpgradeInit((uint64,uint64,uint64) bufferConfig_) returns()
func (_ISeqInboxPostUpgradeInit *ISeqInboxPostUpgradeInitTransactorSession) PostUpgradeInit(bufferConfig_ BufferConfig) (*types.Transaction, error) {
	return _ISeqInboxPostUpgradeInit.Contract.PostUpgradeInit(&_ISeqInboxPostUpgradeInit.TransactOpts, bufferConfig_)
}

// RollupAdminLogicMetaData contains all meta data concerning the RollupAdminLogic contract.
var RollupAdminLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeGracePeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"forceConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"forceCreateAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"genesisAssertionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyTrustFastConfirmer\",\"type\":\"address\"}],\"name\":\"setAnyTrustFastConfirmer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_challengeManager\",\"type\":\"address\"}],\"name\":\"setChallengeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newConfirmPeriod\",\"type\":\"uint64\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayedInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"newInbox\",\"type\":\"address\"}],\"name\":\"setInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLoserStakerEscrow\",\"type\":\"address\"}],\"name\":\"setLoserStakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerInbox\",\"type\":\"address\"}],\"name\":\"setSequencerInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_validatorWhitelistDisabled\",\"type\":\"bool\"}],\"name\":\"setValidatorWhitelistDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newWasmModuleRoot\",\"type\":\"bytes32\"}],\"name\":\"setWasmModuleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeSecondaryTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeSecondaryToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c0604052620000196200003660201b62002d101760201c565b15156080523060a0523480156200002f57600080fd5b5062000104565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b179052905160009182918291606491620000769190620000d3565b600060405180830381855afa9150503d8060008114620000b3576040519150601f19603f3d011682016040523d82523d6000602084013e620000b8565b606091505b5091509150818015620000cc575080516020145b9250505090565b6000825160005b81811015620000f65760208186018101518583015201620000da565b506000920191825250919050565b60805160a0516158766200017e60003960008181610e4101528181610ecb015281816111ca0152818161124f015281816113ae015281816114330152818161157c01528181611a0701528181611a8c01528181611b710152611bf601526000818161101f01528181612734015261412701526158766000f3fe6080604052600436106103de5760003560e01c80636ddd37441161020d578063aa38a6e711610128578063e78cea92116100bb578063f065de3f1161008a578063fb0e722b1161006f578063fb0e722b14610d77578063fc8ffa0314610d97578063ff204f3b14610db757600080fd5b8063f065de3f14610d27578063facd743b14610d4757600080fd5b8063e78cea9214610c0e578063e8bd492214610c2e578063ee35f32714610cdc578063ef40a67014610cf157600080fd5b8063ce66d05c116100f7578063ce66d05c14610b99578063dff6978714610bb9578063e51019a614610bce578063e531d8c714610bee57600080fd5b8063aa38a6e714610b19578063b7626e7314610b39578063bc45e0ae14610b59578063ce11e6ab14610b7957600080fd5b8063948d6588116101a05780639e7e6aa71161016f5780639e7e6aa7146109a1578063a23c44b1146109c1578063a2b4f1d814610ad9578063a3ffb77214610af957600080fd5b8063948d6588146109385780639846129a146109585780639a7b45561461096b5780639a8a05921461098b57600080fd5b80638456cb59116101dc5780638456cb59146108c057806388302884146108d557806389384960146109025780638ee1a1261461092257600080fd5b80636ddd37441461085457806371ef232c1461087457806376e7e23b1461088a5780637c75c298146108a057600080fd5b80633659cfe6116102fd57806353b60c4a116102905780635bf038331161025f5780635bf03833146107bf5780635c975abb146107df5780636177fd18146107f757806365f7f80d1461083f57600080fd5b806353b60c4a1461073a57806355840a581461075a578063567ca41b1461077f57806356bbc9e61461079f57600080fd5b80634f1ef286116102cc5780634f1ef286146106d25780634f61f850146106e557806351ed6a301461070557806352d1902d1461072557600080fd5b80633659cfe6146106435780633be680ea1461066357806345e38b641461069c57806347fb24c5146106b257600080fd5b806313af4035116103755780632e7acfa6116103445780632e7acfa6146105b75780632f30cabd146105d8578063308362281461060e578063353325e01461062e57600080fd5b806313af40351461051a57806313c56ca71461053a5780631b1689e9146105685780632abdd2301461057e57600080fd5b80630d40a0fd116103b15780630d40a0fd146104775780630d561b371461049757806311715585146104b757806312ab3d3b146104f057600080fd5b8063023a96fe146103e3578063046f7da21461042057806304972af91461043757806306ae585114610457575b600080fd5b3480156103ef57600080fd5b50606954610403906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561042c57600080fd5b50610435610dd7565b005b34801561044357600080fd5b50610435610452366004614d00565b610dfb565b34801561046357600080fd5b50610435610472366004614d38565b610e15565b34801561048357600080fd5b50610435610492366004614d66565b610e37565b3480156104a357600080fd5b506104356104b2366004614d66565b610f85565b3480156104c357600080fd5b506104d76104d2366004614d38565b610fd9565b60405167ffffffffffffffff9091168152602001610417565b3480156104fc57600080fd5b50607a5461050a9060ff1681565b6040519015158152602001610417565b34801561052657600080fd5b50610435610535366004614d66565b610ff5565b34801561054657600080fd5b5061055a610555366004614d38565b61101b565b604051908152602001610417565b34801561057457600080fd5b5061055a60795481565b34801561058a57600080fd5b5061055a610599366004614d66565b6001600160a01b031660009081526076602052604090206001015490565b3480156105c357600080fd5b506066546104d79067ffffffffffffffff1681565b3480156105e457600080fd5b5061055a6105f3366004614d66565b6001600160a01b031660009081526077602052604090205490565b34801561061a57600080fd5b5061050a610629366004614d38565b611168565b34801561063a57600080fd5b5061055a611184565b34801561064f57600080fd5b5061043561065e366004614d66565b6111c0565b34801561066f57600080fd5b506069546104d79074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b3480156106a857600080fd5b5061055a60715481565b3480156106be57600080fd5b506104356106cd366004614d91565b611306565b6104356106e0366004614e3a565b6113a4565b3480156106f157600080fd5b50610435610700366004614d66565b6114da565b34801561071157600080fd5b50607054610403906001600160a01b031681565b34801561073157600080fd5b5061055a61156f565b34801561074657600080fd5b50610435610755366004614d66565b611634565b34801561076657600080fd5b50607a546104039061010090046001600160a01b031681565b34801561078b57600080fd5b5061043561079a366004614d66565b61166c565b3480156107ab57600080fd5b506104d76107ba366004614d38565b611766565b3480156107cb57600080fd5b506104356107da366004614efa565b61178e565b3480156107eb57600080fd5b5060335460ff1661050a565b34801561080357600080fd5b5061050a610812366004614d66565b6001600160a01b031660009081526076602052604090206002015468010000000000000000900460ff1690565b34801561084b57600080fd5b5060735461055a565b34801561086057600080fd5b5061040361086f366004614f52565b6117c2565b34801561088057600080fd5b5061055a60785481565b34801561089657600080fd5b5061055a60675481565b3480156108ac57600080fd5b506104356108bb366004614fb9565b6117fc565b3480156108cc57600080fd5b506104356118ee565b3480156108e157600080fd5b506108f56108f0366004614d38565b611912565b604051610417919061502f565b34801561090e57600080fd5b5061043561091d366004614d38565b6119b9565b34801561092e57600080fd5b5061055a60685481565b34801561094457600080fd5b50610435610953366004614d38565b6119db565b610435610966366004614e3a565b6119fd565b34801561097757600080fd5b50610435610986366004615090565b611b33565b34801561099757600080fd5b5061055a60655481565b3480156109ad57600080fd5b506104356109bc3660046150d4565b611b67565b3480156109cd57600080fd5b50610a826109dc366004614d66565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b03908116600090815260766020908152604091829020825160a081018452815481526001820154928101929092526002015467ffffffffffffffff81169282019290925260ff68010000000000000000830416151560608201526901000000000000000000909104909116608082015290565b6040516104179190600060a082019050825182526020830151602083015267ffffffffffffffff60408401511660408301526060830151151560608301526001600160a01b03608084015116608083015292915050565b348015610ae557600080fd5b50610435610af4366004615128565b61285c565b348015610b0557600080fd5b50610435610b14366004615145565b612887565b348015610b2557600080fd5b50606d54610403906001600160a01b031681565b348015610b4557600080fd5b50610435610b54366004614d66565b6129db565b348015610b6557600080fd5b50606e54610403906001600160a01b031681565b348015610b8557600080fd5b50606c54610403906001600160a01b031681565b348015610ba557600080fd5b50610435610bb4366004614f52565b612a13565b348015610bc557600080fd5b506075546104d7565b348015610bda57600080fd5b50610435610be93660046151b1565b612aa7565b348015610bfa57600080fd5b5061050a610c09366004614d38565b612b14565b348015610c1a57600080fd5b50606b54610403906001600160a01b031681565b348015610c3a57600080fd5b50610c9c610c49366004614d66565b60766020526000908152604090208054600182015460029092015490919067ffffffffffffffff81169068010000000000000000810460ff1690690100000000000000000090046001600160a01b031685565b60408051958652602086019490945267ffffffffffffffff9092169284019290925290151560608301526001600160a01b0316608082015260a001610417565b348015610ce857600080fd5b50610403612b44565b348015610cfd57600080fd5b5061055a610d0c366004614d66565b6001600160a01b031660009081526076602052604090205490565b348015610d3357600080fd5b50606f54610403906001600160a01b031681565b348015610d5357600080fd5b5061050a610d62366004614d66565b60726020526000908152604090205460ff1681565b348015610d8357600080fd5b50606a54610403906001600160a01b031681565b348015610da357600080fd5b50610435610db2366004614d66565b612bd0565b348015610dc357600080fd5b50610435610dd2366004614d66565b612c5e565b610ddf612dd6565b6040516004906000805160206157fa83398151915290600090a2565b610e1181610e0884612e28565b60010154612e89565b5050565b6067819055604051600c906000805160206157fa83398151915290600090a250565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ec95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610efb612f8e565b6001600160a01b031614610f665760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610ec0565b60408051600080825260208201909252610f8291839190612fc1565b50565b607a80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03841602179055604051601f906000805160206157fa83398151915290600090a250565b6000610fe482612e28565b5467ffffffffffffffff1692915050565b610ffe81613161565b6040516007906000805160206157fa83398151915290600090a250565b60007f0000000000000000000000000000000000000000000000000000000000000000156110a5576000828152607b60205260409020548061109f5760405162461bcd60e51b815260206004820152600c60248201527f4e4f5f415353455254494f4e00000000000000000000000000000000000000006044820152606401610ec0565b92915050565b60006110b083612e28565b6040805160c081018252825467ffffffffffffffff808216835268010000000000000000820481166020840152600160801b8204169282019290925260ff600160c01b830481161515606083015292935061114b92909184916080840191600160c81b900416600281111561112757611127614ffb565b600281111561113857611138614ffb565b81526020016001820154815250506131b5565b54600160801b900467ffffffffffffffff1692915050565b919050565b600061117382612e28565b54600160c01b900460ff1692915050565b600061118e614bfd565b6040805160608101825282815260016020820152600091810182905290806111b781848161321a565b94505050505090565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361124d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610ec0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661127f612f8e565b6001600160a01b0316146112ea5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610ec0565b60408051600080825260208201909252610f8291839190613233565b606b546040517f47fb24c50000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528315156024830152909116906347fb24c590604401600060405180830381600087803b15801561136e57600080fd5b505af1158015611382573d6000803e3d6000fd5b5050604051600292506000805160206157fa8339815191529150600090a25050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114315760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610ec0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611463612f8e565b6001600160a01b0316146114ce5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610ec0565b610e1182826001613233565b606b546040517f4f61f8500000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015290911690634f61f85090602401600060405180830381600087803b15801561153a57600080fd5b505af115801561154e573d6000803e3d6000fd5b5050604051601b92506000805160206157fa8339815191529150600090a250565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461160f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610ec0565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b606a80546001600160a01b0319166001600160a01b038316179055604051601c906000805160206157fa83398151915290600090a250565b606c546001600160a01b03908116908216036116ca5760405162461bcd60e51b815260206004820152600a60248201527f4355525f4f5554424f58000000000000000000000000000000000000000000006044820152606401610ec0565b606b546040517fcee3d7280000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600060248301529091169063cee3d72890604401600060405180830381600087803b15801561173157600080fd5b505af1158015611745573d6000803e3d6000fd5b5050604051600192506000805160206157fa8339815191529150600090a250565b600061177182612e28565b5468010000000000000000900467ffffffffffffffff1692915050565b6117966133d3565b6117a284848484613427565b6040516018906000805160206157fa83398151915290600090a250505050565b600060758267ffffffffffffffff16815481106117e1576117e16151ef565b6000918252602090912001546001600160a01b031692915050565b6118046133d3565b806118515760405162461bcd60e51b815260206004820152600b60248201527f454d5054595f41525241590000000000000000000000000000000000000000006044820152606401610ec0565b60005b818110156118cf5761188b838383818110611871576118716151ef565b90506020020160208101906118869190614d66565b613644565b6118bc8383838181106118a0576118a06151ef565b90506020020160208101906118b59190614d66565b600061374d565b50806118c78161521b565b915050611854565b506040516016906000805160206157fa83398151915290600090a25050565b6118f661384e565b6040516003906000805160206157fa83398151915290600090a2565b61191a614c22565b61192382612e28565b6040805160c081018252825467ffffffffffffffff808216835268010000000000000000820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b90910416600281111561199357611993614ffb565b60028111156119a4576119a4614ffb565b81526020016001820154815250509050919050565b6068819055604051601a906000805160206157fa83398151915290600090a250565b60718190556040516008906000805160206157fa83398151915290600090a250565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611a8a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610ec0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611abc612f8e565b6001600160a01b031614611b275760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610ec0565b610e1182826001612fc1565b611b3b6133d3565b611b4682848361388b565b50506040516017906000805160206157fa83398151915290600090a2505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611bf45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610ec0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c26612f8e565b6001600160a01b031614611c915760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610ec0565b600054610100900460ff1615808015611cb15750600054600160ff909116105b80611ccb5750303b158015611ccb575060005460ff166001145b611d3d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ec0565b6000805460ff191660011790558015611d60576000805461ff0019166101001790555b43607955611d716020830183614d66565b606b80546001600160a01b0319166001600160a01b0392909216919091179055611d9e6020830183614d66565b6001600160a01b03166347fb24c5611dbc6060850160408601614d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b158015611e1c57600080fd5b505af1158015611e30573d6000803e3d6000fd5b50611e42925050506020830183614d66565b6001600160a01b0316634f61f850611e606040850160208601614d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015611eb957600080fd5b505af1158015611ecd573d6000803e3d6000fd5b50611ee2925050506060830160408401614d66565b606a80546001600160a01b0319166001600160a01b0392909216919091179055611f126080830160608401614d66565b606c80546001600160a01b0319166001600160a01b0392909216919091179055611f3f6020830183614d66565b6001600160a01b031663cee3d728611f5d6080850160608601614d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b158015611fbd57600080fd5b505af1158015611fd1573d6000803e3d6000fd5b50611fe69250505060a0830160808401614d66565b606d80546001600160a01b0319166001600160a01b03928316179055606b541663ae60bd1361201b60a0850160808601614d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209b9190615235565b6121c4576120ac6020830183614d66565b6001600160a01b03166347fb24c56120ca60a0850160808601614d66565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561212a57600080fd5b505af115801561213e573d6000803e3d6000fd5b506121539250505060a0830160808401614d66565b6001600160a01b031663cf8d56d660c085013561217360e0870187615252565b6040518463ffffffff1660e01b8152600401612191939291906152b7565b600060405180830381600087803b1580156121ab57600080fd5b505af11580156121bf573d6000803e3d6000fd5b505050505b6121d46040830160208401614d66565b6001600160a01b0316637fa3a40e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612211573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223591906152ed565b6000036122ef5761224c6040830160208401614d66565b6040517fe0bc972900000000000000000000000000000000000000000000000000000000815260006004820181905260c0602483015260c4820181905260016044830181905260648301829052608483019190915260a48201526001600160a01b03919091169063e0bc97299060e401600060405180830381600087803b1580156122d657600080fd5b505af11580156122ea573d6000803e3d6000fd5b505050505b61230161012083016101008401614d66565b606e80546001600160a01b0319166001600160a01b039290921691909117905561233160c0830160a08401614d66565b606980546001600160a01b0319166001600160a01b039290921691909117905561235e6020840184614f52565b6066805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560c083013560655560408301356067556060830135606855604b6071556123af61034084016103208501614f52565b6069805467ffffffffffffffff9290921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055600061241360c0850160a08601614d66565b6001600160a01b0316036124695760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f455343524f575f30000000000000000000000000000000006044820152606401610ec0565b61247960c0840160a08501614d66565b606f80546001600160a01b0319166001600160a01b03929092169190911790556124a96040840160208501614d66565b607080546001600160a01b0319166001600160a01b03929092169190911790556124db61030084016102e08501614d66565b607a80546001600160a01b0392909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055600080806125718161253c612537368a90038a016102008b01615427565b6141ca565b604080516020808201949094528082019290925260608083018790528151808403909101815260809092019052805191012090565b90506000606b60009054906101000a90046001600160a01b03166001600160a01b03166284120c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125eb91906152ed565b9050866102c0013581036126075761260460018261548e565b90505b60685460675460695460665460408051602080820196909652808201949094526bffffffffffffffffffffffff19606093841b16928401929092527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b811660748501529085901b16607c8301528051606481840301815260849092019052805191012060009061269e906001906141fa565b90506126aa8184614232565b6126b2614c59565b6126c5368a90038a016102008b01615427565b60408083019190915260685460675460695460665493518a9489947f901c3aee23cf4478825462caaab375c606ab83516060388344f06503407536309461272a9489948e948d9493926001600160a01b03169167ffffffffffffffff9091169061552f565b60405180910390a37f0000000000000000000000000000000000000000000000000000000000000000156127cb5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bb91906152ed565b6000858152607b60205260409020555b6040805160608b0135815260c08b013560208201527ffc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464910160405180910390a15050505050508015612857576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b607a805460ff1916821515179055604051601e906000805160206157fa83398151915290600090a250565b826128d45760405162461bcd60e51b815260206004820152600b60248201527f454d5054595f41525241590000000000000000000000000000000000000000006044820152606401610ec0565b8281146129235760405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f4c454e47544800000000000000000000000000000000000000006044820152606401610ec0565b60005b838110156129ba57828282818110612940576129406151ef565b90506020020160208101906129559190615128565b6072600087878581811061296b5761296b6151ef565b90506020020160208101906129809190614d66565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806129b28161521b565b915050612926565b506040516006906000805160206157fa83398151915290600090a250505050565b606980546001600160a01b0319166001600160a01b0383161790556040516020906000805160206157fa83398151915290600090a250565b60008167ffffffffffffffff1611612a6d5760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f434f4e4649524d5f504552494f44000000000000000000006044820152606401610ec0565b6066805467ffffffffffffffff191667ffffffffffffffff83161790556040516009906000805160206157fa83398151915290600090a250565b612ac082612aba36869003860186615427565b8361321a565b8414612b0e5760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f415353455254494f4e5f48415348000000000000000000006044820152606401610ec0565b50505050565b60006001612b2183612e28565b54600160c81b900460ff166002811115612b3d57612b3d614ffb565b1492915050565b606b54604080517fee35f32700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ee35f3279160048083019260209291908290030181865afa158015612ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcb919061560e565b905090565b6001600160a01b038116612c265760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f455343524f575f30000000000000000000000000000000006044820152606401610ec0565b606f80546001600160a01b0319166001600160a01b0383161790556040516019906000805160206157fa83398151915290600090a250565b606c80546001600160a01b0319166001600160a01b03838116918217909255606b546040517fcee3d7280000000000000000000000000000000000000000000000000000000081526004810192909252600160248301529091169063cee3d72890604401600060405180830381600087803b158015612cdc57600080fd5b505af1158015612cf0573d6000803e3d6000fd5b5050604051600092506000805160206157fa83398151915291508290a250565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f051038f200000000000000000000000000000000000000000000000000000000179052905160009182918291606491612d7c919061564f565b600060405180830381855afa9150503d8060008114612db7576040519150601f19603f3d011682016040523d82523d6000602084013e612dbc565b606091505b5091509150818015612dcf575080516020145b9250505090565b612dde6133d3565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081612e775760405162461bcd60e51b815260206004820152601b60248201527f415353455254494f4e5f49445f43414e4e4f545f42455f5a45524f00000000006044820152606401610ec0565b50600090815260746020526040902090565b612f4082356020840135612ea36060860160408701614d66565b612eb36080870160608801614f52565b612ec360a0880160808901614f52565b60408051602080820197909752808201959095526bffffffffffffffffffffffff19606094851b16938501939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b81166074860152911b16607c8301528051606481840301815260849092019052805191012090565b8114610e115760405162461bcd60e51b815260206004820152601460248201527f434f4e4649475f484153485f4d49534d415443480000000000000000000000006044820152606401610ec0565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b546001600160a01b0316919050565b7f49bd798cd84788856140a4cd5030756b4d08a9e4d55db725ec195f232d262a895460ff1615612ff45761285783614369565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561304e575060408051601f3d908101601f1916820190925261304b918101906152ed565b60015b6130c05760405162461bcd60e51b815260206004820152603860248201527f45524331393637557067726164653a206e6577207365636f6e6461727920696d60448201527f706c656d656e746174696f6e206973206e6f74205555505300000000000000006064820152608401610ec0565b7f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d81146131555760405162461bcd60e51b815260206004820152603360248201527f45524331393637557067726164653a20756e737570706f72746564207365636f60448201527f6e646172792070726f786961626c6555554944000000000000000000000000006064820152608401610ec0565b5061285783838361442a565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61318a61444f565b604080516001600160a01b03928316815291841660208301520160405180910390a1610f8281614477565b6000816080015160028111156131cd576131cd614ffb565b03610f825760405162461bcd60e51b815260206004820152601360248201527f415353455254494f4e5f4e4f545f4558495354000000000000000000000000006044820152606401610ec0565b60006132298461253c856141ca565b90505b9392505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613266576128578361451a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156132c0575060408051601f3d908101601f191682019092526132bd918101906152ed565b60015b6133325760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610ec0565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146133c75760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610ec0565b506128578383836145be565b60335460ff166134255760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610ec0565b565b600061343285612e28565b905060018154600160c81b900460ff16600281111561345357613453614ffb565b146134a05760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f50454e44494e470000000000000000000000000000000000000000006044820152606401610ec0565b6134b9846134b336869003860186615427565b8461321a565b85146135075760405162461bcd60e51b815260206004820152600c60248201527f434f4e4649524d5f4441544100000000000000000000000000000000000000006044820152606401610ec0565b600061352061351b3686900386018661566b565b6145c7565b9050600061353b6135363687900387018761566b565b6145d9565b606c546040517fa04cee6000000000000000000000000000000000000000000000000000000000815260048101839052602481018590529192506001600160a01b03169063a04cee6090604401600060405180830381600087803b1580156135a257600080fd5b505af11580156135b6573d6000803e3d6000fd5b50505060738890555082547fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff167902000000000000000000000000000000000000000000000000001783556040805183815260208101839052815189927ffc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c928290030190a250505050505050565b6001600160a01b03811660009081526076602052604090206002015468010000000000000000900460ff166136bb5760405162461bcd60e51b815260206004820152600a60248201527f4e4f545f5354414b4544000000000000000000000000000000000000000000006044820152606401610ec0565b6001600160a01b038116600090815260766020526040812060010154607354909190821490806136ea84612e28565b5467ffffffffffffffff1611905081806137015750805b612b0e5760405162461bcd60e51b815260206004820152600c60248201527f5354414b455f41435449564500000000000000000000000000000000000000006044820152606401610ec0565b6001600160a01b0380831660009081526076602052604081206002810154815492939192690100000000000000000090910490911690808511156137d35760405162461bcd60e51b815260206004820152601060248201527f544f4f5f4c4954544c455f5354414b45000000000000000000000000000000006044820152606401610ec0565b60006137df8683615687565b86855590506137ee83826145e5565b826001600160a01b0316876001600160a01b03167fd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8848960405161383c929190918252602082015260400190565b60405180910390a39695505050505050565b61385661468a565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e0b3390565b60008061389e60408601610e0886612e28565b60016138b26102408701610220880161569a565b60028111156138c3576138c3614ffb565b14806138f1575060026138de6102408701610220880161569a565b60028111156138ef576138ef614ffb565b145b61393d5760405162461bcd60e51b815260206004820152601060248201527f4241445f41465445525f535441545553000000000000000000000000000000006044820152606401610ec0565b8361395f863561395536899003890160e08a01615427565b602089013561321a565b146139ac5760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f4245464f52455f53544154450000000000000000000000006044820152606401610ec0565b60016139c06101808701610160880161569a565b60028111156139d1576139d1614ffb565b14613a1e5760405162461bcd60e51b815260206004820152600f60248201527f4241445f505245565f53544154555300000000000000000000000000000000006044820152606401610ec0565b6000613a2985612e28565b90506000806101a0880160e0890182613a4283836146dd565b1215613a905760405162461bcd60e51b815260206004820152600f60248201527f494e424f585f4241434b574152445300000000000000000000000000000000006044820152606401610ec0565b6000613ab6613aa560e08d0160c08e01614f52565b849067ffffffffffffffff166147ea565b90506000811315613b095760405162461bcd60e51b815260206004820152600d60248201527f494e424f585f544f4f5f464152000000000000000000000000000000000000006044820152606401610ec0565b6002613b1d6102408d016102208e0161569a565b6002811115613b2e57613b2e614ffb565b14158015613b3c5750600081125b15613b9e57600196506000613b5184846146dd565b13613b9e5760405162461bcd60e51b815260206004820152601360248201527f4f564552464c4f575f5354414e445354494c4c000000000000000000000000006044820152606401610ec0565b606b54604080517e84120c00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916284120c9160048083019260209291908290030181865afa158015613bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2391906152ed565b90506000613c3185836147ea565b1315613c7f5760405162461bcd60e51b815260206004820152600e60248201527f494e424f585f504153545f454e440000000000000000000000000000000000006044820152606401610ec0565b80613c9060e08e0160c08f01614f52565b67ffffffffffffffff161115613ce85760405162461bcd60e51b815260206004820152601360248201527f494e424f585f4e4f545f504f50554c41544544000000000000000000000000006044820152606401610ec0565b6000613d01613cfc3687900387018761566b565b614872565b67ffffffffffffffff169050818103613d2657613d1f82600161548e565b9650613d2a565b8196505b80600003613d7a5760405162461bcd60e51b815260206004820152601160248201527f454d5054595f494e424f585f434f554e540000000000000000000000000000006044820152606401610ec0565b606b546001600160a01b03166316bf5579613d96600184615687565b6040518263ffffffff1660e01b8152600401613db491815260200190565b602060405180830381865afa158015613dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613df591906152ed565b95505050505050613e1587896101a001803603810190612aba9190615427565b945085851480613e23575085155b613e6f5760405162461bcd60e51b815260206004820152601960248201527f554e45585045435445445f415353455254494f4e5f48415348000000000000006044820152606401610ec0565b6000613e7a86612e28565b54600160c81b900460ff166002811115613e9657613e96614ffb565b14613ee35760405162461bcd60e51b815260206004820152600e60248201527f415353455254494f4e5f5345454e0000000000000000000000000000000000006044820152606401610ec0565b825460685460675460695460665460408051602080820196909652808201949094526bffffffffffffffffffffffff19606093841b16928401929092527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b811660748501529087901b16607c83015280516064818403018152608490920190528051910120600091613f879167ffffffffffffffff90911615906141fa565b9050613f9284614880565b60008681526074602090815260409182902083518154928501519385015160608601511515600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff928316600160801b02167fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff96831668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909616929093169190911793909317939093169290921717808255608083015183929182907fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff16600160c81b83600281111561409f5761409f614ffb565b021790555060a0820151816001015590505087867f901c3aee23cf4478825462caaab375c606ab83516060388344f06503407536308b8587606854606754606960009054906101000a90046001600160a01b0316606660009054906101000a900467ffffffffffffffff1660405161411d979695949392919061571e565b60405180910390a37f0000000000000000000000000000000000000000000000000000000000000000156141be5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561418a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ae91906152ed565b6000878152607b60205260409020555b50505050935093915050565b6000816040516020016141dd91906157b8565b604051602081830303815290604052805190602001209050919050565b614202614c22565b61420a614c22565b67ffffffffffffffff4316604082015292151560608401525060a08201526001608082015290565b61423a61490e565b6002608083018190525060008181526074602090815260409182902084518154928601519386015160608701511515600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff928316600160801b02167fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff96831668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909616929093169190911793909317939093169290921717808255608084015184929182907fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff16600160c81b83600281111561435157614351614ffb565b021790555060a0919091015160019091015560735550565b6001600160a01b0381163b6143e65760405162461bcd60e51b815260206004820152603760248201527f455243313936373a206e6577207365636f6e6461727920696d706c656d656e7460448201527f6174696f6e206973206e6f74206120636f6e74726163740000000000000000006064820152608401610ec0565b807f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d5b80546001600160a01b0319166001600160a01b039290921691909117905550565b61443383614993565b6000825111806144405750805b1561285757612b0e83836149d3565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612fb2565b6001600160a01b0381166144f35760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610ec0565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103614409565b6001600160a01b0381163b6145975760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610ec0565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc614409565b614433836149f8565b8051600090815b602002015192915050565b805160009060016145ce565b6001600160a01b03821660009081526077602052604081205490614609838361548e565b6001600160a01b038516600090815260776020526040812082905560788054929350859290919061463b90849061548e565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a250505050565b60335460ff16156134255760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec0565b6000806146f2613cfc3686900386018661566b565b90506000614708613cfc3686900386018661566b565b90508067ffffffffffffffff168267ffffffffffffffff161015614732576000199250505061109f565b8067ffffffffffffffff168267ffffffffffffffff1611156147595760019250505061109f565b600061477261476d3688900388018861566b565b614a38565b9050600061478861476d3688900388018861566b565b90508067ffffffffffffffff168267ffffffffffffffff1610156147b45760001994505050505061109f565b8067ffffffffffffffff168267ffffffffffffffff1611156147dd57600194505050505061109f565b600094505050505061109f565b6000806147ff613cfc3686900386018661566b565b9050828167ffffffffffffffff16101561481e5760001991505061109f565b828167ffffffffffffffff16111561483a57600191505061109f565b600061484e61476d3687900387018761566b565b67ffffffffffffffff16111561486857600191505061109f565b600091505061109f565b6020810151600090816145ce565b805467ffffffffffffffff166000036148b057805467ffffffffffffffff19164367ffffffffffffffff16179055565b805468010000000000000000900467ffffffffffffffff16600003610f825780547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000004367ffffffffffffffff1602179055565b600054610100900460ff1661498b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610ec0565b613425614a47565b61499c81614369565b6040516001600160a01b038216907ff7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b813490600090a250565b606061322c838360405180606001604052806027815260200161581a60279139614ad0565b614a018161451a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b602081015160009060016145ce565b600054610100900460ff16614ac45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610ec0565b6033805460ff19169055565b60606001600160a01b0384163b614b4f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610ec0565b600080856001600160a01b031685604051614b6a919061564f565b600060405180830381855af49150503d8060008114614ba5576040519150601f19603f3d011682016040523d82523d6000602084013e614baa565b606091505b5091509150614bba828286614bc4565b9695505050505050565b60608315614bd357508161322c565b825115614be35782518084602001fd5b8160405162461bcd60e51b8152600401610ec091906157c6565b6040518060400160405280614c10614cc3565b8152602001614c1d614cc3565b905290565b6040805160c081018252600080825260208201819052918101829052606081018290529060808201905b8152600060209091015290565b6040518060600160405280614ca9604080516060808201835260008083526020808401829052845160a0810186528281529081018290528085018290529182018190526080820152909182015290565b8152602001614cb6614ce1565b8152602001614c1d614ce1565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280614cf4614bfd565b81526020016000614c4c565b60008082840360c0811215614d1457600080fd5b8335925060a0601f1982011215614d2a57600080fd5b506020830190509250929050565b600060208284031215614d4a57600080fd5b5035919050565b6001600160a01b0381168114610f8257600080fd5b600060208284031215614d7857600080fd5b813561322c81614d51565b8015158114610f8257600080fd5b60008060408385031215614da457600080fd5b8235614daf81614d51565b91506020830135614dbf81614d83565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614e0357614e03614dca565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614e3257614e32614dca565b604052919050565b60008060408385031215614e4d57600080fd5b8235614e5881614d51565b915060208381013567ffffffffffffffff80821115614e7657600080fd5b818601915086601f830112614e8a57600080fd5b813581811115614e9c57614e9c614dca565b614eae84601f19601f84011601614e09565b91508082528784828501011115614ec457600080fd5b80848401858401376000848284010152508093505050509250929050565b600060c08284031215614ef457600080fd5b50919050565b6000806000806101208587031215614f1157600080fd5b8435935060208501359250614f298660408701614ee2565b939692955092936101000135925050565b803567ffffffffffffffff8116811461116357600080fd5b600060208284031215614f6457600080fd5b61322c82614f3a565b60008083601f840112614f7f57600080fd5b50813567ffffffffffffffff811115614f9757600080fd5b6020830191508360208260051b8501011115614fb257600080fd5b9250929050565b60008060208385031215614fcc57600080fd5b823567ffffffffffffffff811115614fe357600080fd5b614fef85828601614f6d565b90969095509350505050565b634e487b7160e01b600052602160045260246000fd5b60038110610f8257634e487b7160e01b600052602160045260246000fd5b600060c08201905067ffffffffffffffff80845116835280602085015116602084015280604085015116604084015250606083015115156060830152608083015161507981615011565b8060808401525060a083015160a083015292915050565b60008060008385036102a08112156150a757600080fd5b84359350610260601f19820112156150be57600080fd5b5060208401915061028084013590509250925092565b6000808284036101408112156150e957600080fd5b833567ffffffffffffffff81111561510057600080fd5b84016103a0818703121561511357600080fd5b9250610120601f1982011215614d2a57600080fd5b60006020828403121561513a57600080fd5b813561322c81614d83565b6000806000806040858703121561515b57600080fd5b843567ffffffffffffffff8082111561517357600080fd5b61517f88838901614f6d565b9096509450602087013591508082111561519857600080fd5b506151a587828801614f6d565b95989497509550505050565b60008060008061012085870312156151c857600080fd5b843593506151d98660208701614ee2565b939693955050505060e082013591610100013590565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019820361522e5761522e615205565b5060010190565b60006020828403121561524757600080fd5b815161322c81614d83565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261528757600080fd5b83018035915067ffffffffffffffff8211156152a257600080fd5b602001915036819003821315614fb257600080fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b6000602082840312156152ff57600080fd5b5051919050565b600082601f83011261531757600080fd5b6040516040810181811067ffffffffffffffff8211171561533a5761533a614dca565b806040525080604084018581111561535157600080fd5b845b818110156153725761536481614f3a565b835260209283019201615353565b509195945050505050565b60006080828403121561538f57600080fd5b6040516040810181811067ffffffffffffffff821117156153b2576153b2614dca565b604052905080601f830184136153c757600080fd5b6153cf614de0565b8060408501868111156153e157600080fd5b855b818110156153fb5780358452602093840193016153e3565b508184526154098782615306565b60208501525050505092915050565b80356003811061116357600080fd5b600060c0828403121561543957600080fd5b6040516060810181811067ffffffffffffffff8211171561545c5761545c614dca565b604052615469848461537d565b815261547760808401615418565b602082015260a09290920135604083015250919050565b8082018082111561109f5761109f615205565b6154aa81615011565b9052565b805180518360005b60028110156154d55782518252602092830192909101906001016154b6565b505050602090810151906040840160005b600281101561550d57835167ffffffffffffffff16825292820192908201906001016154e6565b5050820151905061552160808401826154a1565b506040015160a09190910152565b600061032082019050885180518352602081015160208401526040810151905080516040840152602081015160608401526001600160a01b036040820151166080840152606081015167ffffffffffffffff80821660a08601528060808401511660c086015250505060208901516155aa60e08401826154ae565b5060408901516155be6101a08401826154ae565b508761026083015286610280830152856102a0830152846102c08301526155f16102e08301856001600160a01b03169052565b67ffffffffffffffff831661030083015298975050505050505050565b60006020828403121561562057600080fd5b815161322c81614d51565b60005b8381101561564657818101518382015260200161562e565b50506000910152565b6000825161566181846020870161562b565b9190910192915050565b60006080828403121561567d57600080fd5b61322c838361537d565b8181038181111561109f5761109f615205565b6000602082840312156156ac57600080fd5b61322c82615418565b6040818337604082016040820160005b60028110156156f65767ffffffffffffffff6156e083614f3a565b16835260209283019291909101906001016156c5565b50505061570560808201615418565b61570e81615011565b608083015260a090810135910152565b60006103208201905088358252602089013560208301526040890135604083015260608901356060830152608089013561575781614d51565b6001600160a01b0316608083015261577160a08a01614f3a565b67ffffffffffffffff80821660a08501528061578f60c08d01614f3a565b1660c085015250506157a760e0830160e08b016156b5565b6101a06155be818401828c016156b5565b60c0810161109f82846154ae565b60208152600082518060208401526157e581604085016020870161562b565b601f01601f1916919091016040019291505056feea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208081a0bad605430f133b790b3b1324485f1d186039dbe6357095dd603baf2c5a64736f6c63430008110033",
}

// RollupAdminLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupAdminLogicMetaData.ABI instead.
var RollupAdminLogicABI = RollupAdminLogicMetaData.ABI

// RollupAdminLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupAdminLogicMetaData.Bin instead.
var RollupAdminLogicBin = RollupAdminLogicMetaData.Bin

// DeployRollupAdminLogic deploys a new Ethereum contract, binding an instance of RollupAdminLogic to it.
func DeployRollupAdminLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupAdminLogic, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupAdminLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// RollupAdminLogic is an auto generated Go binding around an Ethereum contract.
type RollupAdminLogic struct {
	RollupAdminLogicCaller     // Read-only binding to the contract
	RollupAdminLogicTransactor // Write-only binding to the contract
	RollupAdminLogicFilterer   // Log filterer for contract events
}

// RollupAdminLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupAdminLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupAdminLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupAdminLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupAdminLogicSession struct {
	Contract     *RollupAdminLogic // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupAdminLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupAdminLogicCallerSession struct {
	Contract *RollupAdminLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupAdminLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupAdminLogicTransactorSession struct {
	Contract     *RollupAdminLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupAdminLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupAdminLogicRaw struct {
	Contract *RollupAdminLogic // Generic contract binding to access the raw methods on
}

// RollupAdminLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupAdminLogicCallerRaw struct {
	Contract *RollupAdminLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupAdminLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupAdminLogicTransactorRaw struct {
	Contract *RollupAdminLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupAdminLogic creates a new instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogic(address common.Address, backend bind.ContractBackend) (*RollupAdminLogic, error) {
	contract, err := bindRollupAdminLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogic{RollupAdminLogicCaller: RollupAdminLogicCaller{contract: contract}, RollupAdminLogicTransactor: RollupAdminLogicTransactor{contract: contract}, RollupAdminLogicFilterer: RollupAdminLogicFilterer{contract: contract}}, nil
}

// NewRollupAdminLogicCaller creates a new read-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupAdminLogicCaller, error) {
	contract, err := bindRollupAdminLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicCaller{contract: contract}, nil
}

// NewRollupAdminLogicTransactor creates a new write-only instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupAdminLogicTransactor, error) {
	contract, err := bindRollupAdminLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicTransactor{contract: contract}, nil
}

// NewRollupAdminLogicFilterer creates a new log filterer instance of RollupAdminLogic, bound to a specific deployed contract.
func NewRollupAdminLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupAdminLogicFilterer, error) {
	contract, err := bindRollupAdminLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicFilterer{contract: contract}, nil
}

// bindRollupAdminLogic binds a generic wrapper to an already deployed contract.
func bindRollupAdminLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupAdminLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.RollupAdminLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RollupAdminLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupAdminLogic *RollupAdminLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupAdminLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupAdminLogic *RollupAdminLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
		WithdrawalAddress     common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.WithdrawalAddress = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupAdminLogic.Contract.StakerMap(&_RollupAdminLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.AmountStaked(&_RollupAdminLogic.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupAdminLogic.Contract.AnyTrustFastConfirmer(&_RollupAdminLogic.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupAdminLogic.Contract.AnyTrustFastConfirmer(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupAdminLogic.Contract.BaseStake(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupAdminLogic.Contract.Bridge(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupAdminLogic.Contract.ChainId(&_RollupAdminLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChallengeGracePeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "challengeGracePeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ChallengeGracePeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ChallengeGracePeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupAdminLogic.Contract.ChallengeManager(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupAdminLogic.Contract.ConfirmPeriodBlocks(&_RollupAdminLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupAdminLogic.Contract.GenesisAssertionHash(&_RollupAdminLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupAdminLogic.Contract.GenesisAssertionHash(&_RollupAdminLogic.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupAdminLogic.Contract.GetAssertion(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupAdminLogic.Contract.GetAssertion(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupAdminLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetFirstChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetFirstChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetSecondChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupAdminLogic.Contract.GetSecondChildCreationBlock(&_RollupAdminLogic.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupAdminLogic *RollupAdminLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupAdminLogic.Contract.GetStaker(&_RollupAdminLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupAdminLogic.Contract.GetStakerAddress(&_RollupAdminLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Inbox(&_RollupAdminLogic.CallOpts)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsFirstChild(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsFirstChild(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsPending(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupAdminLogic.Contract.IsPending(&_RollupAdminLogic.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsStaked(&_RollupAdminLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupAdminLogic.Contract.IsValidator(&_RollupAdminLogic.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestConfirmed() ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestConfirmed(&_RollupAdminLogic.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestStakedAssertion(&_RollupAdminLogic.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupAdminLogic.Contract.LatestStakedAssertion(&_RollupAdminLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupAdminLogic.Contract.LoserStakeEscrow(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupAdminLogic.Contract.MinimumAssertionPeriod(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.Outbox(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) Paused() (bool, error) {
	return _RollupAdminLogic.Contract.Paused(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupAdminLogic.Contract.ProxiableUUID(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupAdminLogic.Contract.RollupDeploymentBlock(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.RollupEventInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupAdminLogic.Contract.SequencerInbox(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupAdminLogic.Contract.StakeToken(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupAdminLogic.Contract.StakerCount(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupAdminLogic.Contract.TotalWithdrawableFunds(&_RollupAdminLogic.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupAdminLogic.Contract.ValidateAssertionHash(&_RollupAdminLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupAdminLogic.Contract.ValidateAssertionHash(&_RollupAdminLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupAdminLogic.Contract.ValidateConfig(&_RollupAdminLogic.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupAdminLogic.Contract.ValidateConfig(&_RollupAdminLogic.CallOpts, assertionHash, configData)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupAdminLogic.Contract.ValidatorWalletCreator(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupAdminLogic.Contract.ValidatorWhitelistDisabled(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupAdminLogic.Contract.WasmModuleRoot(&_RollupAdminLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupAdminLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupAdminLogic *RollupAdminLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupAdminLogic.Contract.WithdrawableFunds(&_RollupAdminLogic.CallOpts, user)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmAssertion(&_RollupAdminLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceConfirmAssertion is a paid mutator transaction binding the contract method 0x5bf03833.
//
// Solidity: function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceConfirmAssertion(&_RollupAdminLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceCreateAssertion(opts *bind.TransactOpts, prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceCreateAssertion", prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateAssertion(&_RollupAdminLogic.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceCreateAssertion is a paid mutator transaction binding the contract method 0x9a7b4556.
//
// Solidity: function forceCreateAssertion(bytes32 prevAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceCreateAssertion(prevAssertionHash [32]byte, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceCreateAssertion(&_RollupAdminLogic.TransactOpts, prevAssertionHash, assertion, expectedAssertionHash)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) ForceRefundStaker(opts *bind.TransactOpts, staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "forceRefundStaker", staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// ForceRefundStaker is a paid mutator transaction binding the contract method 0x7c75c298.
//
// Solidity: function forceRefundStaker(address[] staker) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) ForceRefundStaker(staker []common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.ForceRefundStaker(&_RollupAdminLogic.TransactOpts, staker)
}

// Initialize is a paid mutator transaction binding the contract method 0x9e7e6aa7.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Initialize(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "initialize", config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x9e7e6aa7.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Initialize is a paid mutator transaction binding the contract method 0x9e7e6aa7.
//
// Solidity: function initialize((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Initialize(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Initialize(&_RollupAdminLogic.TransactOpts, config, connectedContracts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Pause() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Pause(&_RollupAdminLogic.TransactOpts)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) RemoveOldOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "removeOldOutbox", _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// RemoveOldOutbox is a paid mutator transaction binding the contract method 0x567ca41b.
//
// Solidity: function removeOldOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) RemoveOldOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.RemoveOldOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) Resume(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "resume")
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// Resume is a paid mutator transaction binding the contract method 0x046f7da2.
//
// Solidity: function resume() returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) Resume() (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.Resume(&_RollupAdminLogic.TransactOpts)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetAnyTrustFastConfirmer(opts *bind.TransactOpts, _anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setAnyTrustFastConfirmer", _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetAnyTrustFastConfirmer(&_RollupAdminLogic.TransactOpts, _anyTrustFastConfirmer)
}

// SetAnyTrustFastConfirmer is a paid mutator transaction binding the contract method 0x0d561b37.
//
// Solidity: function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetAnyTrustFastConfirmer(_anyTrustFastConfirmer common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetAnyTrustFastConfirmer(&_RollupAdminLogic.TransactOpts, _anyTrustFastConfirmer)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetBaseStake(opts *bind.TransactOpts, newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setBaseStake", newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetBaseStake is a paid mutator transaction binding the contract method 0x06ae5851.
//
// Solidity: function setBaseStake(uint256 newBaseStake) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetBaseStake(newBaseStake *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetBaseStake(&_RollupAdminLogic.TransactOpts, newBaseStake)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetChallengeManager(opts *bind.TransactOpts, _challengeManager common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setChallengeManager", _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetChallengeManager(&_RollupAdminLogic.TransactOpts, _challengeManager)
}

// SetChallengeManager is a paid mutator transaction binding the contract method 0xb7626e73.
//
// Solidity: function setChallengeManager(address _challengeManager) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetChallengeManager(_challengeManager common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetChallengeManager(&_RollupAdminLogic.TransactOpts, _challengeManager)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetConfirmPeriodBlocks(opts *bind.TransactOpts, newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setConfirmPeriodBlocks", newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetConfirmPeriodBlocks is a paid mutator transaction binding the contract method 0xce66d05c.
//
// Solidity: function setConfirmPeriodBlocks(uint64 newConfirmPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetConfirmPeriodBlocks(newConfirmPeriod uint64) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetConfirmPeriodBlocks(&_RollupAdminLogic.TransactOpts, newConfirmPeriod)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetDelayedInbox(opts *bind.TransactOpts, _inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setDelayedInbox", _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetDelayedInbox is a paid mutator transaction binding the contract method 0x47fb24c5.
//
// Solidity: function setDelayedInbox(address _inbox, bool _enabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetDelayedInbox(_inbox common.Address, _enabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetDelayedInbox(&_RollupAdminLogic.TransactOpts, _inbox, _enabled)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetInbox(opts *bind.TransactOpts, newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setInbox", newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetInbox is a paid mutator transaction binding the contract method 0x53b60c4a.
//
// Solidity: function setInbox(address newInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetInbox(newInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetInbox(&_RollupAdminLogic.TransactOpts, newInbox)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetLoserStakeEscrow(opts *bind.TransactOpts, newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setLoserStakeEscrow", newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetLoserStakeEscrow is a paid mutator transaction binding the contract method 0xfc8ffa03.
//
// Solidity: function setLoserStakeEscrow(address newLoserStakerEscrow) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetLoserStakeEscrow(newLoserStakerEscrow common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetLoserStakeEscrow(&_RollupAdminLogic.TransactOpts, newLoserStakerEscrow)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetMinimumAssertionPeriod(opts *bind.TransactOpts, newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setMinimumAssertionPeriod", newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetMinimumAssertionPeriod is a paid mutator transaction binding the contract method 0x948d6588.
//
// Solidity: function setMinimumAssertionPeriod(uint256 newPeriod) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetMinimumAssertionPeriod(newPeriod *big.Int) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetMinimumAssertionPeriod(&_RollupAdminLogic.TransactOpts, newPeriod)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOutbox(opts *bind.TransactOpts, _outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOutbox", _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOutbox is a paid mutator transaction binding the contract method 0xff204f3b.
//
// Solidity: function setOutbox(address _outbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOutbox(_outbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOutbox(&_RollupAdminLogic.TransactOpts, _outbox)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetOwner(&_RollupAdminLogic.TransactOpts, newOwner)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetSequencerInbox(opts *bind.TransactOpts, _sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setSequencerInbox", _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetSequencerInbox is a paid mutator transaction binding the contract method 0x4f61f850.
//
// Solidity: function setSequencerInbox(address _sequencerInbox) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetSequencerInbox(_sequencerInbox common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetSequencerInbox(&_RollupAdminLogic.TransactOpts, _sequencerInbox)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidator(opts *bind.TransactOpts, _validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidator", _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidator is a paid mutator transaction binding the contract method 0xa3ffb772.
//
// Solidity: function setValidator(address[] _validator, bool[] _val) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidator(_validator []common.Address, _val []bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidator(&_RollupAdminLogic.TransactOpts, _validator, _val)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetValidatorWhitelistDisabled(opts *bind.TransactOpts, _validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setValidatorWhitelistDisabled", _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetValidatorWhitelistDisabled is a paid mutator transaction binding the contract method 0xa2b4f1d8.
//
// Solidity: function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetValidatorWhitelistDisabled(_validatorWhitelistDisabled bool) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetValidatorWhitelistDisabled(&_RollupAdminLogic.TransactOpts, _validatorWhitelistDisabled)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) SetWasmModuleRoot(opts *bind.TransactOpts, newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "setWasmModuleRoot", newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// SetWasmModuleRoot is a paid mutator transaction binding the contract method 0x89384960.
//
// Solidity: function setWasmModuleRoot(bytes32 newWasmModuleRoot) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) SetWasmModuleRoot(newWasmModuleRoot [32]byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.SetWasmModuleRoot(&_RollupAdminLogic.TransactOpts, newWasmModuleRoot)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryTo", newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryTo is a paid mutator transaction binding the contract method 0x0d40a0fd.
//
// Solidity: function upgradeSecondaryTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeSecondaryToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeSecondaryToAndCall", newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeSecondaryToAndCall is a paid mutator transaction binding the contract method 0x9846129a.
//
// Solidity: function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeSecondaryToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeSecondaryToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeTo(&_RollupAdminLogic.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RollupAdminLogic *RollupAdminLogicTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RollupAdminLogic.Contract.UpgradeToAndCall(&_RollupAdminLogic.TransactOpts, newImplementation, data)
}

// RollupAdminLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChangedIterator struct {
	Event *RollupAdminLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAdminChanged represents a AdminChanged event raised by the RollupAdminLogic contract.
type RollupAdminLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupAdminLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAdminChangedIterator{contract: _RollupAdminLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAdminChanged)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAdminChanged(log types.Log) (*RollupAdminLogicAdminChanged, error) {
	event := new(RollupAdminLogicAdminChanged)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionConfirmedIterator struct {
	Event *RollupAdminLogicAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionConfirmed represents a AssertionConfirmed event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupAdminLogicAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionConfirmedIterator{contract: _RollupAdminLogic.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionConfirmed)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionConfirmed(log types.Log) (*RollupAdminLogicAssertionConfirmed, error) {
	event := new(RollupAdminLogicAssertionConfirmed)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionCreatedIterator struct {
	Event *RollupAdminLogicAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicAssertionCreated represents a AssertionCreated event raised by the RollupAdminLogic contract.
type RollupAdminLogicAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupAdminLogicAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicAssertionCreatedIterator{contract: _RollupAdminLogic.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicAssertionCreated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseAssertionCreated(log types.Log) (*RollupAdminLogicAssertionCreated, error) {
	event := new(RollupAdminLogicAssertionCreated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgradedIterator struct {
	Event *RollupAdminLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupAdminLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicBeaconUpgradedIterator{contract: _RollupAdminLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicBeaconUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupAdminLogicBeaconUpgraded, error) {
	event := new(RollupAdminLogicBeaconUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicInitializedIterator struct {
	Event *RollupAdminLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicInitialized represents a Initialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupAdminLogicInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicInitializedIterator{contract: _RollupAdminLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseInitialized(log types.Log) (*RollupAdminLogicInitialized, error) {
	event := new(RollupAdminLogicInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicOwnerFunctionCalledIterator is returned from FilterOwnerFunctionCalled and is used to iterate over the raw logs and unpacked data for OwnerFunctionCalled events raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalledIterator struct {
	Event *RollupAdminLogicOwnerFunctionCalled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicOwnerFunctionCalled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicOwnerFunctionCalled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicOwnerFunctionCalledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicOwnerFunctionCalled represents a OwnerFunctionCalled event raised by the RollupAdminLogic contract.
type RollupAdminLogicOwnerFunctionCalled struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerFunctionCalled is a free log retrieval operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterOwnerFunctionCalled(opts *bind.FilterOpts, id []*big.Int) (*RollupAdminLogicOwnerFunctionCalledIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicOwnerFunctionCalledIterator{contract: _RollupAdminLogic.contract, event: "OwnerFunctionCalled", logs: logs, sub: sub}, nil
}

// WatchOwnerFunctionCalled is a free log subscription operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchOwnerFunctionCalled(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicOwnerFunctionCalled, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "OwnerFunctionCalled", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicOwnerFunctionCalled)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerFunctionCalled is a log parse operation binding the contract event 0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e.
//
// Solidity: event OwnerFunctionCalled(uint256 indexed id)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseOwnerFunctionCalled(log types.Log) (*RollupAdminLogicOwnerFunctionCalled, error) {
	event := new(RollupAdminLogicOwnerFunctionCalled)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "OwnerFunctionCalled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupAdminLogic contract.
type RollupAdminLogicPausedIterator struct {
	Event *RollupAdminLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicPaused represents a Paused event raised by the RollupAdminLogic contract.
type RollupAdminLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupAdminLogicPausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicPausedIterator{contract: _RollupAdminLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicPaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParsePaused(log types.Log) (*RollupAdminLogicPaused, error) {
	event := new(RollupAdminLogicPaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStartedIterator struct {
	Event *RollupAdminLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupAdminLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupChallengeStartedIterator{contract: _RollupAdminLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupChallengeStarted)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupAdminLogicRollupChallengeStarted, error) {
	event := new(RollupAdminLogicRollupChallengeStarted)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitializedIterator struct {
	Event *RollupAdminLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicRollupInitialized represents a RollupInitialized event raised by the RollupAdminLogic contract.
type RollupAdminLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupAdminLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicRollupInitializedIterator{contract: _RollupAdminLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicRollupInitialized)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupAdminLogicRollupInitialized, error) {
	event := new(RollupAdminLogicRollupInitialized)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpausedIterator struct {
	Event *RollupAdminLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUnpaused represents a Unpaused event raised by the RollupAdminLogic contract.
type RollupAdminLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupAdminLogicUnpausedIterator, error) {

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUnpausedIterator{contract: _RollupAdminLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUnpaused)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUnpaused(log types.Log) (*RollupAdminLogicUnpaused, error) {
	event := new(RollupAdminLogicUnpaused)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedIterator struct {
	Event *RollupAdminLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgraded represents a Upgraded event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedIterator{contract: _RollupAdminLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgraded)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgraded(log types.Log) (*RollupAdminLogicUpgraded, error) {
	event := new(RollupAdminLogicUpgraded)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondaryIterator struct {
	Event *RollupAdminLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupAdminLogic contract.
type RollupAdminLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupAdminLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUpgradedSecondaryIterator{contract: _RollupAdminLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUpgradedSecondary)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupAdminLogicUpgradedSecondary, error) {
	event := new(RollupAdminLogicUpgradedSecondary)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdatedIterator struct {
	Event *RollupAdminLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*RollupAdminLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserStakeUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserStakeUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupAdminLogicUserStakeUpdated, error) {
	event := new(RollupAdminLogicUserStakeUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupAdminLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupAdminLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupAdminLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupAdminLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupAdminLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupAdminLogic contract.
type RollupAdminLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupAdminLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupAdminLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupAdminLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupAdminLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupAdminLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
				if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupAdminLogic *RollupAdminLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupAdminLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupAdminLogicUserWithdrawableFundsUpdated)
	if err := _RollupAdminLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreMetaData contains all meta data concerning the RollupCore contract.
var RollupCoreMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeGracePeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// RollupCoreABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCoreMetaData.ABI instead.
var RollupCoreABI = RollupCoreMetaData.ABI

// RollupCore is an auto generated Go binding around an Ethereum contract.
type RollupCore struct {
	RollupCoreCaller     // Read-only binding to the contract
	RollupCoreTransactor // Write-only binding to the contract
	RollupCoreFilterer   // Log filterer for contract events
}

// RollupCoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCoreSession struct {
	Contract     *RollupCore       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCoreCallerSession struct {
	Contract *RollupCoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// RollupCoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCoreTransactorSession struct {
	Contract     *RollupCoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RollupCoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCoreRaw struct {
	Contract *RollupCore // Generic contract binding to access the raw methods on
}

// RollupCoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCoreCallerRaw struct {
	Contract *RollupCoreCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCoreTransactorRaw struct {
	Contract *RollupCoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCore creates a new instance of RollupCore, bound to a specific deployed contract.
func NewRollupCore(address common.Address, backend bind.ContractBackend) (*RollupCore, error) {
	contract, err := bindRollupCore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCore{RollupCoreCaller: RollupCoreCaller{contract: contract}, RollupCoreTransactor: RollupCoreTransactor{contract: contract}, RollupCoreFilterer: RollupCoreFilterer{contract: contract}}, nil
}

// NewRollupCoreCaller creates a new read-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreCaller(address common.Address, caller bind.ContractCaller) (*RollupCoreCaller, error) {
	contract, err := bindRollupCore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreCaller{contract: contract}, nil
}

// NewRollupCoreTransactor creates a new write-only instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCoreTransactor, error) {
	contract, err := bindRollupCore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCoreTransactor{contract: contract}, nil
}

// NewRollupCoreFilterer creates a new log filterer instance of RollupCore, bound to a specific deployed contract.
func NewRollupCoreFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCoreFilterer, error) {
	contract, err := bindRollupCore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCoreFilterer{contract: contract}, nil
}

// bindRollupCore binds a generic wrapper to an already deployed contract.
func bindRollupCore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupCoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.RollupCoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.RollupCoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCore *RollupCoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCore *RollupCoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCore *RollupCoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCore.Contract.contract.Transact(opts, method, params...)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupCore *RollupCoreCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
		WithdrawalAddress     common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.WithdrawalAddress = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupCore *RollupCoreSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupCore *RollupCoreCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupCore.Contract.StakerMap(&_RollupCore.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupCore.Contract.AmountStaked(&_RollupCore.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupCore.Contract.AnyTrustFastConfirmer(&_RollupCore.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupCore *RollupCoreCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupCore.Contract.AnyTrustFastConfirmer(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) BaseStake() (*big.Int, error) {
	return _RollupCore.Contract.BaseStake(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Bridge() (common.Address, error) {
	return _RollupCore.Contract.Bridge(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) ChainId() (*big.Int, error) {
	return _RollupCore.Contract.ChainId(&_RollupCore.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ChallengeGracePeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "challengeGracePeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ChallengeGracePeriodBlocks(&_RollupCore.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ChallengeGracePeriodBlocks(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupCore.Contract.ChallengeManager(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupCore.Contract.ConfirmPeriodBlocks(&_RollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupCore.Contract.GenesisAssertionHash(&_RollupCore.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupCore.Contract.GenesisAssertionHash(&_RollupCore.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupCore.Contract.GetAssertion(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupCore *RollupCoreCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupCore.Contract.GetAssertion(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_RollupCore.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupCore.Contract.GetAssertionCreationBlockForLogLookup(&_RollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetFirstChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetFirstChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetSecondChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupCore.Contract.GetSecondChildCreationBlock(&_RollupCore.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupCore *RollupCoreCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupCore *RollupCoreSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupCore *RollupCoreCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupCore.Contract.GetStaker(&_RollupCore.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupCore *RollupCoreCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupCore.Contract.GetStakerAddress(&_RollupCore.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Inbox() (common.Address, error) {
	return _RollupCore.Contract.Inbox(&_RollupCore.CallOpts)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsFirstChild(&_RollupCore.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsFirstChild(&_RollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsPending(&_RollupCore.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupCore.Contract.IsPending(&_RollupCore.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupCore.Contract.IsStaked(&_RollupCore.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupCore *RollupCoreCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupCore.Contract.IsValidator(&_RollupCore.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreSession) LatestConfirmed() ([32]byte, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupCore.Contract.LatestConfirmed(&_RollupCore.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupCore.Contract.LatestStakedAssertion(&_RollupCore.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupCore.Contract.LatestStakedAssertion(&_RollupCore.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupCore *RollupCoreCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupCore.Contract.LoserStakeEscrow(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupCore.Contract.MinimumAssertionPeriod(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) Outbox() (common.Address, error) {
	return _RollupCore.Contract.Outbox(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) Paused() (bool, error) {
	return _RollupCore.Contract.Paused(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupCore.Contract.RollupDeploymentBlock(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupCore.Contract.RollupEventInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupCore *RollupCoreCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupCore.Contract.SequencerInbox(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupCore *RollupCoreCallerSession) StakeToken() (common.Address, error) {
	return _RollupCore.Contract.StakeToken(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupCore *RollupCoreCallerSession) StakerCount() (uint64, error) {
	return _RollupCore.Contract.StakerCount(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupCore.Contract.TotalWithdrawableFunds(&_RollupCore.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupCore.Contract.ValidateAssertionHash(&_RollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupCore *RollupCoreCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupCore.Contract.ValidateAssertionHash(&_RollupCore.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupCore.Contract.ValidateConfig(&_RollupCore.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupCore *RollupCoreCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupCore.Contract.ValidateConfig(&_RollupCore.CallOpts, assertionHash, configData)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCore *RollupCoreCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCore.Contract.ValidatorWalletCreator(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupCore *RollupCoreCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupCore.Contract.ValidatorWhitelistDisabled(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupCore *RollupCoreCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupCore.Contract.WasmModuleRoot(&_RollupCore.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupCore.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupCore *RollupCoreCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupCore.Contract.WithdrawableFunds(&_RollupCore.CallOpts, user)
}

// RollupCoreAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupCore contract.
type RollupCoreAssertionConfirmedIterator struct {
	Event *RollupCoreAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreAssertionConfirmed represents a AssertionConfirmed event raised by the RollupCore contract.
type RollupCoreAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupCoreAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreAssertionConfirmedIterator{contract: _RollupCore.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupCoreAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreAssertionConfirmed)
				if err := _RollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupCore *RollupCoreFilterer) ParseAssertionConfirmed(log types.Log) (*RollupCoreAssertionConfirmed, error) {
	event := new(RollupCoreAssertionConfirmed)
	if err := _RollupCore.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupCore contract.
type RollupCoreAssertionCreatedIterator struct {
	Event *RollupCoreAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreAssertionCreated represents a AssertionCreated event raised by the RollupCore contract.
type RollupCoreAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupCoreAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreAssertionCreatedIterator{contract: _RollupCore.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupCoreAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreAssertionCreated)
				if err := _RollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupCore *RollupCoreFilterer) ParseAssertionCreated(log types.Log) (*RollupCoreAssertionCreated, error) {
	event := new(RollupCoreAssertionCreated)
	if err := _RollupCore.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupCore contract.
type RollupCoreInitializedIterator struct {
	Event *RollupCoreInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreInitialized represents a Initialized event raised by the RollupCore contract.
type RollupCoreInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupCoreInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreInitializedIterator{contract: _RollupCore.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupCore *RollupCoreFilterer) ParseInitialized(log types.Log) (*RollupCoreInitialized, error) {
	event := new(RollupCoreInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCorePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupCore contract.
type RollupCorePausedIterator struct {
	Event *RollupCorePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCorePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCorePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCorePaused represents a Paused event raised by the RollupCore contract.
type RollupCorePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupCorePausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupCorePausedIterator{contract: _RollupCore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupCorePaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCorePaused)
				if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupCore *RollupCoreFilterer) ParsePaused(log types.Log) (*RollupCorePaused, error) {
	event := new(RollupCorePaused)
	if err := _RollupCore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupCore contract.
type RollupCoreRollupChallengeStartedIterator struct {
	Event *RollupCoreRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupCore contract.
type RollupCoreRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupCoreRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupChallengeStartedIterator{contract: _RollupCore.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupChallengeStarted)
				if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupCore *RollupCoreFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupCoreRollupChallengeStarted, error) {
	event := new(RollupCoreRollupChallengeStarted)
	if err := _RollupCore.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupCore contract.
type RollupCoreRollupInitializedIterator struct {
	Event *RollupCoreRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreRollupInitialized represents a RollupInitialized event raised by the RollupCore contract.
type RollupCoreRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupCoreRollupInitializedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupCoreRollupInitializedIterator{contract: _RollupCore.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupCoreRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreRollupInitialized)
				if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupCore *RollupCoreFilterer) ParseRollupInitialized(log types.Log) (*RollupCoreRollupInitialized, error) {
	event := new(RollupCoreRollupInitialized)
	if err := _RollupCore.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupCore contract.
type RollupCoreUnpausedIterator struct {
	Event *RollupCoreUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUnpaused represents a Unpaused event raised by the RollupCore contract.
type RollupCoreUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupCoreUnpausedIterator, error) {

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupCoreUnpausedIterator{contract: _RollupCore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupCoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUnpaused)
				if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupCore *RollupCoreFilterer) ParseUnpaused(log types.Log) (*RollupCoreUnpaused, error) {
	event := new(RollupCoreUnpaused)
	if err := _RollupCore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupCore contract.
type RollupCoreUserStakeUpdatedIterator struct {
	Event *RollupCoreUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserStakeUpdated represents a UserStakeUpdated event raised by the RollupCore contract.
type RollupCoreUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*RollupCoreUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserStakeUpdatedIterator{contract: _RollupCore.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserStakeUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserStakeUpdated(log types.Log) (*RollupCoreUserStakeUpdated, error) {
	event := new(RollupCoreUserStakeUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCoreUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupCoreUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCoreUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCoreUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCoreUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupCore contract.
type RollupCoreUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupCoreUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupCoreUserWithdrawableFundsUpdatedIterator{contract: _RollupCore.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupCoreUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupCore.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCoreUserWithdrawableFundsUpdated)
				if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupCore *RollupCoreFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupCoreUserWithdrawableFundsUpdated, error) {
	event := new(RollupCoreUserWithdrawableFundsUpdated)
	if err := _RollupCore.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorMetaData contains all meta data concerning the RollupCreator contract.
var RollupCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rollupAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inboxAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upgradeExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"name\":\"RollupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeCreator\",\"outputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManagerTemplate\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"genesisAssertionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxDataSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"deployFactoriesToL2\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGasForRetryables\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"batchPosters\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"batchPosterManager\",\"type\":\"address\"}],\"internalType\":\"structRollupCreator.RollupDeploymentParams\",\"name\":\"deployParams\",\"type\":\"tuple\"}],\"name\":\"createRollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2FactoriesDeployer\",\"outputs\":[{\"internalType\":\"contractDeployHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osp\",\"outputs\":[{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupAdminLogic\",\"outputs\":[{\"internalType\":\"contractIRollupAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupUserLogic\",\"outputs\":[{\"internalType\":\"contractIRollupUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBridgeCreator\",\"name\":\"_bridgeCreator\",\"type\":\"address\"},{\"internalType\":\"contractIOneStepProofEntry\",\"name\":\"_osp\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"_challengeManagerLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupAdmin\",\"name\":\"_rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"_rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"contractIUpgradeExecutor\",\"name\":\"_upgradeExecutorLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorWalletCreator\",\"type\":\"address\"},{\"internalType\":\"contractDeployHelper\",\"name\":\"_l2FactoriesDeployer\",\"type\":\"address\"}],\"name\":\"setTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeExecutorLogic\",\"outputs\":[{\"internalType\":\"contractIUpgradeExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// RollupCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupCreatorMetaData.ABI instead.
var RollupCreatorABI = RollupCreatorMetaData.ABI

// RollupCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupCreatorMetaData.Bin instead.
var RollupCreatorBin = RollupCreatorMetaData.Bin

// DeployRollupCreator deploys a new Ethereum contract, binding an instance of RollupCreator to it.
func DeployRollupCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupCreator, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// RollupCreator is an auto generated Go binding around an Ethereum contract.
type RollupCreator struct {
	RollupCreatorCaller     // Read-only binding to the contract
	RollupCreatorTransactor // Write-only binding to the contract
	RollupCreatorFilterer   // Log filterer for contract events
}

// RollupCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupCreatorSession struct {
	Contract     *RollupCreator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupCreatorCallerSession struct {
	Contract *RollupCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// RollupCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupCreatorTransactorSession struct {
	Contract     *RollupCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// RollupCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupCreatorRaw struct {
	Contract *RollupCreator // Generic contract binding to access the raw methods on
}

// RollupCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupCreatorCallerRaw struct {
	Contract *RollupCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// RollupCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupCreatorTransactorRaw struct {
	Contract *RollupCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupCreator creates a new instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreator(address common.Address, backend bind.ContractBackend) (*RollupCreator, error) {
	contract, err := bindRollupCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupCreator{RollupCreatorCaller: RollupCreatorCaller{contract: contract}, RollupCreatorTransactor: RollupCreatorTransactor{contract: contract}, RollupCreatorFilterer: RollupCreatorFilterer{contract: contract}}, nil
}

// NewRollupCreatorCaller creates a new read-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorCaller(address common.Address, caller bind.ContractCaller) (*RollupCreatorCaller, error) {
	contract, err := bindRollupCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorCaller{contract: contract}, nil
}

// NewRollupCreatorTransactor creates a new write-only instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupCreatorTransactor, error) {
	contract, err := bindRollupCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTransactor{contract: contract}, nil
}

// NewRollupCreatorFilterer creates a new log filterer instance of RollupCreator, bound to a specific deployed contract.
func NewRollupCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupCreatorFilterer, error) {
	contract, err := bindRollupCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorFilterer{contract: contract}, nil
}

// bindRollupCreator binds a generic wrapper to an already deployed contract.
func bindRollupCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.RollupCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.RollupCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupCreator *RollupCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupCreator *RollupCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupCreator *RollupCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupCreator.Contract.contract.Transact(opts, method, params...)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) BridgeCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "bridgeCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// BridgeCreator is a free data retrieval call binding the contract method 0xf860cefa.
//
// Solidity: function bridgeCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) BridgeCreator() (common.Address, error) {
	return _RollupCreator.Contract.BridgeCreator(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ChallengeManagerTemplate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "challengeManagerTemplate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// ChallengeManagerTemplate is a free data retrieval call binding the contract method 0x9c683d10.
//
// Solidity: function challengeManagerTemplate() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ChallengeManagerTemplate() (common.Address, error) {
	return _RollupCreator.Contract.ChallengeManagerTemplate(&_RollupCreator.CallOpts)
}

// L2FactoriesDeployer is a free data retrieval call binding the contract method 0xac0425bc.
//
// Solidity: function l2FactoriesDeployer() view returns(address)
func (_RollupCreator *RollupCreatorCaller) L2FactoriesDeployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "l2FactoriesDeployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2FactoriesDeployer is a free data retrieval call binding the contract method 0xac0425bc.
//
// Solidity: function l2FactoriesDeployer() view returns(address)
func (_RollupCreator *RollupCreatorSession) L2FactoriesDeployer() (common.Address, error) {
	return _RollupCreator.Contract.L2FactoriesDeployer(&_RollupCreator.CallOpts)
}

// L2FactoriesDeployer is a free data retrieval call binding the contract method 0xac0425bc.
//
// Solidity: function l2FactoriesDeployer() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) L2FactoriesDeployer() (common.Address, error) {
	return _RollupCreator.Contract.L2FactoriesDeployer(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Osp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "osp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Osp is a free data retrieval call binding the contract method 0xf26a62c6.
//
// Solidity: function osp() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Osp() (common.Address, error) {
	return _RollupCreator.Contract.Osp(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) Owner() (common.Address, error) {
	return _RollupCreator.Contract.Owner(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupAdminLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupAdminLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupAdminLogic is a free data retrieval call binding the contract method 0x9dba3241.
//
// Solidity: function rollupAdminLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupAdminLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupAdminLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) RollupUserLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "rollupUserLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// RollupUserLogic is a free data retrieval call binding the contract method 0x9d4798e3.
//
// Solidity: function rollupUserLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) RollupUserLogic() (common.Address, error) {
	return _RollupCreator.Contract.RollupUserLogic(&_RollupCreator.CallOpts)
}

// UpgradeExecutorLogic is a free data retrieval call binding the contract method 0x030cb85e.
//
// Solidity: function upgradeExecutorLogic() view returns(address)
func (_RollupCreator *RollupCreatorCaller) UpgradeExecutorLogic(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "upgradeExecutorLogic")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UpgradeExecutorLogic is a free data retrieval call binding the contract method 0x030cb85e.
//
// Solidity: function upgradeExecutorLogic() view returns(address)
func (_RollupCreator *RollupCreatorSession) UpgradeExecutorLogic() (common.Address, error) {
	return _RollupCreator.Contract.UpgradeExecutorLogic(&_RollupCreator.CallOpts)
}

// UpgradeExecutorLogic is a free data retrieval call binding the contract method 0x030cb85e.
//
// Solidity: function upgradeExecutorLogic() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) UpgradeExecutorLogic() (common.Address, error) {
	return _RollupCreator.Contract.UpgradeExecutorLogic(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupCreator.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupCreator *RollupCreatorCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupCreator.Contract.ValidatorWalletCreator(&_RollupCreator.CallOpts)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x5491abea.
//
// Solidity: function createRollup(((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)),address[],uint256,address,bool,uint256,address[],address) deployParams) payable returns(address)
func (_RollupCreator *RollupCreatorTransactor) CreateRollup(opts *bind.TransactOpts, deployParams RollupCreatorRollupDeploymentParams) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "createRollup", deployParams)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x5491abea.
//
// Solidity: function createRollup(((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)),address[],uint256,address,bool,uint256,address[],address) deployParams) payable returns(address)
func (_RollupCreator *RollupCreatorSession) CreateRollup(deployParams RollupCreatorRollupDeploymentParams) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, deployParams)
}

// CreateRollup is a paid mutator transaction binding the contract method 0x5491abea.
//
// Solidity: function createRollup(((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)),address[],uint256,address,bool,uint256,address[],address) deployParams) payable returns(address)
func (_RollupCreator *RollupCreatorTransactorSession) CreateRollup(deployParams RollupCreatorRollupDeploymentParams) (*types.Transaction, error) {
	return _RollupCreator.Contract.CreateRollup(&_RollupCreator.TransactOpts, deployParams)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RollupCreator *RollupCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RollupCreator.Contract.RenounceOwnership(&_RollupCreator.TransactOpts)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xf0dae494.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _upgradeExecutorLogic, address _validatorWalletCreator, address _l2FactoriesDeployer) returns()
func (_RollupCreator *RollupCreatorTransactor) SetTemplates(opts *bind.TransactOpts, _bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _upgradeExecutorLogic common.Address, _validatorWalletCreator common.Address, _l2FactoriesDeployer common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "setTemplates", _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _upgradeExecutorLogic, _validatorWalletCreator, _l2FactoriesDeployer)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xf0dae494.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _upgradeExecutorLogic, address _validatorWalletCreator, address _l2FactoriesDeployer) returns()
func (_RollupCreator *RollupCreatorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _upgradeExecutorLogic common.Address, _validatorWalletCreator common.Address, _l2FactoriesDeployer common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _upgradeExecutorLogic, _validatorWalletCreator, _l2FactoriesDeployer)
}

// SetTemplates is a paid mutator transaction binding the contract method 0xf0dae494.
//
// Solidity: function setTemplates(address _bridgeCreator, address _osp, address _challengeManagerLogic, address _rollupAdminLogic, address _rollupUserLogic, address _upgradeExecutorLogic, address _validatorWalletCreator, address _l2FactoriesDeployer) returns()
func (_RollupCreator *RollupCreatorTransactorSession) SetTemplates(_bridgeCreator common.Address, _osp common.Address, _challengeManagerLogic common.Address, _rollupAdminLogic common.Address, _rollupUserLogic common.Address, _upgradeExecutorLogic common.Address, _validatorWalletCreator common.Address, _l2FactoriesDeployer common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.SetTemplates(&_RollupCreator.TransactOpts, _bridgeCreator, _osp, _challengeManagerLogic, _rollupAdminLogic, _rollupUserLogic, _upgradeExecutorLogic, _validatorWalletCreator, _l2FactoriesDeployer)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RollupCreator *RollupCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RollupCreator.Contract.TransferOwnership(&_RollupCreator.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupCreator *RollupCreatorTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupCreator.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupCreator *RollupCreatorSession) Receive() (*types.Transaction, error) {
	return _RollupCreator.Contract.Receive(&_RollupCreator.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupCreator *RollupCreatorTransactorSession) Receive() (*types.Transaction, error) {
	return _RollupCreator.Contract.Receive(&_RollupCreator.TransactOpts)
}

// RollupCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferredIterator struct {
	Event *RollupCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the RollupCreator contract.
type RollupCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RollupCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorOwnershipTransferredIterator{contract: _RollupCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RollupCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorOwnershipTransferred)
				if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RollupCreator *RollupCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*RollupCreatorOwnershipTransferred, error) {
	event := new(RollupCreatorOwnershipTransferred)
	if err := _RollupCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorRollupCreatedIterator is returned from FilterRollupCreated and is used to iterate over the raw logs and unpacked data for RollupCreated events raised by the RollupCreator contract.
type RollupCreatorRollupCreatedIterator struct {
	Event *RollupCreatorRollupCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorRollupCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorRollupCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorRollupCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorRollupCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorRollupCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorRollupCreated represents a RollupCreated event raised by the RollupCreator contract.
type RollupCreatorRollupCreated struct {
	RollupAddress          common.Address
	NativeToken            common.Address
	InboxAddress           common.Address
	Outbox                 common.Address
	RollupEventInbox       common.Address
	ChallengeManager       common.Address
	AdminProxy             common.Address
	SequencerInbox         common.Address
	Bridge                 common.Address
	UpgradeExecutor        common.Address
	ValidatorWalletCreator common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRollupCreated is a free log retrieval operation binding the contract event 0xd9bfd3bb3012f0caa103d1ba172692464d2de5c7b75877ce255c72147086a79d.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address indexed nativeToken, address inboxAddress, address outbox, address rollupEventInbox, address challengeManager, address adminProxy, address sequencerInbox, address bridge, address upgradeExecutor, address validatorWalletCreator)
func (_RollupCreator *RollupCreatorFilterer) FilterRollupCreated(opts *bind.FilterOpts, rollupAddress []common.Address, nativeToken []common.Address) (*RollupCreatorRollupCreatedIterator, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}
	var nativeTokenRule []interface{}
	for _, nativeTokenItem := range nativeToken {
		nativeTokenRule = append(nativeTokenRule, nativeTokenItem)
	}

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "RollupCreated", rollupAddressRule, nativeTokenRule)
	if err != nil {
		return nil, err
	}
	return &RollupCreatorRollupCreatedIterator{contract: _RollupCreator.contract, event: "RollupCreated", logs: logs, sub: sub}, nil
}

// WatchRollupCreated is a free log subscription operation binding the contract event 0xd9bfd3bb3012f0caa103d1ba172692464d2de5c7b75877ce255c72147086a79d.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address indexed nativeToken, address inboxAddress, address outbox, address rollupEventInbox, address challengeManager, address adminProxy, address sequencerInbox, address bridge, address upgradeExecutor, address validatorWalletCreator)
func (_RollupCreator *RollupCreatorFilterer) WatchRollupCreated(opts *bind.WatchOpts, sink chan<- *RollupCreatorRollupCreated, rollupAddress []common.Address, nativeToken []common.Address) (event.Subscription, error) {

	var rollupAddressRule []interface{}
	for _, rollupAddressItem := range rollupAddress {
		rollupAddressRule = append(rollupAddressRule, rollupAddressItem)
	}
	var nativeTokenRule []interface{}
	for _, nativeTokenItem := range nativeToken {
		nativeTokenRule = append(nativeTokenRule, nativeTokenItem)
	}

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "RollupCreated", rollupAddressRule, nativeTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorRollupCreated)
				if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupCreated is a log parse operation binding the contract event 0xd9bfd3bb3012f0caa103d1ba172692464d2de5c7b75877ce255c72147086a79d.
//
// Solidity: event RollupCreated(address indexed rollupAddress, address indexed nativeToken, address inboxAddress, address outbox, address rollupEventInbox, address challengeManager, address adminProxy, address sequencerInbox, address bridge, address upgradeExecutor, address validatorWalletCreator)
func (_RollupCreator *RollupCreatorFilterer) ParseRollupCreated(log types.Log) (*RollupCreatorRollupCreated, error) {
	event := new(RollupCreatorRollupCreated)
	if err := _RollupCreator.contract.UnpackLog(event, "RollupCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupCreatorTemplatesUpdatedIterator is returned from FilterTemplatesUpdated and is used to iterate over the raw logs and unpacked data for TemplatesUpdated events raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdatedIterator struct {
	Event *RollupCreatorTemplatesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupCreatorTemplatesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupCreatorTemplatesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupCreatorTemplatesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupCreatorTemplatesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupCreatorTemplatesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupCreatorTemplatesUpdated represents a TemplatesUpdated event raised by the RollupCreator contract.
type RollupCreatorTemplatesUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplatesUpdated is a free log retrieval operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) FilterTemplatesUpdated(opts *bind.FilterOpts) (*RollupCreatorTemplatesUpdatedIterator, error) {

	logs, sub, err := _RollupCreator.contract.FilterLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return &RollupCreatorTemplatesUpdatedIterator{contract: _RollupCreator.contract, event: "TemplatesUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplatesUpdated is a free log subscription operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) WatchTemplatesUpdated(opts *bind.WatchOpts, sink chan<- *RollupCreatorTemplatesUpdated) (event.Subscription, error) {

	logs, sub, err := _RollupCreator.contract.WatchLogs(opts, "TemplatesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupCreatorTemplatesUpdated)
				if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplatesUpdated is a log parse operation binding the contract event 0xc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b.
//
// Solidity: event TemplatesUpdated()
func (_RollupCreator *RollupCreatorFilterer) ParseTemplatesUpdated(log types.Log) (*RollupCreatorTemplatesUpdated, error) {
	event := new(RollupCreatorTemplatesUpdated)
	if err := _RollupCreator.contract.UnpackLog(event, "TemplatesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxMetaData contains all meta data concerning the RollupEventInbox contract.
var RollupEventInboxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HadZeroInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RollupNotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InboxMessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNum\",\"type\":\"uint256\"}],\"name\":\"InboxMessageDeliveredFromOrigin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"}],\"name\":\"rollupInitialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRollupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051610a6a61003060003960006103380152610a6a6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063cb23bcb511610050578063cb23bcb514610089578063cf8d56d6146100b8578063e78cea92146100cb57600080fd5b80636ae71f121461006c578063c4d66de814610076575b600080fd5b6100746100de565b005b610074610084366004610846565b61032e565b60015461009c906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100746100c636600461086a565b610522565b60005461009c906001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610131573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015591906108e6565b6001600160a01b0316336001600160a01b03161461023d57600154604080517f8da5cb5b000000000000000000000000000000000000000000000000000000008152905133926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f391906108e6565b6040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152911660248201526044015b60405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663cb23bcb56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b591906108e6565b6001549091506001600160a01b038083169116036102ff576040517fd054909f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103cc5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610234565b6000546001600160a01b03161561040f576040517fef34ca5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811661044f576040517f1ad0f74300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155604080517fcb23bcb5000000000000000000000000000000000000000000000000000000008152905163cb23bcb5916004808201926020929091908290030181865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f291906108e6565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b6001546001600160a01b0316331461057c5760405162461bcd60e51b815260206004820152600b60248201527f4f4e4c595f524f4c4c55500000000000000000000000000000000000000000006044820152606401610234565b806105c95760405162461bcd60e51b815260206004820152601260248201527f454d5054595f434841494e5f434f4e46494700000000000000000000000000006044820152606401610234565b6001486105d46106c3565b1561064957606c6001600160a01b031663f5d6ded76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190610903565b610646908261091c565b90505b60008583838787604051602001610664959493929190610956565b6040516020818303038152906040529050600061068082610789565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b836040516106b291906109c7565b60405180910390a250505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f051038f20000000000000000000000000000000000000000000000000000000017905290516000918291829160649161072f9190610a18565b600060405180830381855afa9150503d806000811461076a576040519150601f19603f3d011682016040523d82523d6000602084013e61076f565b606091505b5091509150818015610782575080516020145b9250505090565b60008054825160208401206040517f8db5993b000000000000000000000000000000000000000000000000000000008152600b60048201526024810184905260448101919091526001600160a01b0390911690638db5993b906064016020604051808303816000875af1158015610804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108289190610903565b92915050565b6001600160a01b038116811461084357600080fd5b50565b60006020828403121561085857600080fd5b81356108638161082e565b9392505050565b60008060006040848603121561087f57600080fd5b83359250602084013567ffffffffffffffff8082111561089e57600080fd5b818601915086601f8301126108b257600080fd5b8135818111156108c157600080fd5b8760208285010111156108d357600080fd5b6020830194508093505050509250925092565b6000602082840312156108f857600080fd5b81516108638161082e565b60006020828403121561091557600080fd5b5051919050565b80820180821115610828577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8581527fff000000000000000000000000000000000000000000000000000000000000008560f81b1660208201528360218201528183604183013760009101604101908152949350505050565b60005b838110156109be5781810151838201526020016109a6565b50506000910152565b60208152600082518060208401526109e68160408501602087016109a3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008251610a2a8184602087016109a3565b919091019291505056fea26469706673582212200ef7b3bd149a8a6ce36a12bbdbfd6da0cea67622139d2c25f991765b9eaf73a464736f6c63430008110033",
}

// RollupEventInboxABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupEventInboxMetaData.ABI instead.
var RollupEventInboxABI = RollupEventInboxMetaData.ABI

// RollupEventInboxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupEventInboxMetaData.Bin instead.
var RollupEventInboxBin = RollupEventInboxMetaData.Bin

// DeployRollupEventInbox deploys a new Ethereum contract, binding an instance of RollupEventInbox to it.
func DeployRollupEventInbox(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupEventInbox, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupEventInboxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// RollupEventInbox is an auto generated Go binding around an Ethereum contract.
type RollupEventInbox struct {
	RollupEventInboxCaller     // Read-only binding to the contract
	RollupEventInboxTransactor // Write-only binding to the contract
	RollupEventInboxFilterer   // Log filterer for contract events
}

// RollupEventInboxCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupEventInboxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupEventInboxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupEventInboxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupEventInboxSession struct {
	Contract     *RollupEventInbox // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupEventInboxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupEventInboxCallerSession struct {
	Contract *RollupEventInboxCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RollupEventInboxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupEventInboxTransactorSession struct {
	Contract     *RollupEventInboxTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RollupEventInboxRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupEventInboxRaw struct {
	Contract *RollupEventInbox // Generic contract binding to access the raw methods on
}

// RollupEventInboxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupEventInboxCallerRaw struct {
	Contract *RollupEventInboxCaller // Generic read-only contract binding to access the raw methods on
}

// RollupEventInboxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupEventInboxTransactorRaw struct {
	Contract *RollupEventInboxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupEventInbox creates a new instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInbox(address common.Address, backend bind.ContractBackend) (*RollupEventInbox, error) {
	contract, err := bindRollupEventInbox(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupEventInbox{RollupEventInboxCaller: RollupEventInboxCaller{contract: contract}, RollupEventInboxTransactor: RollupEventInboxTransactor{contract: contract}, RollupEventInboxFilterer: RollupEventInboxFilterer{contract: contract}}, nil
}

// NewRollupEventInboxCaller creates a new read-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxCaller(address common.Address, caller bind.ContractCaller) (*RollupEventInboxCaller, error) {
	contract, err := bindRollupEventInbox(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxCaller{contract: contract}, nil
}

// NewRollupEventInboxTransactor creates a new write-only instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupEventInboxTransactor, error) {
	contract, err := bindRollupEventInbox(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxTransactor{contract: contract}, nil
}

// NewRollupEventInboxFilterer creates a new log filterer instance of RollupEventInbox, bound to a specific deployed contract.
func NewRollupEventInboxFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupEventInboxFilterer, error) {
	contract, err := bindRollupEventInbox(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxFilterer{contract: contract}, nil
}

// bindRollupEventInbox binds a generic wrapper to an already deployed contract.
func bindRollupEventInbox(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupEventInboxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.RollupEventInboxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupEventInboxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupEventInbox *RollupEventInboxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupEventInbox.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupEventInbox *RollupEventInboxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.contract.Transact(opts, method, params...)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Bridge() (common.Address, error) {
	return _RollupEventInbox.Contract.Bridge(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupEventInbox.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupEventInbox *RollupEventInboxCallerSession) Rollup() (common.Address, error) {
	return _RollupEventInbox.Contract.Rollup(&_RollupEventInbox.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) Initialize(opts *bind.TransactOpts, _bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "initialize", _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _bridge) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) Initialize(_bridge common.Address) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.Initialize(&_RollupEventInbox.TransactOpts, _bridge)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxTransactor) RollupInitialized(opts *bind.TransactOpts, chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "rollupInitialized", chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// RollupInitialized is a paid mutator transaction binding the contract method 0xcf8d56d6.
//
// Solidity: function rollupInitialized(uint256 chainId, string chainConfig) returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) RollupInitialized(chainId *big.Int, chainConfig string) (*types.Transaction, error) {
	return _RollupEventInbox.Contract.RollupInitialized(&_RollupEventInbox.TransactOpts, chainId, chainConfig)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxTransactor) UpdateRollupAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupEventInbox.contract.Transact(opts, "updateRollupAddress")
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _RollupEventInbox.Contract.UpdateRollupAddress(&_RollupEventInbox.TransactOpts)
}

// UpdateRollupAddress is a paid mutator transaction binding the contract method 0x6ae71f12.
//
// Solidity: function updateRollupAddress() returns()
func (_RollupEventInbox *RollupEventInboxTransactorSession) UpdateRollupAddress() (*types.Transaction, error) {
	return _RollupEventInbox.Contract.UpdateRollupAddress(&_RollupEventInbox.TransactOpts)
}

// RollupEventInboxInboxMessageDeliveredIterator is returned from FilterInboxMessageDelivered and is used to iterate over the raw logs and unpacked data for InboxMessageDelivered events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredIterator struct {
	Event *RollupEventInboxInboxMessageDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDelivered represents a InboxMessageDelivered event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDelivered struct {
	MessageNum *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDelivered is a free log retrieval operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDelivered(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDelivered", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDelivered is a free log subscription operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDelivered(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDelivered, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDelivered", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDelivered)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDelivered is a log parse operation binding the contract event 0xff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b.
//
// Solidity: event InboxMessageDelivered(uint256 indexed messageNum, bytes data)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDelivered(log types.Log) (*RollupEventInboxInboxMessageDelivered, error) {
	event := new(RollupEventInboxInboxMessageDelivered)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDelivered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupEventInboxInboxMessageDeliveredFromOriginIterator is returned from FilterInboxMessageDeliveredFromOrigin and is used to iterate over the raw logs and unpacked data for InboxMessageDeliveredFromOrigin events raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOriginIterator struct {
	Event *RollupEventInboxInboxMessageDeliveredFromOrigin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupEventInboxInboxMessageDeliveredFromOrigin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupEventInboxInboxMessageDeliveredFromOriginIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupEventInboxInboxMessageDeliveredFromOrigin represents a InboxMessageDeliveredFromOrigin event raised by the RollupEventInbox contract.
type RollupEventInboxInboxMessageDeliveredFromOrigin struct {
	MessageNum *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInboxMessageDeliveredFromOrigin is a free log retrieval operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) FilterInboxMessageDeliveredFromOrigin(opts *bind.FilterOpts, messageNum []*big.Int) (*RollupEventInboxInboxMessageDeliveredFromOriginIterator, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.FilterLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return &RollupEventInboxInboxMessageDeliveredFromOriginIterator{contract: _RollupEventInbox.contract, event: "InboxMessageDeliveredFromOrigin", logs: logs, sub: sub}, nil
}

// WatchInboxMessageDeliveredFromOrigin is a free log subscription operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) WatchInboxMessageDeliveredFromOrigin(opts *bind.WatchOpts, sink chan<- *RollupEventInboxInboxMessageDeliveredFromOrigin, messageNum []*big.Int) (event.Subscription, error) {

	var messageNumRule []interface{}
	for _, messageNumItem := range messageNum {
		messageNumRule = append(messageNumRule, messageNumItem)
	}

	logs, sub, err := _RollupEventInbox.contract.WatchLogs(opts, "InboxMessageDeliveredFromOrigin", messageNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
				if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInboxMessageDeliveredFromOrigin is a log parse operation binding the contract event 0xab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c.
//
// Solidity: event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)
func (_RollupEventInbox *RollupEventInboxFilterer) ParseInboxMessageDeliveredFromOrigin(log types.Log) (*RollupEventInboxInboxMessageDeliveredFromOrigin, error) {
	event := new(RollupEventInboxInboxMessageDeliveredFromOrigin)
	if err := _RollupEventInbox.contract.UnpackLog(event, "InboxMessageDeliveredFromOrigin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupLibMetaData contains all meta data concerning the RollupLib contract.
var RollupLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204ff5badd5410966e841a491be9e669819dd5cee9190c60ef351e413ef886eebd64736f6c63430008110033",
}

// RollupLibABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupLibMetaData.ABI instead.
var RollupLibABI = RollupLibMetaData.ABI

// RollupLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupLibMetaData.Bin instead.
var RollupLibBin = RollupLibMetaData.Bin

// DeployRollupLib deploys a new Ethereum contract, binding an instance of RollupLib to it.
func DeployRollupLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupLib, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// RollupLib is an auto generated Go binding around an Ethereum contract.
type RollupLib struct {
	RollupLibCaller     // Read-only binding to the contract
	RollupLibTransactor // Write-only binding to the contract
	RollupLibFilterer   // Log filterer for contract events
}

// RollupLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupLibSession struct {
	Contract     *RollupLib        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupLibCallerSession struct {
	Contract *RollupLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// RollupLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupLibTransactorSession struct {
	Contract     *RollupLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// RollupLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupLibRaw struct {
	Contract *RollupLib // Generic contract binding to access the raw methods on
}

// RollupLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupLibCallerRaw struct {
	Contract *RollupLibCaller // Generic read-only contract binding to access the raw methods on
}

// RollupLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupLibTransactorRaw struct {
	Contract *RollupLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupLib creates a new instance of RollupLib, bound to a specific deployed contract.
func NewRollupLib(address common.Address, backend bind.ContractBackend) (*RollupLib, error) {
	contract, err := bindRollupLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupLib{RollupLibCaller: RollupLibCaller{contract: contract}, RollupLibTransactor: RollupLibTransactor{contract: contract}, RollupLibFilterer: RollupLibFilterer{contract: contract}}, nil
}

// NewRollupLibCaller creates a new read-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibCaller(address common.Address, caller bind.ContractCaller) (*RollupLibCaller, error) {
	contract, err := bindRollupLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibCaller{contract: contract}, nil
}

// NewRollupLibTransactor creates a new write-only instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupLibTransactor, error) {
	contract, err := bindRollupLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupLibTransactor{contract: contract}, nil
}

// NewRollupLibFilterer creates a new log filterer instance of RollupLib, bound to a specific deployed contract.
func NewRollupLibFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupLibFilterer, error) {
	contract, err := bindRollupLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupLibFilterer{contract: contract}, nil
}

// bindRollupLib binds a generic wrapper to an already deployed contract.
func bindRollupLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.RollupLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.RollupLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupLib *RollupLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupLib *RollupLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupLib *RollupLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupLib.Contract.contract.Transact(opts, method, params...)
}

// RollupProxyMetaData contains all meta data concerning the RollupProxy contract.
var RollupProxyMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loserStakeEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainConfig\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"miniStakeValues\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delaySeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structISequencerInbox.MaxTimeVariation\",\"name\":\"sequencerInboxMaxTimeVariation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBlockEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroBigStepEdgeHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerZeroSmallStepEdgeHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"genesisAssertionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"genesisInboxCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"anyTrustFastConfirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numBigStepLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"challengeGracePeriodBlocks\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"threshold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replenishRateInBasis\",\"type\":\"uint64\"}],\"internalType\":\"structBufferConfig\",\"name\":\"bufferConfig\",\"type\":\"tuple\"}],\"internalType\":\"structConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contractIBridge\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"contractISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"},{\"internalType\":\"contractIInboxBase\",\"name\":\"inbox\",\"type\":\"address\"},{\"internalType\":\"contractIOutbox\",\"name\":\"outbox\",\"type\":\"address\"},{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"rollupEventInbox\",\"type\":\"address\"},{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollupAdminLogic\",\"type\":\"address\"},{\"internalType\":\"contractIRollupUser\",\"name\":\"rollupUserLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorWalletCreator\",\"type\":\"address\"}],\"internalType\":\"structContractDependencies\",\"name\":\"connectedContracts\",\"type\":\"tuple\"}],\"name\":\"initializeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// RollupProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupProxyMetaData.ABI instead.
var RollupProxyABI = RollupProxyMetaData.ABI

// RollupProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupProxyMetaData.Bin instead.
var RollupProxyBin = RollupProxyMetaData.Bin

// DeployRollupProxy deploys a new Ethereum contract, binding an instance of RollupProxy to it.
func DeployRollupProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupProxy, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// RollupProxy is an auto generated Go binding around an Ethereum contract.
type RollupProxy struct {
	RollupProxyCaller     // Read-only binding to the contract
	RollupProxyTransactor // Write-only binding to the contract
	RollupProxyFilterer   // Log filterer for contract events
}

// RollupProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupProxySession struct {
	Contract     *RollupProxy      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupProxyCallerSession struct {
	Contract *RollupProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// RollupProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupProxyTransactorSession struct {
	Contract     *RollupProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// RollupProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupProxyRaw struct {
	Contract *RollupProxy // Generic contract binding to access the raw methods on
}

// RollupProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupProxyCallerRaw struct {
	Contract *RollupProxyCaller // Generic read-only contract binding to access the raw methods on
}

// RollupProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupProxyTransactorRaw struct {
	Contract *RollupProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupProxy creates a new instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxy(address common.Address, backend bind.ContractBackend) (*RollupProxy, error) {
	contract, err := bindRollupProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupProxy{RollupProxyCaller: RollupProxyCaller{contract: contract}, RollupProxyTransactor: RollupProxyTransactor{contract: contract}, RollupProxyFilterer: RollupProxyFilterer{contract: contract}}, nil
}

// NewRollupProxyCaller creates a new read-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyCaller(address common.Address, caller bind.ContractCaller) (*RollupProxyCaller, error) {
	contract, err := bindRollupProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyCaller{contract: contract}, nil
}

// NewRollupProxyTransactor creates a new write-only instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupProxyTransactor, error) {
	contract, err := bindRollupProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupProxyTransactor{contract: contract}, nil
}

// NewRollupProxyFilterer creates a new log filterer instance of RollupProxy, bound to a specific deployed contract.
func NewRollupProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupProxyFilterer, error) {
	contract, err := bindRollupProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupProxyFilterer{contract: contract}, nil
}

// bindRollupProxy binds a generic wrapper to an already deployed contract.
func bindRollupProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupProxyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.RollupProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.RollupProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupProxy *RollupProxyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupProxy *RollupProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupProxy *RollupProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupProxy.Contract.contract.Transact(opts, method, params...)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0xd384644b.
//
// Solidity: function initializeProxy((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxyTransactor) InitializeProxy(opts *bind.TransactOpts, config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.contract.Transact(opts, "initializeProxy", config, connectedContracts)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0xd384644b.
//
// Solidity: function initializeProxy((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxySession) InitializeProxy(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.Contract.InitializeProxy(&_RollupProxy.TransactOpts, config, connectedContracts)
}

// InitializeProxy is a paid mutator transaction binding the contract method 0xd384644b.
//
// Solidity: function initializeProxy((uint64,address,uint256,bytes32,address,address,uint256,string,uint256[],(uint256,uint256,uint256,uint256),uint256,uint256,uint256,((bytes32[2],uint64[2]),uint8,bytes32),uint256,address,uint8,uint64,(uint64,uint64,uint64)) config, (address,address,address,address,address,address,address,address,address) connectedContracts) returns()
func (_RollupProxy *RollupProxyTransactorSession) InitializeProxy(config Config, connectedContracts ContractDependencies) (*types.Transaction, error) {
	return _RollupProxy.Contract.InitializeProxy(&_RollupProxy.TransactOpts, config, connectedContracts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RollupProxy.Contract.Fallback(&_RollupProxy.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupProxy.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxySession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_RollupProxy *RollupProxyTransactorSession) Receive() (*types.Transaction, error) {
	return _RollupProxy.Contract.Receive(&_RollupProxy.TransactOpts)
}

// RollupProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupProxy contract.
type RollupProxyAdminChangedIterator struct {
	Event *RollupProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyAdminChanged represents a AdminChanged event raised by the RollupProxy contract.
type RollupProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupProxyAdminChangedIterator, error) {

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupProxyAdminChangedIterator{contract: _RollupProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyAdminChanged)
				if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupProxy *RollupProxyFilterer) ParseAdminChanged(log types.Log) (*RollupProxyAdminChanged, error) {
	event := new(RollupProxyAdminChanged)
	if err := _RollupProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupProxy contract.
type RollupProxyBeaconUpgradedIterator struct {
	Event *RollupProxyBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyBeaconUpgraded represents a BeaconUpgraded event raised by the RollupProxy contract.
type RollupProxyBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupProxyBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyBeaconUpgradedIterator{contract: _RollupProxy.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyBeaconUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupProxy *RollupProxyFilterer) ParseBeaconUpgraded(log types.Log) (*RollupProxyBeaconUpgraded, error) {
	event := new(RollupProxyBeaconUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupProxy contract.
type RollupProxyUpgradedIterator struct {
	Event *RollupProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgraded represents a Upgraded event raised by the RollupProxy contract.
type RollupProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedIterator{contract: _RollupProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgraded)
				if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgraded(log types.Log) (*RollupProxyUpgraded, error) {
	event := new(RollupProxyUpgraded)
	if err := _RollupProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupProxyUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupProxy contract.
type RollupProxyUpgradedSecondaryIterator struct {
	Event *RollupProxyUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupProxyUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupProxyUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupProxyUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupProxyUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupProxyUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupProxyUpgradedSecondary represents a UpgradedSecondary event raised by the RollupProxy contract.
type RollupProxyUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupProxyUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupProxyUpgradedSecondaryIterator{contract: _RollupProxy.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupProxyUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupProxy.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupProxyUpgradedSecondary)
				if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupProxy *RollupProxyFilterer) ParseUpgradedSecondary(log types.Log) (*RollupProxyUpgradedSecondary, error) {
	event := new(RollupProxyUpgradedSecondary)
	if err := _RollupProxy.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupReaderMetaData contains all meta data concerning the RollupReader contract.
var RollupReaderMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIOldRollup\",\"name\":\"_rollup\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"afterState\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"numBlocks\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structIOldRollup.Assertion\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeNum\",\"type\":\"uint64\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challengeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"confirmData\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"prevNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"noChildConfirmedBeforeBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childStakerCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestChildNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"structNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"latestStakedNode\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentChallenge\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"internalType\":\"structOldStaker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"contractIOldRollup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801561001057600080fd5b50604051610be3380380610be383398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610b206100c3600039600081816101a5015281816101f6015281816102b601528181610333015281816104500152818161051b0152818161058a0152818161060e01526106a50152610b206000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a23c44b111610076578063cb23bcb51161005b578063cb23bcb5146101a0578063dff69787146101c7578063facd743b146101cf57600080fd5b8063a23c44b11461012f578063bc45e0ae1461019857600080fd5b806365f7f80d146100a85780636ddd3744146100ce5780638ee1a126146100f957806392c8134c1461010f575b600080fd5b6100b06101f2565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6100e16100dc36600461072b565b61027b565b6040516001600160a01b0390911681526020016100c5565b61010161032f565b6040519081526020016100c5565b61012261011d36600461072b565b6103b3565b6040516100c5919061074f565b61014261013d366004610868565b6104bc565b6040516100c59190600060a08201905082518252602083015167ffffffffffffffff8082166020850152806040860151166040850152806060860151166060850152505060808301511515608083015292915050565b6100e1610586565b6100e17f000000000000000000000000000000000000000000000000000000000000000081565b6100b061060a565b6101e26101dd366004610868565b61066a565b60405190151581526020016100c5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365f7f80d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102769190610895565b905090565b6040517f6ddd374400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636ddd374490602401602060405180830381865afa158015610305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032991906108b2565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638ee1a1266040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027691906108cf565b6040805161018081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820181905261016082015290517f92c8134c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906392c8134c9060240161018060405180830381865afa158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610939565b6040805160a08101825260008082526020820181905281830181905260608201819052608082015290517fa23c44b10000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a23c44b19060240160a060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610a1b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc45e0ae6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027691906108b2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dff697876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610252573d6000803e3d6000fd5b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063facd743b90602401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103299190610acf565b67ffffffffffffffff8116811461072857600080fd5b50565b60006020828403121561073d57600080fd5b813561074881610712565b9392505050565b600061018082019050825182526020830151602083015260408301516040830152606083015161078b606084018267ffffffffffffffff169052565b5060808301516107a7608084018267ffffffffffffffff169052565b5060a08301516107c360a084018267ffffffffffffffff169052565b5060c08301516107df60c084018267ffffffffffffffff169052565b5060e08301516107fb60e084018267ffffffffffffffff169052565b506101008381015167ffffffffffffffff81168483015250506101208381015167ffffffffffffffff81168483015250506101408381015167ffffffffffffffff811684830152505061016092830151919092015290565b6001600160a01b038116811461072857600080fd5b60006020828403121561087a57600080fd5b813561074881610853565b805161089081610712565b919050565b6000602082840312156108a757600080fd5b815161074881610712565b6000602082840312156108c457600080fd5b815161074881610853565b6000602082840312156108e157600080fd5b5051919050565b604051610180810167ffffffffffffffff81118282101715610933577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b6000610180828403121561094c57600080fd5b6109546108e8565b82518152602083015160208201526040830151604082015261097860608401610885565b606082015261098960808401610885565b608082015261099a60a08401610885565b60a08201526109ab60c08401610885565b60c08201526109bc60e08401610885565b60e08201526101006109cf818501610885565b908201526101206109e1848201610885565b908201526101406109f3848201610885565b90820152610160928301519281019290925250919050565b8051801515811461089057600080fd5b600060a08284031215610a2d57600080fd5b60405160a0810181811067ffffffffffffffff82111715610a77577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052825181526020830151610a8c81610712565b60208201526040830151610a9f81610712565b60408201526060830151610ab281610712565b6060820152610ac360808401610a0b565b60808201529392505050565b600060208284031215610ae157600080fd5b61074882610a0b56fea2646970667358221220e7d173d7427911ae1261bfcb8df4436ba036e779c448fabcffea3e87feb3abf864736f6c63430008110033",
}

// RollupReaderABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupReaderMetaData.ABI instead.
var RollupReaderABI = RollupReaderMetaData.ABI

// RollupReaderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupReaderMetaData.Bin instead.
var RollupReaderBin = RollupReaderMetaData.Bin

// DeployRollupReader deploys a new Ethereum contract, binding an instance of RollupReader to it.
func DeployRollupReader(auth *bind.TransactOpts, backend bind.ContractBackend, _rollup common.Address) (common.Address, *types.Transaction, *RollupReader, error) {
	parsed, err := RollupReaderMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupReaderBin), backend, _rollup)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupReader{RollupReaderCaller: RollupReaderCaller{contract: contract}, RollupReaderTransactor: RollupReaderTransactor{contract: contract}, RollupReaderFilterer: RollupReaderFilterer{contract: contract}}, nil
}

// RollupReader is an auto generated Go binding around an Ethereum contract.
type RollupReader struct {
	RollupReaderCaller     // Read-only binding to the contract
	RollupReaderTransactor // Write-only binding to the contract
	RollupReaderFilterer   // Log filterer for contract events
}

// RollupReaderCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupReaderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupReaderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupReaderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupReaderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupReaderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupReaderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupReaderSession struct {
	Contract     *RollupReader     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupReaderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupReaderCallerSession struct {
	Contract *RollupReaderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// RollupReaderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupReaderTransactorSession struct {
	Contract     *RollupReaderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// RollupReaderRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupReaderRaw struct {
	Contract *RollupReader // Generic contract binding to access the raw methods on
}

// RollupReaderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupReaderCallerRaw struct {
	Contract *RollupReaderCaller // Generic read-only contract binding to access the raw methods on
}

// RollupReaderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupReaderTransactorRaw struct {
	Contract *RollupReaderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupReader creates a new instance of RollupReader, bound to a specific deployed contract.
func NewRollupReader(address common.Address, backend bind.ContractBackend) (*RollupReader, error) {
	contract, err := bindRollupReader(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupReader{RollupReaderCaller: RollupReaderCaller{contract: contract}, RollupReaderTransactor: RollupReaderTransactor{contract: contract}, RollupReaderFilterer: RollupReaderFilterer{contract: contract}}, nil
}

// NewRollupReaderCaller creates a new read-only instance of RollupReader, bound to a specific deployed contract.
func NewRollupReaderCaller(address common.Address, caller bind.ContractCaller) (*RollupReaderCaller, error) {
	contract, err := bindRollupReader(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupReaderCaller{contract: contract}, nil
}

// NewRollupReaderTransactor creates a new write-only instance of RollupReader, bound to a specific deployed contract.
func NewRollupReaderTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupReaderTransactor, error) {
	contract, err := bindRollupReader(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupReaderTransactor{contract: contract}, nil
}

// NewRollupReaderFilterer creates a new log filterer instance of RollupReader, bound to a specific deployed contract.
func NewRollupReaderFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupReaderFilterer, error) {
	contract, err := bindRollupReader(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupReaderFilterer{contract: contract}, nil
}

// bindRollupReader binds a generic wrapper to an already deployed contract.
func bindRollupReader(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupReaderMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupReader *RollupReaderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupReader.Contract.RollupReaderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupReader *RollupReaderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupReader.Contract.RollupReaderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupReader *RollupReaderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupReader.Contract.RollupReaderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupReader *RollupReaderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupReader.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupReader *RollupReaderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupReader.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupReader *RollupReaderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupReader.Contract.contract.Transact(opts, method, params...)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupReader *RollupReaderCaller) GetNode(opts *bind.CallOpts, nodeNum uint64) (Node, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "getNode", nodeNum)

	if err != nil {
		return *new(Node), err
	}

	out0 := *abi.ConvertType(out[0], new(Node)).(*Node)

	return out0, err

}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupReader *RollupReaderSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupReader.Contract.GetNode(&_RollupReader.CallOpts, nodeNum)
}

// GetNode is a free data retrieval call binding the contract method 0x92c8134c.
//
// Solidity: function getNode(uint64 nodeNum) view returns((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))
func (_RollupReader *RollupReaderCallerSession) GetNode(nodeNum uint64) (Node, error) {
	return _RollupReader.Contract.GetNode(&_RollupReader.CallOpts, nodeNum)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupReader *RollupReaderCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (OldStaker, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(OldStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(OldStaker)).(*OldStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupReader *RollupReaderSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _RollupReader.Contract.GetStaker(&_RollupReader.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,uint64,uint64,uint64,bool))
func (_RollupReader *RollupReaderCallerSession) GetStaker(staker common.Address) (OldStaker, error) {
	return _RollupReader.Contract.GetStaker(&_RollupReader.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupReader *RollupReaderCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupReader *RollupReaderSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupReader.Contract.GetStakerAddress(&_RollupReader.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupReader *RollupReaderCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupReader.Contract.GetStakerAddress(&_RollupReader.CallOpts, stakerNum)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupReader *RollupReaderCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupReader *RollupReaderSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupReader.Contract.IsValidator(&_RollupReader.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_RollupReader *RollupReaderCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _RollupReader.Contract.IsValidator(&_RollupReader.CallOpts, validator)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupReader *RollupReaderCaller) LatestConfirmed(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupReader *RollupReaderSession) LatestConfirmed() (uint64, error) {
	return _RollupReader.Contract.LatestConfirmed(&_RollupReader.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(uint64)
func (_RollupReader *RollupReaderCallerSession) LatestConfirmed() (uint64, error) {
	return _RollupReader.Contract.LatestConfirmed(&_RollupReader.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupReader *RollupReaderCaller) Rollup(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "rollup")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupReader *RollupReaderSession) Rollup() (common.Address, error) {
	return _RollupReader.Contract.Rollup(&_RollupReader.CallOpts)
}

// Rollup is a free data retrieval call binding the contract method 0xcb23bcb5.
//
// Solidity: function rollup() view returns(address)
func (_RollupReader *RollupReaderCallerSession) Rollup() (common.Address, error) {
	return _RollupReader.Contract.Rollup(&_RollupReader.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupReader *RollupReaderCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupReader *RollupReaderSession) StakerCount() (uint64, error) {
	return _RollupReader.Contract.StakerCount(&_RollupReader.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupReader *RollupReaderCallerSession) StakerCount() (uint64, error) {
	return _RollupReader.Contract.StakerCount(&_RollupReader.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupReader *RollupReaderCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupReader *RollupReaderSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupReader.Contract.ValidatorWalletCreator(&_RollupReader.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupReader *RollupReaderCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupReader.Contract.ValidatorWalletCreator(&_RollupReader.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupReader *RollupReaderCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupReader.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupReader *RollupReaderSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupReader.Contract.WasmModuleRoot(&_RollupReader.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupReader *RollupReaderCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupReader.Contract.WasmModuleRoot(&_RollupReader.CallOpts)
}

// RollupReaderNodeCreatedIterator is returned from FilterNodeCreated and is used to iterate over the raw logs and unpacked data for NodeCreated events raised by the RollupReader contract.
type RollupReaderNodeCreatedIterator struct {
	Event *RollupReaderNodeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupReaderNodeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupReaderNodeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupReaderNodeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupReaderNodeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupReaderNodeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupReaderNodeCreated represents a NodeCreated event raised by the RollupReader contract.
type RollupReaderNodeCreated struct {
	NodeNum            uint64
	ParentNodeHash     [32]byte
	NodeHash           [32]byte
	ExecutionHash      [32]byte
	Assertion          IOldRollupAssertion
	AfterInboxBatchAcc [32]byte
	WasmModuleRoot     [32]byte
	InboxMaxCount      *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterNodeCreated is a free log retrieval operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupReader *RollupReaderFilterer) FilterNodeCreated(opts *bind.FilterOpts, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (*RollupReaderNodeCreatedIterator, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupReader.contract.FilterLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupReaderNodeCreatedIterator{contract: _RollupReader.contract, event: "NodeCreated", logs: logs, sub: sub}, nil
}

// WatchNodeCreated is a free log subscription operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupReader *RollupReaderFilterer) WatchNodeCreated(opts *bind.WatchOpts, sink chan<- *RollupReaderNodeCreated, nodeNum []uint64, parentNodeHash [][32]byte, nodeHash [][32]byte) (event.Subscription, error) {

	var nodeNumRule []interface{}
	for _, nodeNumItem := range nodeNum {
		nodeNumRule = append(nodeNumRule, nodeNumItem)
	}
	var parentNodeHashRule []interface{}
	for _, parentNodeHashItem := range parentNodeHash {
		parentNodeHashRule = append(parentNodeHashRule, parentNodeHashItem)
	}
	var nodeHashRule []interface{}
	for _, nodeHashItem := range nodeHash {
		nodeHashRule = append(nodeHashRule, nodeHashItem)
	}

	logs, sub, err := _RollupReader.contract.WatchLogs(opts, "NodeCreated", nodeNumRule, parentNodeHashRule, nodeHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupReaderNodeCreated)
				if err := _RollupReader.contract.UnpackLog(event, "NodeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeCreated is a log parse operation binding the contract event 0x4f4caa9e67fb994e349dd35d1ad0ce23053d4323f83ce11dc817b5435031d096.
//
// Solidity: event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, (((bytes32[2],uint64[2]),uint8),((bytes32[2],uint64[2]),uint8),uint64) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)
func (_RollupReader *RollupReaderFilterer) ParseNodeCreated(log types.Log) (*RollupReaderNodeCreated, error) {
	event := new(RollupReaderNodeCreated)
	if err := _RollupReader.contract.UnpackLog(event, "NodeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicMetaData contains all meta data concerning the RollupUserLogic contract.
var RollupUserLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sendRoot\",\"type\":\"bytes32\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"challengeIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengedAssertion\",\"type\":\"uint64\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RollupInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradedSecondary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_AFK_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyTrustFastConfirmer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contractIBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeGracePeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeManager\",\"outputs\":[{\"internalType\":\"contractIEdgeChallengeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"computeAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"winningEdgeId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"prevConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"confirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentAssertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"confirmState\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"fastConfirmAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"fastConfirmNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisAssertionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"firstChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondChildBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"createdAtBlock\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isFirstChild\",\"type\":\"bool\"},{\"internalType\":\"enumAssertionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionNode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getAssertionCreationBlockForLogLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getFirstChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"getSecondChildCreationBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"latestStakedAssertion\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"internalType\":\"structIRollupCore.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"stakerNum\",\"type\":\"uint64\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contractIInboxBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isFirstChild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedAssertion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"newStakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contractIOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"reduceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWhitelistAfterValidatorAfk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnOldDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupDeploymentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventInbox\",\"outputs\":[{\"internalType\":\"contractIRollupEventInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInbox\",\"outputs\":[{\"internalType\":\"contractISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevPrevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sequencerBatchAcc\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"internalType\":\"structBeforeStateData\",\"name\":\"beforeStateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"beforeState\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"afterState\",\"type\":\"tuple\"}],\"internalType\":\"structAssertionInputs\",\"name\":\"assertion\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"expectedAssertionHash\",\"type\":\"bytes32\"}],\"name\":\"stakeOnNewAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"endHistoryRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structAssertionState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"prevAssertionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inboxAcc\",\"type\":\"bytes32\"}],\"name\":\"validateAssertionHash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"wasmModuleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challengeManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"confirmPeriodBlocks\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextInboxPosition\",\"type\":\"uint64\"}],\"internalType\":\"structConfigData\",\"name\":\"configData\",\"type\":\"tuple\"}],\"name\":\"validateConfig\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWalletCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasmModuleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e0604052620000196200003a60201b62001dd91760201c565b15156080523060a0524660c0523480156200003357600080fd5b5062000108565b60408051600481526024810182526020810180516001600160e01b03166302881c7960e11b1790529051600091829182916064916200007a9190620000d7565b600060405180830381855afa9150503d8060008114620000b7576040519150601f19603f3d011682016040523d82523d6000602084013e620000bc565b606091505b5091509150818015620000d0575080516020145b9250505090565b6000825160005b81811015620000fa5760208186018101518583015201620000de565b506000920191825250919050565b60805160a05160c0516147846200014d6000396000611a330152600081816114ae01528181611aa90152611b3f015260008181610d7b0152612efb01526147846000f3fe608060405234801561001057600080fd5b50600436106103785760003560e01c80636177fd18116101d3578063c2c2e68e11610104578063e8bd4922116100a2578063f065de3f1161007c578063f065de3f146108fe578063f3f0a03e14610911578063facd743b14610924578063fb0e722b1461094757600080fd5b8063e8bd492214610831578063ee35f327146108cd578063ef40a670146108d557600080fd5b8063dff69787116100de578063dff69787146107f0578063e51019a6146107f8578063e531d8c71461080b578063e78cea921461081e57600080fd5b8063c2c2e68e146107c2578063c4d66de8146107ca578063ce11e6ab146107dd57600080fd5b806388302884116101715780639a8a05921161014b5780639a8a05921461068d578063a23c44b114610696578063aa38a6e71461079c578063bc45e0ae146107af57600080fd5b8063883028841461065c5780638da5cb5b1461067c5780638ee1a1261461068457600080fd5b80636ddd3744116101ad5780636ddd37441461062457806371ef232c146106375780637300201c1461064057806376e7e23b1461065357600080fd5b80636177fd18146105d35780636420fb9f1461060957806365f7f80d1461061c57600080fd5b8063353325e0116102ad57806352d1902d1161024b57806357ef4ab91161022557806357ef4ab9146105a55780635c975abb146105ad5780636096686d146105b857806361373919146105cb57600080fd5b806352d1902d1461057257806355840a581461057a57806356bbc9e61461059257600080fd5b806345e38b641161028757806345e38b64146105395780634ceccfe51461054257806350f32f681461054c57806351ed6a301461055f57600080fd5b8063353325e0146104f25780633b86de19146104fa5780633be680ea1461050d57600080fd5b80631b1689e91161031a5780632e7acfa6116102f45780632e7acfa61461048f5780632f30cabd146104a357806330836228146104cc57806333635fc2146104df57600080fd5b80631b1689e9146104475780631e83d30f146104505780632abdd2301461046357600080fd5b8063117155851161035657806311715585146103d557806312ab3d3b1461040157806313c56ca71461041e57806318baaab91461043f57600080fd5b8063023a96fe1461037d57806304972af9146103ad57806310b98a35146103c2575b600080fd5b606954610390906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6103c06103bb366004613d49565b61095a565b005b6103c06103d0366004613d88565b610974565b6103e86103e3366004613de6565b610d5b565b60405167ffffffffffffffff90911681526020016103a4565b607a5461040e9060ff1681565b60405190151581526020016103a4565b61043161042c366004613de6565b610d77565b6040519081526020016103a4565b6103c0610ebf565b61043160795481565b6103c061045e366004613de6565b610f93565b610431610471366004613e14565b6001600160a01b031660009081526076602052604090206001015490565b6066546103e89067ffffffffffffffff1681565b6104316104b1366004613e14565b6001600160a01b031660009081526077602052604090205490565b61040e6104da366004613de6565b61100a565b6104316104ed366004613e31565b611026565b61043161104b565b6103c0610508366004613e7b565b611087565b6069546103e89074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b61043160715481565b6104316203138081565b6103c061055a366004613ea8565b611428565b607054610390906001600160a01b031681565b6104316114a1565b607a546103909061010090046001600160a01b031681565b6103e86105a0366004613de6565b611566565b6103c0611589565b60335460ff1661040e565b6103c06105c6366004613ef4565b611601565b610431611674565b61040e6105e1366004613e14565b6001600160a01b0316600090815260766020526040902060020154600160401b900460ff1690565b6103c0610617366004613e7b565b6116f7565b607354610431565b610390610632366004613f4a565b6118bc565b61043160785481565b6103c061064e366004613f67565b6118f6565b61043160675481565b61066f61066a366004613de6565b611907565b6040516103a49190613fd3565b6103906119d3565b61043160685481565b61043160655481565b6107456106a4366004613e14565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b03908116600090815260766020908152604091829020825160a081018452815481526001820154928101929092526002015467ffffffffffffffff81169282019290925260ff600160401b830416151560608201526901000000000000000000909104909116608082015290565b6040516103a49190600060a082019050825182526020830151602083015267ffffffffffffffff60408401511660408301526060830151151560608301526001600160a01b03608084015116608083015292915050565b606d54610390906001600160a01b031681565b606e54610390906001600160a01b031681565b6103c06119dd565b6103c06107d8366004613e14565b611a9f565b606c54610390906001600160a01b031681565b6075546103e8565b6103c0610806366004614034565b611c44565b61040e610819366004613de6565b611cab565b606b54610390906001600160a01b031681565b61088d61083f366004613e14565b60766020526000908152604090208054600182015460029092015490919067ffffffffffffffff811690600160401b810460ff1690690100000000000000000090046001600160a01b031685565b60408051958652602086019490945267ffffffffffffffff9092169284019290925290151560608301526001600160a01b0316608082015260a0016103a4565b610390611cdb565b6104316108e3366004613e14565b6001600160a01b031660009081526076602052604090205490565b606f54610390906001600160a01b031681565b6103c061091f366004614072565b611d62565b61040e610932366004613e14565b60726020526000908152604090205460ff1681565b606a54610390906001600160a01b031681565b6109708161096784611e9f565b60010154611f00565b5050565b3360009081526072602052604090205460ff16806109945750607a5460ff165b6109d55760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b60448201526064015b60405180910390fd5b6109dd612005565b60006109e887611e9f565b905060006109f587611e9f565b9050610a05848260010154611f00565b610a156080850160608601613f4a565b8254610a329190600160801b900467ffffffffffffffff166140b4565b67ffffffffffffffff16431015610a8b5760405162461bcd60e51b815260206004820152600f60248201527f4245464f52455f444541444c494e45000000000000000000000000000000000060448201526064016109cc565b6073548714610adc5760405162461bcd60e51b815260206004820152601960248201527f505245565f4e4f545f4c41544553545f434f4e4649524d45440000000000000060448201526064016109cc565b8054600160401b900467ffffffffffffffff1615610d45576000610b066060860160408701613e14565b6001600160a01b031663fda2892e876040518263ffffffff1660e01b8152600401610b3391815260200190565b6101e060405180830381865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b75919061417e565b9050888160e0015114610bca5760405162461bcd60e51b815260206004820152600a60248201527f4e4f545f57494e4e45520000000000000000000000000000000000000000000060448201526064016109cc565b60018161016001516001811115610be357610be3613f9f565b14610c305760405162461bcd60e51b815260206004820152601260248201527f454447455f4e4f545f434f4e4649524d4544000000000000000000000000000060448201526064016109cc565b80610140015167ffffffffffffffff16600003610c8f5760405162461bcd60e51b815260206004820152601760248201527f5a45524f5f434f4e4649524d45445f41545f424c4f434b00000000000000000060448201526064016109cc565b606954610140820151610cc49174010000000000000000000000000000000000000000900467ffffffffffffffff16906140b4565b67ffffffffffffffff16431015610d435760405162461bcd60e51b815260206004820152602160248201527f4348414c4c454e47455f47524143455f504552494f445f4e4f545f504153534560448201527f440000000000000000000000000000000000000000000000000000000000000060648201526084016109cc565b505b610d5188888886612058565b5050505050505050565b6000610d6682611e9f565b5467ffffffffffffffff1692915050565b60007f000000000000000000000000000000000000000000000000000000000000000015610e01576000828152607b602052604090205480610dfb5760405162461bcd60e51b815260206004820152600c60248201527f4e4f5f415353455254494f4e000000000000000000000000000000000000000060448201526064016109cc565b92915050565b6000610e0c83611e9f565b6040805160c081018252825467ffffffffffffffff8082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b8304811615156060830152929350610ea292909184916080840191600160c81b9004166002811115610e7e57610e7e613f9f565b6002811115610e8f57610e8f613f9f565b815260200160018201548152505061226f565b54600160801b900467ffffffffffffffff1692915050565b919050565b607a5460ff1615610f125760405162461bcd60e51b815260206004820152601260248201527f57484954454c4953545f44495341424c4544000000000000000000000000000060448201526064016109cc565b610f1a6122d4565b610f665760405162461bcd60e51b815260206004820152601160248201527f56414c494441544f525f4e4f545f41464b00000000000000000000000000000060448201526064016109cc565b607a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b3360009081526072602052604090205460ff1680610fb35750607a5460ff165b610fef5760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b60448201526064016109cc565b610ff7612005565b611000336123e4565b61097033826124d5565b600061101582611e9f565b54600160c01b900460ff1692915050565b60006110418461103b3686900386018661438b565b846125d6565b90505b9392505050565b6000611055613cee565b60408051606081018252828152600160208201526000918101829052908061107e8184816125d6565b94505050505090565b3360009081526072602052604090205460ff16806110a75750607a5460ff165b6110e35760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b60448201526064016109cc565b6110eb612005565b80158061111c575060006110fe82611e9f565b54600160c81b900460ff16600281111561111a5761111a613f9f565b145b6111685760405162461bcd60e51b815260206004820152601760248201527f45585045435445445f415353455254494f4e5f5345454e00000000000000000060448201526064016109cc565b33600090815260766020526040902060020154600160401b900460ff166111be5760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b60448201526064016109cc565b33600090815260766020526040902054606083013511156112215760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f5354414b45000000000000000000000000000060448201526064016109cc565b6000611244833561123a36869003860160e0870161438b565b60208601356125d6565b90506112bd61125282611e9f565b6040805160c081018252825467ffffffffffffffff8082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b909104166002811115610e7e57610e7e613f9f565b33600090815260766020526040902060010154818114806112f1575060006112e482611e9f565b5467ffffffffffffffff16115b61133d5760405162461bcd60e51b815260206004820152601860248201527f5354414b45445f4f4e5f414e4f544845525f4252414e4348000000000000000060448201526064016109cc565b60008061134b86858761261a565b3360009081526076602052604090206001018290559092509050806113e757600061137585611e9f565b5461139190600160801b900467ffffffffffffffff16436143f2565b90506071548110156113e55760405162461bcd60e51b815260206004820152600a60248201527f54494d455f44454c54410000000000000000000000000000000000000000000060448201526064016109cc565b505b6113f082611e9f565b54600160c01b900460ff1661142057606f54607054611420916001600160a01b0391821691166060890135612f9e565b505050505050565b6001600160a01b03811661147e5760405162461bcd60e51b815260206004820152601860248201527f454d5054595f5749544844524157414c5f41444452455353000000000000000060448201526064016109cc565b6114888482613047565b6114928383611087565b61149b84613120565b50505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115415760405162461bcd60e51b815260206004820152603b60248201527f555550534e6f745570677261646561626c653a206d757374206e6f742062652060448201527f63616c6c6564207468726f7567682064656c656761746563616c6c000000000060648201526084016109cc565b507f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d90565b600061157182611e9f565b54600160401b900467ffffffffffffffff1692915050565b3360009081526072602052604090205460ff16806115a95750607a5460ff165b6115e55760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b60448201526064016109cc565b6115ed612005565b6115f6336123e4565b6115ff33613138565b565b611609612005565b607a5461010090046001600160a01b031633146116685760405162461bcd60e51b815260206004820152601260248201527f4e4f545f464153545f434f4e4649524d4552000000000000000000000000000060448201526064016109cc565b61149b84848484612058565b600061167e612005565b6000611689336131cd565b9050600081116116db5760405162461bcd60e51b815260206004820152601460248201527f4e4f5f46554e44535f544f5f574954484452415700000000000000000000000060448201526064016109cc565b6070546116f2906001600160a01b03163383612f9e565b905090565b6116ff612005565b8061174c5760405162461bcd60e51b815260206004820152601760248201527f45585045435445445f415353455254494f4e5f4841534800000000000000000060448201526064016109cc565b600061175782611e9f565b54600160c81b900460ff1690506000611787843561177d36879003870160e0880161438b565b60208701356125d6565b905061179561125282611e9f565b60008260028111156117a9576117a9613f9f565b036117f95760006117bb85838661261a565b5090506117c781611e9f565b54600160c01b900460ff166117f757606f546070546117f7916001600160a01b0391821691166060880135612f9e565b505b606b5461149b90849083906101a08801906001600160a01b03166316bf5579600161183161182c368d90038d0186614405565b61324e565b61183b9190614421565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815267ffffffffffffffff9091166004820152602401602060405180830381865afa158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c69190614442565b600060758267ffffffffffffffff16815481106118db576118db61445b565b6000918252602090912001546001600160a01b031692915050565b61190283838333611428565b505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915261194282611e9f565b6040805160c081018252825467ffffffffffffffff8082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b9091041660028111156119ad576119ad613f9f565b60028111156119be576119be613f9f565b81526020016001820154815250509050919050565b60006116f2613263565b607a5460ff1615611a305760405162461bcd60e51b815260206004820152601260248201527f57484954454c4953545f44495341424c4544000000000000000000000000000060448201526064016109cc565b467f000000000000000000000000000000000000000000000000000000000000000003610f665760405162461bcd60e51b815260206004820152601460248201527f434841494e5f49445f4e4f545f4348414e47454400000000000000000000000060448201526064016109cc565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611b3d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016109cc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611b6f613296565b6001600160a01b031614611beb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016109cc565b6001600160a01b038116611c415760405162461bcd60e51b815260206004820152601060248201527f4e4545445f5354414b455f544f4b454e0000000000000000000000000000000060448201526064016109cc565b50565b611c5d82611c573686900386018661438b565b836125d6565b841461149b5760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f415353455254494f4e5f484153480000000000000000000060448201526064016109cc565b60006001611cb883611e9f565b54600160c81b900460ff166002811115611cd457611cd4613f9f565b1492915050565b606b54604080517fee35f32700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ee35f3279160048083019260209291908290030181865afa158015611d3e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f29190614471565b3360009081526072602052604090205460ff1680611d825750607a5460ff165b611dbe5760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b60448201526064016109cc565b611dc6612005565b611dd082826132be565b61097081613120565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f051038f200000000000000000000000000000000000000000000000000000000179052905160009182918291606491611e4591906144b2565b600060405180830381855afa9150503d8060008114611e80576040519150601f19603f3d011682016040523d82523d6000602084013e611e85565b606091505b5091509150818015611e98575080516020145b9250505090565b600081611eee5760405162461bcd60e51b815260206004820152601b60248201527f415353455254494f4e5f49445f43414e4e4f545f42455f5a45524f000000000060448201526064016109cc565b50600090815260746020526040902090565b611fb782356020840135611f1a6060860160408701613e14565b611f2a6080870160608801613f4a565b611f3a60a0880160808901613f4a565b60408051602080820197909752808201959095526bffffffffffffffffffffffff19606094851b16938501939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b81166074860152911b16607c8301528051606481840301815260849092019052805191012090565b81146109705760405162461bcd60e51b815260206004820152601460248201527f434f4e4649475f484153485f4d49534d4154434800000000000000000000000060448201526064016109cc565b60335460ff16156115ff5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016109cc565b600061206385611e9f565b905060018154600160c81b900460ff16600281111561208457612084613f9f565b146120d15760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f50454e44494e4700000000000000000000000000000000000000000060448201526064016109cc565b6120e48461103b3686900386018661438b565b85146121325760405162461bcd60e51b815260206004820152600c60248201527f434f4e4649524d5f44415441000000000000000000000000000000000000000060448201526064016109cc565b600061214b61214636869003860186614405565b61338b565b9050600061216661216136879003870187614405565b613396565b606c546040517fa04cee6000000000000000000000000000000000000000000000000000000000815260048101839052602481018590529192506001600160a01b03169063a04cee6090604401600060405180830381600087803b1580156121cd57600080fd5b505af11580156121e1573d6000803e3d6000fd5b50505060738890555082547fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff167902000000000000000000000000000000000000000000000000001783556040805183815260208101839052815189927ffc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c928290030190a250505050505050565b60008160800151600281111561228757612287613f9f565b03611c415760405162461bcd60e51b815260206004820152601360248201527f415353455254494f4e5f4e4f545f45584953540000000000000000000000000060448201526064016109cc565b6000806122e86122e360735490565b611e9f565b6040805160c081018252825467ffffffffffffffff8082168352600160401b820481166020840152600160801b8204169282019290925260ff600160c01b83048116151560608301529092916080840191600160c81b90910416600281111561235357612353613f9f565b600281111561236457612364613f9f565b81526020016001820154815250509050806040015167ffffffffffffffff1660000361239257600091505090565b805167ffffffffffffffff16156123c657805143906123bf90620313809067ffffffffffffffff166144ce565b1091505090565b4362031380826040015167ffffffffffffffff166123bf91906144ce565b6001600160a01b038116600090815260766020526040902060020154600160401b900460ff166124435760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b60448201526064016109cc565b6001600160a01b0381166000908152607660205260408120600101546073549091908214908061247284611e9f565b5467ffffffffffffffff1611905081806124895750805b61149b5760405162461bcd60e51b815260206004820152600c60248201527f5354414b455f414354495645000000000000000000000000000000000000000060448201526064016109cc565b6001600160a01b03808316600090815260766020526040812060028101548154929391926901000000000000000000909104909116908085111561255b5760405162461bcd60e51b815260206004820152601060248201527f544f4f5f4c4954544c455f5354414b450000000000000000000000000000000060448201526064016109cc565b600061256786836143f2565b868555905061257683826133a2565b826001600160a01b0316876001600160a01b03167fd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb884896040516125c4929190918252602082015260400190565b60405180910390a39695505050505050565b6000611041846125e585613447565b604080516020808201949094528082019290925260608083018790528151808403909101815260809092019052805191012090565b60008061262d6040860161096786611e9f565b6001612641610240870161022088016144e1565b600281111561265257612652613f9f565b14806126805750600261266d610240870161022088016144e1565b600281111561267e5761267e613f9f565b145b6126cc5760405162461bcd60e51b815260206004820152601060248201527f4241445f41465445525f5354415455530000000000000000000000000000000060448201526064016109cc565b836126ee86356126e436899003890160e08a0161438b565b60208901356125d6565b1461273b5760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f4245464f52455f535441544500000000000000000000000060448201526064016109cc565b600161274f610180870161016088016144e1565b600281111561276057612760613f9f565b146127ad5760405162461bcd60e51b815260206004820152600f60248201527f4241445f505245565f535441545553000000000000000000000000000000000060448201526064016109cc565b60006127b885611e9f565b90506000806101a0880160e08901826127d18383613477565b121561281f5760405162461bcd60e51b815260206004820152600f60248201527f494e424f585f4241434b5741524453000000000000000000000000000000000060448201526064016109cc565b600061284561283460e08d0160c08e01613f4a565b849067ffffffffffffffff16613584565b905060008113156128985760405162461bcd60e51b815260206004820152600d60248201527f494e424f585f544f4f5f4641520000000000000000000000000000000000000060448201526064016109cc565b60026128ac6102408d016102208e016144e1565b60028111156128bd576128bd613f9f565b141580156128cb5750600081125b1561292d576001965060006128e08484613477565b1361292d5760405162461bcd60e51b815260206004820152601360248201527f4f564552464c4f575f5354414e445354494c4c0000000000000000000000000060448201526064016109cc565b606b54604080517e84120c00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916284120c9160048083019260209291908290030181865afa15801561298e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b29190614442565b905060006129c08583613584565b1315612a0e5760405162461bcd60e51b815260206004820152600e60248201527f494e424f585f504153545f454e4400000000000000000000000000000000000060448201526064016109cc565b80612a1f60e08e0160c08f01613f4a565b67ffffffffffffffff161115612a775760405162461bcd60e51b815260206004820152601360248201527f494e424f585f4e4f545f504f50554c415445440000000000000000000000000060448201526064016109cc565b6000612a8b61182c36879003870187614405565b67ffffffffffffffff169050818103612ab057612aa98260016144ce565b9650612ab4565b8196505b80600003612b045760405162461bcd60e51b815260206004820152601160248201527f454d5054595f494e424f585f434f554e5400000000000000000000000000000060448201526064016109cc565b606b546001600160a01b03166316bf5579612b206001846143f2565b6040518263ffffffff1660e01b8152600401612b3e91815260200190565b602060405180830381865afa158015612b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7f9190614442565b95505050505050612b9f87896101a001803603810190611c57919061438b565b945085851480612bad575085155b612bf95760405162461bcd60e51b815260206004820152601960248201527f554e45585045435445445f415353455254494f4e5f484153480000000000000060448201526064016109cc565b6000612c0486611e9f565b54600160c81b900460ff166002811115612c2057612c20613f9f565b14612c6d5760405162461bcd60e51b815260206004820152600e60248201527f415353455254494f4e5f5345454e00000000000000000000000000000000000060448201526064016109cc565b825460685460675460695460665460408051602080820196909652808201949094526bffffffffffffffffffffffff19606093841b16838501527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116607486015288831b16607c85015280516064818603018152608485018083528151918701919091206101448601835260009182905260a4860182905260c4860182905260e4860182905261010486018290526101249095018190528151928301825280835294820185905267ffffffffffffffff43811691830191909152909416159084015260a08301526001608083015250612d6b84613613565b60008681526074602090815260409182902083518154928501519385015160608601511515600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff928316600160801b02167fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff968316600160401b027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909616929093169190911793909317939093169290921717808255608083015183929182907fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff16600160c81b836002811115612e7357612e73613f9f565b021790555060a0820151816001015590505087867f901c3aee23cf4478825462caaab375c606ab83516060388344f06503407536308b8587606854606754606960009054906101000a90046001600160a01b0316606660009054906101000a900467ffffffffffffffff16604051612ef19796959493929190614574565b60405180910390a37f000000000000000000000000000000000000000000000000000000000000000015612f925760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f829190614442565b6000878152607b60205260409020555b50505050935093915050565b6040516001600160a01b0383166024820152604481018290526119029084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613697565b3360009081526072602052604090205460ff16806130675750607a5460ff165b6130a35760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b60448201526064016109cc565b6130ab612005565b33600090815260766020526040902060020154600160401b900460ff16156131155760405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f5354414b454400000000000000000000000000000000000060448201526064016109cc565b61097033838361377c565b607054611c41906001600160a01b03163330846138ee565b6001600160a01b0380821660009081526076602052604090206002810154815491926901000000000000000000909104169061317482826133a2565b61317d8461393f565b60408051828152600060208201526001600160a01b0380851692908716917fd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb891015b60405180910390a350505050565b6001600160a01b03811660009081526077602052604081208054908290556078805482919084906131ff9084906143f2565b909155505060408051828152600060208201526001600160a01b038516917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a292915050565b6020810151600090815b602002015192915050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b60007f2b1dbce74324248c222f0ec2d5ed7bd323cfc425b336f0253c5ccfda7265546d613287565b3360009081526072602052604090205460ff16806132de5750607a5460ff165b61331a5760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fab20a624a220aa27a960991b60448201526064016109cc565b613322612005565b6001600160a01b038216600090815260766020526040902060020154600160401b900460ff166133815760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b60448201526064016109cc565b6109708282613b3d565b805160009081613258565b80516000906001613258565b6001600160a01b038216600090815260776020526040812054906133c683836144ce565b6001600160a01b03851660009081526077602052604081208290556078805492935085929091906133f89084906144ce565b909155505060408051838152602081018390526001600160a01b038616917fa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2910160405180910390a250505050565b60008160405160200161345a9190614660565b604051602081830303815290604052805190602001209050919050565b60008061348c61182c36869003860186614405565b905060006134a261182c36869003860186614405565b90508067ffffffffffffffff168267ffffffffffffffff1610156134cc5760001992505050610dfb565b8067ffffffffffffffff168267ffffffffffffffff1611156134f357600192505050610dfb565b600061350c61350736889003880188614405565b613bcb565b9050600061352261350736889003880188614405565b90508067ffffffffffffffff168267ffffffffffffffff16101561354e57600019945050505050610dfb565b8067ffffffffffffffff168267ffffffffffffffff161115613577576001945050505050610dfb565b6000945050505050610dfb565b60008061359961182c36869003860186614405565b9050828167ffffffffffffffff1610156135b857600019915050610dfb565b828167ffffffffffffffff1611156135d4576001915050610dfb565b60006135e861350736879003870187614405565b67ffffffffffffffff161115613602576001915050610dfb565b6000915050610dfb565b5092915050565b805467ffffffffffffffff1660000361364357805467ffffffffffffffff19164367ffffffffffffffff16179055565b8054600160401b900467ffffffffffffffff16600003611c415780547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16600160401b4367ffffffffffffffff1602179055565b60006136ec826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613bda9092919063ffffffff16565b805190915015611902578080602001905181019061370a91906146ea565b6119025760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109cc565b6075805460018082019092557f9a8d93986a7b9e6294572ea6736696119c195c1a9f5eae642d3c5fcd44e49dea810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038781169182179092556040805160a081018252878152607354602080830191825267ffffffffffffffff808816848601908152606085018a81528b89166080870181815260008a8152607687528981209851895596519c88019c909c5591516002909601805491519b51969093167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090911617600160401b9a15159a909a02999099177fffffff0000000000000000000000000000000000000000ffffffffffffffffff166901000000000000000000949097169390930295909517909155815190815292830187905292939290917fd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb891016131bf565b6040516001600160a01b038085166024830152831660448201526064810182905261149b9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612fe3565b6001600160a01b03811660009081526076602052604090206002810154600160401b900460ff1661399f5760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b60448201526064016109cc565b60028101546075805467ffffffffffffffff909216916139c1906001906143f2565b815481106139d1576139d161445b565b600091825260209091200154607580546001600160a01b039092169167ffffffffffffffff8416908110613a0757613a0761445b565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806076600060758467ffffffffffffffff1681548110613a5757613a5761445b565b6000918252602080832091909101546001600160a01b031683528201929092526040019020600201805467ffffffffffffffff191667ffffffffffffffff929092169190911790556075805480613ab057613ab0614705565b60008281526020808220830160001990810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559092019092556001600160a01b039490941681526076909352505060408120818155600181019190915560020180547fffffff0000000000000000000000000000000000000000000000000000000000169055565b6001600160a01b038216600090815260766020526040812080549091613b6384836144ce565b808455600284015460408051858152602081018490529293506001600160a01b036901000000000000000000909204821692918816917fd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8910160405180910390a35050505050565b60208101516000906001613258565b60606110418484600085856001600160a01b0385163b613c3c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109cc565b600080866001600160a01b03168587604051613c5891906144b2565b60006040518083038185875af1925050503d8060008114613c95576040519150601f19603f3d011682016040523d82523d6000602084013e613c9a565b606091505b5091509150613caa828286613cb5565b979650505050505050565b60608315613cc4575081611044565b825115613cd45782518084602001fd5b8160405162461bcd60e51b81526004016109cc919061471b565b6040518060400160405280613d01613d13565b8152602001613d0e613d13565b905290565b60405180604001604052806002906020820280368337509192915050565b600060a08284031215613d4357600080fd5b50919050565b60008060c08385031215613d5c57600080fd5b82359150613d6d8460208501613d31565b90509250929050565b600060c08284031215613d4357600080fd5b6000806000806000806101e08789031215613da257600080fd5b8635955060208701359450613dba8860408901613d76565b93506101008701359250613dd2886101208901613d31565b91506101c087013590509295509295509295565b600060208284031215613df857600080fd5b5035919050565b6001600160a01b0381168114611c4157600080fd5b600060208284031215613e2657600080fd5b813561104481613dff565b60008060006101008486031215613e4757600080fd5b83359250613e588560208601613d76565b915060e084013590509250925092565b60006102608284031215613d4357600080fd5b6000806102808385031215613e8f57600080fd5b613e998484613e68565b94610260939093013593505050565b6000806000806102c08587031215613ebf57600080fd5b84359350613ed08660208701613e68565b925061028085013591506102a0850135613ee981613dff565b939692955090935050565b6000806000806101208587031215613f0b57600080fd5b8435935060208501359250613f238660408701613d76565b939692955092936101000135925050565b67ffffffffffffffff81168114611c4157600080fd5b600060208284031215613f5c57600080fd5b813561104481613f34565b60008060006102a08486031215613f7d57600080fd5b83359250613f8e8560208601613e68565b915061028084013590509250925092565b634e487b7160e01b600052602160045260246000fd5b60038110611c4157634e487b7160e01b600052602160045260246000fd5b600060c08201905067ffffffffffffffff80845116835280602085015116602084015280604085015116604084015250606083015115156060830152608083015161401d81613fb5565b8060808401525060a083015160a083015292915050565b600080600080610120858703121561404b57600080fd5b8435935061405c8660208701613d76565b939693955050505060e082013591610100013590565b6000806040838503121561408557600080fd5b823561409081613dff565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81811683821601908082111561360c5761360c61409e565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561410f5761410f6140d5565b60405290565b6040805190810167ffffffffffffffff8111828210171561410f5761410f6140d5565b8051610eba81613dff565b8051610eba81613f34565b805160028110610eba57600080fd5b805160ff81168114610eba57600080fd5b80518015158114610eba57600080fd5b60006101e0828403121561419157600080fd5b6141996140eb565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101006141f1818501614138565b90820152610120614203848201614143565b90820152610140614215848201614143565b9082015261016061422784820161414e565b9082015261018061423984820161415d565b908201526101a061424b84820161416e565b908201526101c061425d848201614143565b908201529392505050565b600082601f83011261427957600080fd5b6040516040810181811067ffffffffffffffff8211171561429c5761429c6140d5565b80604052508060408401858111156142b357600080fd5b845b818110156142d65780356142c881613f34565b8352602092830192016142b5565b509195945050505050565b6000608082840312156142f357600080fd5b6040516040810181811067ffffffffffffffff82111715614316576143166140d5565b604052905080601f8301841361432b57600080fd5b614333614115565b80604085018681111561434557600080fd5b855b8181101561435f578035845260209384019301614347565b5081845261436d8782614268565b60208501525050505092915050565b803560038110610eba57600080fd5b600060c0828403121561439d57600080fd5b6040516060810181811067ffffffffffffffff821117156143c0576143c06140d5565b6040526143cd84846142e1565b81526143db6080840161437c565b602082015260a09290920135604083015250919050565b81810381811115610dfb57610dfb61409e565b60006080828403121561441757600080fd5b61104483836142e1565b67ffffffffffffffff82811682821603908082111561360c5761360c61409e565b60006020828403121561445457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561448357600080fd5b815161104481613dff565b60005b838110156144a9578181015183820152602001614491565b50506000910152565b600082516144c481846020870161448e565b9190910192915050565b80820180821115610dfb57610dfb61409e565b6000602082840312156144f357600080fd5b6110448261437c565b61450581613fb5565b9052565b6040818337604082016040820160005b600281101561454c57813561452d81613f34565b67ffffffffffffffff1683526020928301929190910190600101614519565b50505061455b6080820161437c565b61456481613fb5565b608083015260a090810135910152565b6000610320820190508835825260208901356020830152604089013560408301526060890135606083015260808901356145ad81613dff565b6001600160a01b0316608083015260a08901356145c981613f34565b67ffffffffffffffff90811660a084015260c08a0135906145e982613f34565b1660c08301526145ff60e0808401908b01614509565b6101a0614610818401828c01614509565b508761026083015286610280830152856102a0830152846102c08301526146436102e08301856001600160a01b03169052565b67ffffffffffffffff831661030083015298975050505050505050565b8151805160c0830191908360005b600281101561468d57825182526020928301929091019060010161466e565b505050602090810151906040840160005b60028110156146c557835167ffffffffffffffff168252928201929082019060010161469e565b505084015190506146d960808401826144fc565b50604083015160a083015292915050565b6000602082840312156146fc57600080fd5b6110448261416e565b634e487b7160e01b600052603160045260246000fd5b602081526000825180602084015261473a81604085016020870161448e565b601f01601f1916919091016040019291505056fea264697066735822122093e7b3e33da96eda59099f24a32c892bf9bd62ea5cad77b54e6435aeb3dd1f8e64736f6c63430008110033",
}

// RollupUserLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use RollupUserLogicMetaData.ABI instead.
var RollupUserLogicABI = RollupUserLogicMetaData.ABI

// RollupUserLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RollupUserLogicMetaData.Bin instead.
var RollupUserLogicBin = RollupUserLogicMetaData.Bin

// DeployRollupUserLogic deploys a new Ethereum contract, binding an instance of RollupUserLogic to it.
func DeployRollupUserLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RollupUserLogic, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RollupUserLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// RollupUserLogic is an auto generated Go binding around an Ethereum contract.
type RollupUserLogic struct {
	RollupUserLogicCaller     // Read-only binding to the contract
	RollupUserLogicTransactor // Write-only binding to the contract
	RollupUserLogicFilterer   // Log filterer for contract events
}

// RollupUserLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type RollupUserLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RollupUserLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RollupUserLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RollupUserLogicSession struct {
	Contract     *RollupUserLogic  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RollupUserLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RollupUserLogicCallerSession struct {
	Contract *RollupUserLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// RollupUserLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RollupUserLogicTransactorSession struct {
	Contract     *RollupUserLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// RollupUserLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type RollupUserLogicRaw struct {
	Contract *RollupUserLogic // Generic contract binding to access the raw methods on
}

// RollupUserLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RollupUserLogicCallerRaw struct {
	Contract *RollupUserLogicCaller // Generic read-only contract binding to access the raw methods on
}

// RollupUserLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RollupUserLogicTransactorRaw struct {
	Contract *RollupUserLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRollupUserLogic creates a new instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogic(address common.Address, backend bind.ContractBackend) (*RollupUserLogic, error) {
	contract, err := bindRollupUserLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogic{RollupUserLogicCaller: RollupUserLogicCaller{contract: contract}, RollupUserLogicTransactor: RollupUserLogicTransactor{contract: contract}, RollupUserLogicFilterer: RollupUserLogicFilterer{contract: contract}}, nil
}

// NewRollupUserLogicCaller creates a new read-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicCaller(address common.Address, caller bind.ContractCaller) (*RollupUserLogicCaller, error) {
	contract, err := bindRollupUserLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicCaller{contract: contract}, nil
}

// NewRollupUserLogicTransactor creates a new write-only instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*RollupUserLogicTransactor, error) {
	contract, err := bindRollupUserLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicTransactor{contract: contract}, nil
}

// NewRollupUserLogicFilterer creates a new log filterer instance of RollupUserLogic, bound to a specific deployed contract.
func NewRollupUserLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*RollupUserLogicFilterer, error) {
	contract, err := bindRollupUserLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicFilterer{contract: contract}, nil
}

// bindRollupUserLogic binds a generic wrapper to an already deployed contract.
func bindRollupUserLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RollupUserLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.RollupUserLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RollupUserLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RollupUserLogic *RollupUserLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RollupUserLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RollupUserLogic *RollupUserLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.contract.Transact(opts, method, params...)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) VALIDATORAFKBLOCKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "VALIDATOR_AFK_BLOCKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// VALIDATORAFKBLOCKS is a free data retrieval call binding the contract method 0x4ceccfe5.
//
// Solidity: function VALIDATOR_AFK_BLOCKS() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) VALIDATORAFKBLOCKS() (*big.Int, error) {
	return _RollupUserLogic.Contract.VALIDATORAFKBLOCKS(&_RollupUserLogic.CallOpts)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupUserLogic *RollupUserLogicCaller) StakerMap(opts *bind.CallOpts, arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "_stakerMap", arg0)

	outstruct := new(struct {
		AmountStaked          *big.Int
		LatestStakedAssertion [32]byte
		Index                 uint64
		IsStaked              bool
		WithdrawalAddress     common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AmountStaked = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LatestStakedAssertion = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Index = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.IsStaked = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.WithdrawalAddress = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupUserLogic *RollupUserLogicSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// StakerMap is a free data retrieval call binding the contract method 0xe8bd4922.
//
// Solidity: function _stakerMap(address ) view returns(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerMap(arg0 common.Address) (struct {
	AmountStaked          *big.Int
	LatestStakedAssertion [32]byte
	Index                 uint64
	IsStaked              bool
	WithdrawalAddress     common.Address
}, error) {
	return _RollupUserLogic.Contract.StakerMap(&_RollupUserLogic.CallOpts, arg0)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) AmountStaked(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "amountStaked", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AmountStaked is a free data retrieval call binding the contract method 0xef40a670.
//
// Solidity: function amountStaked(address staker) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) AmountStaked(staker common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.AmountStaked(&_RollupUserLogic.CallOpts, staker)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) AnyTrustFastConfirmer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "anyTrustFastConfirmer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupUserLogic.Contract.AnyTrustFastConfirmer(&_RollupUserLogic.CallOpts)
}

// AnyTrustFastConfirmer is a free data retrieval call binding the contract method 0x55840a58.
//
// Solidity: function anyTrustFastConfirmer() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) AnyTrustFastConfirmer() (common.Address, error) {
	return _RollupUserLogic.Contract.AnyTrustFastConfirmer(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) BaseStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "baseStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// BaseStake is a free data retrieval call binding the contract method 0x76e7e23b.
//
// Solidity: function baseStake() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) BaseStake() (*big.Int, error) {
	return _RollupUserLogic.Contract.BaseStake(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Bridge() (common.Address, error) {
	return _RollupUserLogic.Contract.Bridge(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) ChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChainId() (*big.Int, error) {
	return _RollupUserLogic.Contract.ChainId(&_RollupUserLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ChallengeGracePeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "challengeGracePeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ChallengeGracePeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ChallengeGracePeriodBlocks is a free data retrieval call binding the contract method 0x3be680ea.
//
// Solidity: function challengeGracePeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChallengeGracePeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ChallengeGracePeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ChallengeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "challengeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ChallengeManager is a free data retrieval call binding the contract method 0x023a96fe.
//
// Solidity: function challengeManager() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ChallengeManager() (common.Address, error) {
	return _RollupUserLogic.Contract.ChallengeManager(&_RollupUserLogic.CallOpts)
}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x33635fc2.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ComputeAssertionHash(opts *bind.CallOpts, prevAssertionHash [32]byte, state AssertionState, inboxAcc [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "computeAssertionHash", prevAssertionHash, state, inboxAcc)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x33635fc2.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ComputeAssertionHash(prevAssertionHash [32]byte, state AssertionState, inboxAcc [32]byte) ([32]byte, error) {
	return _RollupUserLogic.Contract.ComputeAssertionHash(&_RollupUserLogic.CallOpts, prevAssertionHash, state, inboxAcc)
}

// ComputeAssertionHash is a free data retrieval call binding the contract method 0x33635fc2.
//
// Solidity: function computeAssertionHash(bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 inboxAcc) pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ComputeAssertionHash(prevAssertionHash [32]byte, state AssertionState, inboxAcc [32]byte) ([32]byte, error) {
	return _RollupUserLogic.Contract.ComputeAssertionHash(&_RollupUserLogic.CallOpts, prevAssertionHash, state, inboxAcc)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) ConfirmPeriodBlocks(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "confirmPeriodBlocks")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// ConfirmPeriodBlocks is a free data retrieval call binding the contract method 0x2e7acfa6.
//
// Solidity: function confirmPeriodBlocks() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) ConfirmPeriodBlocks() (uint64, error) {
	return _RollupUserLogic.Contract.ConfirmPeriodBlocks(&_RollupUserLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) GenesisAssertionHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "genesisAssertionHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupUserLogic.Contract.GenesisAssertionHash(&_RollupUserLogic.CallOpts)
}

// GenesisAssertionHash is a free data retrieval call binding the contract method 0x353325e0.
//
// Solidity: function genesisAssertionHash() pure returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) GenesisAssertionHash() ([32]byte, error) {
	return _RollupUserLogic.Contract.GenesisAssertionHash(&_RollupUserLogic.CallOpts)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicCaller) GetAssertion(opts *bind.CallOpts, assertionHash [32]byte) (AssertionNode, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getAssertion", assertionHash)

	if err != nil {
		return *new(AssertionNode), err
	}

	out0 := *abi.ConvertType(out[0], new(AssertionNode)).(*AssertionNode)

	return out0, err

}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupUserLogic.Contract.GetAssertion(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertion is a free data retrieval call binding the contract method 0x88302884.
//
// Solidity: function getAssertion(bytes32 assertionHash) view returns((uint64,uint64,uint64,bool,uint8,bytes32))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetAssertion(assertionHash [32]byte) (AssertionNode, error) {
	return _RollupUserLogic.Contract.GetAssertion(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) GetAssertionCreationBlockForLogLookup(opts *bind.CallOpts, assertionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getAssertionCreationBlockForLogLookup", assertionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetAssertionCreationBlockForLogLookup is a free data retrieval call binding the contract method 0x13c56ca7.
//
// Solidity: function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetAssertionCreationBlockForLogLookup(assertionHash [32]byte) (*big.Int, error) {
	return _RollupUserLogic.Contract.GetAssertionCreationBlockForLogLookup(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) GetFirstChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getFirstChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetFirstChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetFirstChildCreationBlock is a free data retrieval call binding the contract method 0x11715585.
//
// Solidity: function getFirstChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetFirstChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetFirstChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) GetSecondChildCreationBlock(opts *bind.CallOpts, assertionHash [32]byte) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getSecondChildCreationBlock", assertionHash)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetSecondChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetSecondChildCreationBlock is a free data retrieval call binding the contract method 0x56bbc9e6.
//
// Solidity: function getSecondChildCreationBlock(bytes32 assertionHash) view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetSecondChildCreationBlock(assertionHash [32]byte) (uint64, error) {
	return _RollupUserLogic.Contract.GetSecondChildCreationBlock(&_RollupUserLogic.CallOpts, assertionHash)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupUserLogic *RollupUserLogicCaller) GetStaker(opts *bind.CallOpts, staker common.Address) (IRollupCoreStaker, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStaker", staker)

	if err != nil {
		return *new(IRollupCoreStaker), err
	}

	out0 := *abi.ConvertType(out[0], new(IRollupCoreStaker)).(*IRollupCoreStaker)

	return out0, err

}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupUserLogic *RollupUserLogicSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStaker is a free data retrieval call binding the contract method 0xa23c44b1.
//
// Solidity: function getStaker(address staker) view returns((uint256,bytes32,uint64,bool,address))
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStaker(staker common.Address) (IRollupCoreStaker, error) {
	return _RollupUserLogic.Contract.GetStaker(&_RollupUserLogic.CallOpts, staker)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) GetStakerAddress(opts *bind.CallOpts, stakerNum uint64) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "getStakerAddress", stakerNum)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// GetStakerAddress is a free data retrieval call binding the contract method 0x6ddd3744.
//
// Solidity: function getStakerAddress(uint64 stakerNum) view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) GetStakerAddress(stakerNum uint64) (common.Address, error) {
	return _RollupUserLogic.Contract.GetStakerAddress(&_RollupUserLogic.CallOpts, stakerNum)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Inbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Inbox(&_RollupUserLogic.CallOpts)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) Initialize(opts *bind.CallOpts, _stakeToken common.Address) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "initialize", _stakeToken)

	if err != nil {
		return err
	}

	return err

}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// Initialize is a free data retrieval call binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _stakeToken) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) Initialize(_stakeToken common.Address) error {
	return _RollupUserLogic.Contract.Initialize(&_RollupUserLogic.CallOpts, _stakeToken)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsFirstChild(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isFirstChild", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsFirstChild(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsFirstChild is a free data retrieval call binding the contract method 0x30836228.
//
// Solidity: function isFirstChild(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsFirstChild(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsFirstChild(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsPending(opts *bind.CallOpts, assertionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isPending", assertionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsPending(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsPending is a free data retrieval call binding the contract method 0xe531d8c7.
//
// Solidity: function isPending(bytes32 assertionHash) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsPending(assertionHash [32]byte) (bool, error) {
	return _RollupUserLogic.Contract.IsPending(&_RollupUserLogic.CallOpts, assertionHash)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsStaked(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isStaked", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsStaked is a free data retrieval call binding the contract method 0x6177fd18.
//
// Solidity: function isStaked(address staker) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsStaked(staker common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsStaked(&_RollupUserLogic.CallOpts, staker)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) IsValidator(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "isValidator", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address ) view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) IsValidator(arg0 common.Address) (bool, error) {
	return _RollupUserLogic.Contract.IsValidator(&_RollupUserLogic.CallOpts, arg0)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) LatestConfirmed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestConfirmed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) LatestConfirmed() ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestConfirmed is a free data retrieval call binding the contract method 0x65f7f80d.
//
// Solidity: function latestConfirmed() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestConfirmed() ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestConfirmed(&_RollupUserLogic.CallOpts)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) LatestStakedAssertion(opts *bind.CallOpts, staker common.Address) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "latestStakedAssertion", staker)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestStakedAssertion(&_RollupUserLogic.CallOpts, staker)
}

// LatestStakedAssertion is a free data retrieval call binding the contract method 0x2abdd230.
//
// Solidity: function latestStakedAssertion(address staker) view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) LatestStakedAssertion(staker common.Address) ([32]byte, error) {
	return _RollupUserLogic.Contract.LatestStakedAssertion(&_RollupUserLogic.CallOpts, staker)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) LoserStakeEscrow(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "loserStakeEscrow")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// LoserStakeEscrow is a free data retrieval call binding the contract method 0xf065de3f.
//
// Solidity: function loserStakeEscrow() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) LoserStakeEscrow() (common.Address, error) {
	return _RollupUserLogic.Contract.LoserStakeEscrow(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) MinimumAssertionPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "minimumAssertionPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// MinimumAssertionPeriod is a free data retrieval call binding the contract method 0x45e38b64.
//
// Solidity: function minimumAssertionPeriod() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) MinimumAssertionPeriod() (*big.Int, error) {
	return _RollupUserLogic.Contract.MinimumAssertionPeriod(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Outbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "outbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Outbox is a free data retrieval call binding the contract method 0xce11e6ab.
//
// Solidity: function outbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Outbox() (common.Address, error) {
	return _RollupUserLogic.Contract.Outbox(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) Owner() (common.Address, error) {
	return _RollupUserLogic.Contract.Owner(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) Paused() (bool, error) {
	return _RollupUserLogic.Contract.Paused(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RollupUserLogic.Contract.ProxiableUUID(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) RollupDeploymentBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupDeploymentBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupDeploymentBlock is a free data retrieval call binding the contract method 0x1b1689e9.
//
// Solidity: function rollupDeploymentBlock() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupDeploymentBlock() (*big.Int, error) {
	return _RollupUserLogic.Contract.RollupDeploymentBlock(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) RollupEventInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "rollupEventInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// RollupEventInbox is a free data retrieval call binding the contract method 0xaa38a6e7.
//
// Solidity: function rollupEventInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) RollupEventInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.RollupEventInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) SequencerInbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "sequencerInbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// SequencerInbox is a free data retrieval call binding the contract method 0xee35f327.
//
// Solidity: function sequencerInbox() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) SequencerInbox() (common.Address, error) {
	return _RollupUserLogic.Contract.SequencerInbox(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakeToken() (common.Address, error) {
	return _RollupUserLogic.Contract.StakeToken(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCaller) StakerCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "stakerCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() view returns(uint64)
func (_RollupUserLogic *RollupUserLogicCallerSession) StakerCount() (uint64, error) {
	return _RollupUserLogic.Contract.StakerCount(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) TotalWithdrawableFunds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "totalWithdrawableFunds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// TotalWithdrawableFunds is a free data retrieval call binding the contract method 0x71ef232c.
//
// Solidity: function totalWithdrawableFunds() view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) TotalWithdrawableFunds() (*big.Int, error) {
	return _RollupUserLogic.Contract.TotalWithdrawableFunds(&_RollupUserLogic.CallOpts)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicCaller) ValidateAssertionHash(opts *bind.CallOpts, assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validateAssertionHash", assertionHash, state, prevAssertionHash, inboxAcc)

	if err != nil {
		return err
	}

	return err

}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupUserLogic.Contract.ValidateAssertionHash(&_RollupUserLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateAssertionHash is a free data retrieval call binding the contract method 0xe51019a6.
//
// Solidity: function validateAssertionHash(bytes32 assertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidateAssertionHash(assertionHash [32]byte, state AssertionState, prevAssertionHash [32]byte, inboxAcc [32]byte) error {
	return _RollupUserLogic.Contract.ValidateAssertionHash(&_RollupUserLogic.CallOpts, assertionHash, state, prevAssertionHash, inboxAcc)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicCaller) ValidateConfig(opts *bind.CallOpts, assertionHash [32]byte, configData ConfigData) error {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validateConfig", assertionHash, configData)

	if err != nil {
		return err
	}

	return err

}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupUserLogic.Contract.ValidateConfig(&_RollupUserLogic.CallOpts, assertionHash, configData)
}

// ValidateConfig is a free data retrieval call binding the contract method 0x04972af9.
//
// Solidity: function validateConfig(bytes32 assertionHash, (bytes32,uint256,address,uint64,uint64) configData) view returns()
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidateConfig(assertionHash [32]byte, configData ConfigData) error {
	return _RollupUserLogic.Contract.ValidateConfig(&_RollupUserLogic.CallOpts, assertionHash, configData)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWalletCreator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWalletCreator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWalletCreator is a free data retrieval call binding the contract method 0xbc45e0ae.
//
// Solidity: function validatorWalletCreator() view returns(address)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWalletCreator() (common.Address, error) {
	return _RollupUserLogic.Contract.ValidatorWalletCreator(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCaller) ValidatorWhitelistDisabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "validatorWhitelistDisabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// ValidatorWhitelistDisabled is a free data retrieval call binding the contract method 0x12ab3d3b.
//
// Solidity: function validatorWhitelistDisabled() view returns(bool)
func (_RollupUserLogic *RollupUserLogicCallerSession) ValidatorWhitelistDisabled() (bool, error) {
	return _RollupUserLogic.Contract.ValidatorWhitelistDisabled(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCaller) WasmModuleRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "wasmModuleRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WasmModuleRoot is a free data retrieval call binding the contract method 0x8ee1a126.
//
// Solidity: function wasmModuleRoot() view returns(bytes32)
func (_RollupUserLogic *RollupUserLogicCallerSession) WasmModuleRoot() ([32]byte, error) {
	return _RollupUserLogic.Contract.WasmModuleRoot(&_RollupUserLogic.CallOpts)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCaller) WithdrawableFunds(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RollupUserLogic.contract.Call(opts, &out, "withdrawableFunds", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// WithdrawableFunds is a free data retrieval call binding the contract method 0x2f30cabd.
//
// Solidity: function withdrawableFunds(address user) view returns(uint256)
func (_RollupUserLogic *RollupUserLogicCallerSession) WithdrawableFunds(user common.Address) (*big.Int, error) {
	return _RollupUserLogic.Contract.WithdrawableFunds(&_RollupUserLogic.CallOpts, user)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) AddToDeposit(opts *bind.TransactOpts, stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "addToDeposit", stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// AddToDeposit is a paid mutator transaction binding the contract method 0xf3f0a03e.
//
// Solidity: function addToDeposit(address stakerAddress, uint256 tokenAmount) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) AddToDeposit(stakerAddress common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.AddToDeposit(&_RollupUserLogic.TransactOpts, stakerAddress, tokenAmount)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "confirmAssertion", assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// ConfirmAssertion is a paid mutator transaction binding the contract method 0x10b98a35.
//
// Solidity: function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 winningEdgeId, (bytes32,uint256,address,uint64,uint64) prevConfig, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ConfirmAssertion(assertionHash [32]byte, prevAssertionHash [32]byte, confirmState AssertionState, winningEdgeId [32]byte, prevConfig ConfigData, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, prevAssertionHash, confirmState, winningEdgeId, prevConfig, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x6096686d.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) FastConfirmAssertion(opts *bind.TransactOpts, assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "fastConfirmAssertion", assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x6096686d.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicSession) FastConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmAssertion is a paid mutator transaction binding the contract method 0x6096686d.
//
// Solidity: function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, ((bytes32[2],uint64[2]),uint8,bytes32) confirmState, bytes32 inboxAcc) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) FastConfirmAssertion(assertionHash [32]byte, parentAssertionHash [32]byte, confirmState AssertionState, inboxAcc [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmAssertion(&_RollupUserLogic.TransactOpts, assertionHash, parentAssertionHash, confirmState, inboxAcc)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6420fb9f.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) FastConfirmNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "fastConfirmNewAssertion", assertion, expectedAssertionHash)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6420fb9f.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) FastConfirmNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// FastConfirmNewAssertion is a paid mutator transaction binding the contract method 0x6420fb9f.
//
// Solidity: function fastConfirmNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) FastConfirmNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.FastConfirmNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address withdrawalAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnNewAssertion50f32f68(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnNewAssertion", tokenAmount, assertion, expectedAssertionHash, withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address withdrawalAddress) returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnNewAssertion50f32f68(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion50f32f68(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash, withdrawalAddress)
}

// NewStakeOnNewAssertion50f32f68 is a paid mutator transaction binding the contract method 0x50f32f68.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash, address withdrawalAddress) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnNewAssertion50f32f68(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte, withdrawalAddress common.Address) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion50f32f68(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash, withdrawalAddress)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) NewStakeOnNewAssertion7300201c(opts *bind.TransactOpts, tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "newStakeOnNewAssertion0", tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) NewStakeOnNewAssertion7300201c(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion7300201c(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// NewStakeOnNewAssertion7300201c is a paid mutator transaction binding the contract method 0x7300201c.
//
// Solidity: function newStakeOnNewAssertion(uint256 tokenAmount, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) NewStakeOnNewAssertion7300201c(tokenAmount *big.Int, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.NewStakeOnNewAssertion7300201c(&_RollupUserLogic.TransactOpts, tokenAmount, assertion, expectedAssertionHash)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReduceDeposit(opts *bind.TransactOpts, target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "reduceDeposit", target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// ReduceDeposit is a paid mutator transaction binding the contract method 0x1e83d30f.
//
// Solidity: function reduceDeposit(uint256 target) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReduceDeposit(target *big.Int) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReduceDeposit(&_RollupUserLogic.TransactOpts, target)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterFork(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterFork")
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterFork is a paid mutator transaction binding the contract method 0xc2c2e68e.
//
// Solidity: function removeWhitelistAfterFork() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterFork() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterFork(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) RemoveWhitelistAfterValidatorAfk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "removeWhitelistAfterValidatorAfk")
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// RemoveWhitelistAfterValidatorAfk is a paid mutator transaction binding the contract method 0x18baaab9.
//
// Solidity: function removeWhitelistAfterValidatorAfk() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) RemoveWhitelistAfterValidatorAfk() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.RemoveWhitelistAfterValidatorAfk(&_RollupUserLogic.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicTransactor) ReturnOldDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "returnOldDeposit")
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts)
}

// ReturnOldDeposit is a paid mutator transaction binding the contract method 0x57ef4ab9.
//
// Solidity: function returnOldDeposit() returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) ReturnOldDeposit() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.ReturnOldDeposit(&_RollupUserLogic.TransactOpts)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactor) StakeOnNewAssertion(opts *bind.TransactOpts, assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "stakeOnNewAssertion", assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// StakeOnNewAssertion is a paid mutator transaction binding the contract method 0x3b86de19.
//
// Solidity: function stakeOnNewAssertion(((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 expectedAssertionHash) returns()
func (_RollupUserLogic *RollupUserLogicTransactorSession) StakeOnNewAssertion(assertion AssertionInputs, expectedAssertionHash [32]byte) (*types.Transaction, error) {
	return _RollupUserLogic.Contract.StakeOnNewAssertion(&_RollupUserLogic.TransactOpts, assertion, expectedAssertionHash)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactor) WithdrawStakerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RollupUserLogic.contract.Transact(opts, "withdrawStakerFunds")
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// WithdrawStakerFunds is a paid mutator transaction binding the contract method 0x61373919.
//
// Solidity: function withdrawStakerFunds() returns(uint256)
func (_RollupUserLogic *RollupUserLogicTransactorSession) WithdrawStakerFunds() (*types.Transaction, error) {
	return _RollupUserLogic.Contract.WithdrawStakerFunds(&_RollupUserLogic.TransactOpts)
}

// RollupUserLogicAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RollupUserLogic contract.
type RollupUserLogicAdminChangedIterator struct {
	Event *RollupUserLogicAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAdminChanged represents a AdminChanged event raised by the RollupUserLogic contract.
type RollupUserLogicAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RollupUserLogicAdminChangedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAdminChangedIterator{contract: _RollupUserLogic.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAdminChanged)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAdminChanged(log types.Log) (*RollupUserLogicAdminChanged, error) {
	event := new(RollupUserLogicAdminChanged)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicAssertionConfirmedIterator is returned from FilterAssertionConfirmed and is used to iterate over the raw logs and unpacked data for AssertionConfirmed events raised by the RollupUserLogic contract.
type RollupUserLogicAssertionConfirmedIterator struct {
	Event *RollupUserLogicAssertionConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAssertionConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAssertionConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAssertionConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAssertionConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAssertionConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAssertionConfirmed represents a AssertionConfirmed event raised by the RollupUserLogic contract.
type RollupUserLogicAssertionConfirmed struct {
	AssertionHash [32]byte
	BlockHash     [32]byte
	SendRoot      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAssertionConfirmed is a free log retrieval operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAssertionConfirmed(opts *bind.FilterOpts, assertionHash [][32]byte) (*RollupUserLogicAssertionConfirmedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAssertionConfirmedIterator{contract: _RollupUserLogic.contract, event: "AssertionConfirmed", logs: logs, sub: sub}, nil
}

// WatchAssertionConfirmed is a free log subscription operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAssertionConfirmed(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAssertionConfirmed, assertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AssertionConfirmed", assertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAssertionConfirmed)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionConfirmed is a log parse operation binding the contract event 0xfc42829b29c259a7370ab56c8f69fce23b5f351a9ce151da453281993ec0090c.
//
// Solidity: event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAssertionConfirmed(log types.Log) (*RollupUserLogicAssertionConfirmed, error) {
	event := new(RollupUserLogicAssertionConfirmed)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicAssertionCreatedIterator is returned from FilterAssertionCreated and is used to iterate over the raw logs and unpacked data for AssertionCreated events raised by the RollupUserLogic contract.
type RollupUserLogicAssertionCreatedIterator struct {
	Event *RollupUserLogicAssertionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicAssertionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicAssertionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicAssertionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicAssertionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicAssertionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicAssertionCreated represents a AssertionCreated event raised by the RollupUserLogic contract.
type RollupUserLogicAssertionCreated struct {
	AssertionHash       [32]byte
	ParentAssertionHash [32]byte
	Assertion           AssertionInputs
	AfterInboxBatchAcc  [32]byte
	InboxMaxCount       *big.Int
	WasmModuleRoot      [32]byte
	RequiredStake       *big.Int
	ChallengeManager    common.Address
	ConfirmPeriodBlocks uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterAssertionCreated is a free log retrieval operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterAssertionCreated(opts *bind.FilterOpts, assertionHash [][32]byte, parentAssertionHash [][32]byte) (*RollupUserLogicAssertionCreatedIterator, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicAssertionCreatedIterator{contract: _RollupUserLogic.contract, event: "AssertionCreated", logs: logs, sub: sub}, nil
}

// WatchAssertionCreated is a free log subscription operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchAssertionCreated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicAssertionCreated, assertionHash [][32]byte, parentAssertionHash [][32]byte) (event.Subscription, error) {

	var assertionHashRule []interface{}
	for _, assertionHashItem := range assertionHash {
		assertionHashRule = append(assertionHashRule, assertionHashItem)
	}
	var parentAssertionHashRule []interface{}
	for _, parentAssertionHashItem := range parentAssertionHash {
		parentAssertionHashRule = append(parentAssertionHashRule, parentAssertionHashItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "AssertionCreated", assertionHashRule, parentAssertionHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicAssertionCreated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssertionCreated is a log parse operation binding the contract event 0x901c3aee23cf4478825462caaab375c606ab83516060388344f0650340753630.
//
// Solidity: event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, ((bytes32,bytes32,(bytes32,uint256,address,uint64,uint64)),((bytes32[2],uint64[2]),uint8,bytes32),((bytes32[2],uint64[2]),uint8,bytes32)) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseAssertionCreated(log types.Log) (*RollupUserLogicAssertionCreated, error) {
	event := new(RollupUserLogicAssertionCreated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "AssertionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgradedIterator struct {
	Event *RollupUserLogicBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicBeaconUpgraded represents a BeaconUpgraded event raised by the RollupUserLogic contract.
type RollupUserLogicBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RollupUserLogicBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicBeaconUpgradedIterator{contract: _RollupUserLogic.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicBeaconUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseBeaconUpgraded(log types.Log) (*RollupUserLogicBeaconUpgraded, error) {
	event := new(RollupUserLogicBeaconUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RollupUserLogic contract.
type RollupUserLogicInitializedIterator struct {
	Event *RollupUserLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicInitialized represents a Initialized event raised by the RollupUserLogic contract.
type RollupUserLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*RollupUserLogicInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicInitializedIterator{contract: _RollupUserLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseInitialized(log types.Log) (*RollupUserLogicInitialized, error) {
	event := new(RollupUserLogicInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the RollupUserLogic contract.
type RollupUserLogicPausedIterator struct {
	Event *RollupUserLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicPaused represents a Paused event raised by the RollupUserLogic contract.
type RollupUserLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*RollupUserLogicPausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicPausedIterator{contract: _RollupUserLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicPaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicPaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParsePaused(log types.Log) (*RollupUserLogicPaused, error) {
	event := new(RollupUserLogicPaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupChallengeStartedIterator is returned from FilterRollupChallengeStarted and is used to iterate over the raw logs and unpacked data for RollupChallengeStarted events raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStartedIterator struct {
	Event *RollupUserLogicRollupChallengeStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupChallengeStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupChallengeStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupChallengeStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupChallengeStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupChallengeStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupChallengeStarted represents a RollupChallengeStarted event raised by the RollupUserLogic contract.
type RollupUserLogicRollupChallengeStarted struct {
	ChallengeIndex      uint64
	Asserter            common.Address
	Challenger          common.Address
	ChallengedAssertion uint64
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRollupChallengeStarted is a free log retrieval operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupChallengeStarted(opts *bind.FilterOpts, challengeIndex []uint64) (*RollupUserLogicRollupChallengeStartedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupChallengeStartedIterator{contract: _RollupUserLogic.contract, event: "RollupChallengeStarted", logs: logs, sub: sub}, nil
}

// WatchRollupChallengeStarted is a free log subscription operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupChallengeStarted(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupChallengeStarted, challengeIndex []uint64) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupChallengeStarted", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupChallengeStarted)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupChallengeStarted is a log parse operation binding the contract event 0x6db7dc2f507647d135035469b27aa79cea90582779d084a7821d6cd092cbd873.
//
// Solidity: event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupChallengeStarted(log types.Log) (*RollupUserLogicRollupChallengeStarted, error) {
	event := new(RollupUserLogicRollupChallengeStarted)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupChallengeStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicRollupInitializedIterator is returned from FilterRollupInitialized and is used to iterate over the raw logs and unpacked data for RollupInitialized events raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitializedIterator struct {
	Event *RollupUserLogicRollupInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicRollupInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicRollupInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicRollupInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicRollupInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicRollupInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicRollupInitialized represents a RollupInitialized event raised by the RollupUserLogic contract.
type RollupUserLogicRollupInitialized struct {
	MachineHash [32]byte
	ChainId     *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRollupInitialized is a free log retrieval operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterRollupInitialized(opts *bind.FilterOpts) (*RollupUserLogicRollupInitializedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicRollupInitializedIterator{contract: _RollupUserLogic.contract, event: "RollupInitialized", logs: logs, sub: sub}, nil
}

// WatchRollupInitialized is a free log subscription operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchRollupInitialized(opts *bind.WatchOpts, sink chan<- *RollupUserLogicRollupInitialized) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "RollupInitialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicRollupInitialized)
				if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupInitialized is a log parse operation binding the contract event 0xfc1b83c11d99d08a938e0b82a0bd45f822f71ff5abf23f999c93c4533d752464.
//
// Solidity: event RollupInitialized(bytes32 machineHash, uint256 chainId)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseRollupInitialized(log types.Log) (*RollupUserLogicRollupInitialized, error) {
	event := new(RollupUserLogicRollupInitialized)
	if err := _RollupUserLogic.contract.UnpackLog(event, "RollupInitialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the RollupUserLogic contract.
type RollupUserLogicUnpausedIterator struct {
	Event *RollupUserLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUnpaused represents a Unpaused event raised by the RollupUserLogic contract.
type RollupUserLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RollupUserLogicUnpausedIterator, error) {

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUnpausedIterator{contract: _RollupUserLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUnpaused)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUnpaused(log types.Log) (*RollupUserLogicUnpaused, error) {
	event := new(RollupUserLogicUnpaused)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedIterator struct {
	Event *RollupUserLogicUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgraded represents a Upgraded event raised by the RollupUserLogic contract.
type RollupUserLogicUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedIterator{contract: _RollupUserLogic.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgraded)
				if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgraded(log types.Log) (*RollupUserLogicUpgraded, error) {
	event := new(RollupUserLogicUpgraded)
	if err := _RollupUserLogic.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUpgradedSecondaryIterator is returned from FilterUpgradedSecondary and is used to iterate over the raw logs and unpacked data for UpgradedSecondary events raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondaryIterator struct {
	Event *RollupUserLogicUpgradedSecondary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUpgradedSecondaryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUpgradedSecondary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUpgradedSecondary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUpgradedSecondaryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUpgradedSecondaryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUpgradedSecondary represents a UpgradedSecondary event raised by the RollupUserLogic contract.
type RollupUserLogicUpgradedSecondary struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgradedSecondary is a free log retrieval operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUpgradedSecondary(opts *bind.FilterOpts, implementation []common.Address) (*RollupUserLogicUpgradedSecondaryIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUpgradedSecondaryIterator{contract: _RollupUserLogic.contract, event: "UpgradedSecondary", logs: logs, sub: sub}, nil
}

// WatchUpgradedSecondary is a free log subscription operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUpgradedSecondary(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUpgradedSecondary, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UpgradedSecondary", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUpgradedSecondary)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradedSecondary is a log parse operation binding the contract event 0xf7eed2a7fabbf1bec8d55ed5e785cc76622376dde5df4ff15470551e030b8134.
//
// Solidity: event UpgradedSecondary(address indexed implementation)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUpgradedSecondary(log types.Log) (*RollupUserLogicUpgradedSecondary, error) {
	event := new(RollupUserLogicUpgradedSecondary)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UpgradedSecondary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserStakeUpdatedIterator is returned from FilterUserStakeUpdated and is used to iterate over the raw logs and unpacked data for UserStakeUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdatedIterator struct {
	Event *RollupUserLogicUserStakeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserStakeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserStakeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserStakeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserStakeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserStakeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserStakeUpdated represents a UserStakeUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserStakeUpdated struct {
	User              common.Address
	WithdrawalAddress common.Address
	InitialBalance    *big.Int
	FinalBalance      *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUserStakeUpdated is a free log retrieval operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserStakeUpdated(opts *bind.FilterOpts, user []common.Address, withdrawalAddress []common.Address) (*RollupUserLogicUserStakeUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserStakeUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserStakeUpdated", logs: logs, sub: sub}, nil
}

// WatchUserStakeUpdated is a free log subscription operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserStakeUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserStakeUpdated, user []common.Address, withdrawalAddress []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var withdrawalAddressRule []interface{}
	for _, withdrawalAddressItem := range withdrawalAddress {
		withdrawalAddressRule = append(withdrawalAddressRule, withdrawalAddressItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserStakeUpdated", userRule, withdrawalAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserStakeUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserStakeUpdated is a log parse operation binding the contract event 0xd957cf2340073335d256f72a9ef89cf1a43c31143341a6a53575ef33e987beb8.
//
// Solidity: event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserStakeUpdated(log types.Log) (*RollupUserLogicUserStakeUpdated, error) {
	event := new(RollupUserLogicUserStakeUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserStakeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RollupUserLogicUserWithdrawableFundsUpdatedIterator is returned from FilterUserWithdrawableFundsUpdated and is used to iterate over the raw logs and unpacked data for UserWithdrawableFundsUpdated events raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdatedIterator struct {
	Event *RollupUserLogicUserWithdrawableFundsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RollupUserLogicUserWithdrawableFundsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RollupUserLogicUserWithdrawableFundsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RollupUserLogicUserWithdrawableFundsUpdated represents a UserWithdrawableFundsUpdated event raised by the RollupUserLogic contract.
type RollupUserLogicUserWithdrawableFundsUpdated struct {
	User           common.Address
	InitialBalance *big.Int
	FinalBalance   *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserWithdrawableFundsUpdated is a free log retrieval operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) FilterUserWithdrawableFundsUpdated(opts *bind.FilterOpts, user []common.Address) (*RollupUserLogicUserWithdrawableFundsUpdatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.FilterLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return &RollupUserLogicUserWithdrawableFundsUpdatedIterator{contract: _RollupUserLogic.contract, event: "UserWithdrawableFundsUpdated", logs: logs, sub: sub}, nil
}

// WatchUserWithdrawableFundsUpdated is a free log subscription operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) WatchUserWithdrawableFundsUpdated(opts *bind.WatchOpts, sink chan<- *RollupUserLogicUserWithdrawableFundsUpdated, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _RollupUserLogic.contract.WatchLogs(opts, "UserWithdrawableFundsUpdated", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RollupUserLogicUserWithdrawableFundsUpdated)
				if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserWithdrawableFundsUpdated is a log parse operation binding the contract event 0xa740af14c56e4e04a617b1de1eb20de73270decbaaead14f142aabf3038e5ae2.
//
// Solidity: event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)
func (_RollupUserLogic *RollupUserLogicFilterer) ParseUserWithdrawableFundsUpdated(log types.Log) (*RollupUserLogicUserWithdrawableFundsUpdated, error) {
	event := new(RollupUserLogicUserWithdrawableFundsUpdated)
	if err := _RollupUserLogic.contract.UnpackLog(event, "UserWithdrawableFundsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StateHashPreImageLookupMetaData contains all meta data concerning the StateHashPreImageLookup contract.
var StateHashPreImageLookupMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"structExecutionState\",\"name\":\"executionState\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"HashSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"executionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"executionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32[2]\",\"name\":\"bytes32Vals\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint64[2]\",\"name\":\"u64Vals\",\"type\":\"uint64[2]\"}],\"internalType\":\"structGlobalState\",\"name\":\"globalState\",\"type\":\"tuple\"},{\"internalType\":\"enumMachineStatus\",\"name\":\"machineStatus\",\"type\":\"uint8\"}],\"internalType\":\"structExecutionState\",\"name\":\"executionState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"}],\"name\":\"stateHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610a0d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806331644130146100465780638eaa6ac01461006c578063945c94941461008d575b600080fd5b61005961005436600461041d565b6100a2565b6040519081526020015b60405180910390f35b61007f61007a366004610448565b610193565b604051610063929190610483565b6100a061009b36600461050a565b6102bf565b005b60006101526100b636859003850185610598565b8051805160209182015192820151805190830151604080517f476c6f62616c2073746174653a0000000000000000000000000000000000000081870152602d810194909452604d8401959095527fffffffffffffffff00000000000000000000000000000000000000000000000060c092831b8116606d850152911b1660758201528251808203605d018152607d909101909252815191012090565b8261016360a0860160808701610667565b6040516020016101759392919061068b565b60405160208183030381529060405280519060200120905092915050565b61019b6103ab565b600082815260208190526040812080546101b4906106c9565b80601f01602080910402602001604051908101604052809291908181526020018280546101e0906106c9565b801561022d5780601f106102025761010080835404028352916020019161022d565b820191906000526020600020905b81548152906001019060200180831161021057829003601f168201915b50505050508060200190518101906102459190610766565b909250905060008190036102ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f48617368206e6f7420796574207365740000000000000000000000000000000060448201526064015b60405180910390fd5b915091565b6102c982826100a2565b8314610331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642068617368000000000000000000000000000000000000000060448201526064016102b1565b818160405160200161034492919061088c565b60408051601f1981840301815291815260008581526020819052209061036a90826108f5565b507f14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad983838360405161039e939291906109b5565b60405180910390a1505050565b60405180604001604052806103be6103cb565b815260200160005b905290565b60405180604001604052806103de6103e7565b81526020016103c65b60405180604001604052806002906020820280368337509192915050565b600060a0828403121561041757600080fd5b50919050565b60008060c0838503121561043057600080fd5b61043a8484610405565b9460a0939093013593505050565b60006020828403121561045a57600080fd5b5035919050565b6003811061047f57634e487b7160e01b600052602160045260246000fd5b9052565b8251805160c0830191908360005b60028110156104b0578251825260209283019290910190600101610491565b505050602090810151906040840160005b60028110156104e857835167ffffffffffffffff16825292820192908201906001016104c1565b505085015190506104fc6080840182610461565b508260a08301529392505050565b600080600060e0848603121561051f57600080fd5b833592506105308560208601610405565b915060c084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561057957610579610540565b60405290565b67ffffffffffffffff8116811461059557600080fd5b50565b6000608082840312156105aa57600080fd5b6105b2610556565b83601f8401126105c157600080fd5b6105c9610556565b8060408501868111156105db57600080fd5b855b818110156105f55780358452602093840193016105dd565b5081845286605f87011261060857600080fd5b610610610556565b9250829150608086018781111561062657600080fd5b8082101561064b5781356106398161057f565b84526020938401939190910190610626565b50506020830152509392505050565b6003811061059557600080fd5b60006020828403121561067957600080fd5b81356106848161065a565b9392505050565b8381528260208201526000600383106106b457634e487b7160e01b600052602160045260246000fd5b5060f89190911b604082015260410192915050565b600181811c908216806106dd57607f821691505b60208210810361041757634e487b7160e01b600052602260045260246000fd5b600082601f83011261070e57600080fd5b610716610556565b80604084018581111561072857600080fd5b845b8181101561074b57805161073d8161057f565b84526020938401930161072a565b509095945050505050565b80516107618161065a565b919050565b60008082840360c081121561077a57600080fd5b60a081121561078857600080fd5b610790610556565b608082121561079e57600080fd5b6107a6610556565b915085601f8601126107b757600080fd5b6107bf610556565b8060408701888111156107d157600080fd5b875b818110156107eb5780518452602093840193016107d3565b508185526107f989826106fd565b602086015250505081815261081060808601610756565b602082015260a094909401519395939450505050565b6040818337604082016040820160005b600281101561086957813561084a8161057f565b67ffffffffffffffff1683526020928301929190910190600101610836565b505050608081013561087a8161065a565b6108876080840182610461565b505050565b60c0810161089a8285610826565b8260a08301529392505050565b601f82111561088757600081815260208120601f850160051c810160208610156108ce5750805b601f850160051c820191505b818110156108ed578281556001016108da565b505050505050565b815167ffffffffffffffff81111561090f5761090f610540565b6109238161091d84546106c9565b846108a7565b602080601f83116001811461095857600084156109405750858301515b600019600386901b1c1916600185901b1785556108ed565b600085815260208120601f198616915b8281101561098757888601518255948401946001909101908401610968565b50858210156109a55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b83815260e081016109c96020830185610826565b8260c083015294935050505056fea26469706673582212201810aafa2710cf085af645b315f1aaef8f94d38c67e5d40ba1c50a9af3f75ff164736f6c63430008110033",
}

// StateHashPreImageLookupABI is the input ABI used to generate the binding from.
// Deprecated: Use StateHashPreImageLookupMetaData.ABI instead.
var StateHashPreImageLookupABI = StateHashPreImageLookupMetaData.ABI

// StateHashPreImageLookupBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StateHashPreImageLookupMetaData.Bin instead.
var StateHashPreImageLookupBin = StateHashPreImageLookupMetaData.Bin

// DeployStateHashPreImageLookup deploys a new Ethereum contract, binding an instance of StateHashPreImageLookup to it.
func DeployStateHashPreImageLookup(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StateHashPreImageLookup, error) {
	parsed, err := StateHashPreImageLookupMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StateHashPreImageLookupBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StateHashPreImageLookup{StateHashPreImageLookupCaller: StateHashPreImageLookupCaller{contract: contract}, StateHashPreImageLookupTransactor: StateHashPreImageLookupTransactor{contract: contract}, StateHashPreImageLookupFilterer: StateHashPreImageLookupFilterer{contract: contract}}, nil
}

// StateHashPreImageLookup is an auto generated Go binding around an Ethereum contract.
type StateHashPreImageLookup struct {
	StateHashPreImageLookupCaller     // Read-only binding to the contract
	StateHashPreImageLookupTransactor // Write-only binding to the contract
	StateHashPreImageLookupFilterer   // Log filterer for contract events
}

// StateHashPreImageLookupCaller is an auto generated read-only Go binding around an Ethereum contract.
type StateHashPreImageLookupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateHashPreImageLookupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StateHashPreImageLookupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateHashPreImageLookupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StateHashPreImageLookupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateHashPreImageLookupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StateHashPreImageLookupSession struct {
	Contract     *StateHashPreImageLookup // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StateHashPreImageLookupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StateHashPreImageLookupCallerSession struct {
	Contract *StateHashPreImageLookupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// StateHashPreImageLookupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StateHashPreImageLookupTransactorSession struct {
	Contract     *StateHashPreImageLookupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// StateHashPreImageLookupRaw is an auto generated low-level Go binding around an Ethereum contract.
type StateHashPreImageLookupRaw struct {
	Contract *StateHashPreImageLookup // Generic contract binding to access the raw methods on
}

// StateHashPreImageLookupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StateHashPreImageLookupCallerRaw struct {
	Contract *StateHashPreImageLookupCaller // Generic read-only contract binding to access the raw methods on
}

// StateHashPreImageLookupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StateHashPreImageLookupTransactorRaw struct {
	Contract *StateHashPreImageLookupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStateHashPreImageLookup creates a new instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookup(address common.Address, backend bind.ContractBackend) (*StateHashPreImageLookup, error) {
	contract, err := bindStateHashPreImageLookup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookup{StateHashPreImageLookupCaller: StateHashPreImageLookupCaller{contract: contract}, StateHashPreImageLookupTransactor: StateHashPreImageLookupTransactor{contract: contract}, StateHashPreImageLookupFilterer: StateHashPreImageLookupFilterer{contract: contract}}, nil
}

// NewStateHashPreImageLookupCaller creates a new read-only instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookupCaller(address common.Address, caller bind.ContractCaller) (*StateHashPreImageLookupCaller, error) {
	contract, err := bindStateHashPreImageLookup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupCaller{contract: contract}, nil
}

// NewStateHashPreImageLookupTransactor creates a new write-only instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookupTransactor(address common.Address, transactor bind.ContractTransactor) (*StateHashPreImageLookupTransactor, error) {
	contract, err := bindStateHashPreImageLookup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupTransactor{contract: contract}, nil
}

// NewStateHashPreImageLookupFilterer creates a new log filterer instance of StateHashPreImageLookup, bound to a specific deployed contract.
func NewStateHashPreImageLookupFilterer(address common.Address, filterer bind.ContractFilterer) (*StateHashPreImageLookupFilterer, error) {
	contract, err := bindStateHashPreImageLookup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupFilterer{contract: contract}, nil
}

// bindStateHashPreImageLookup binds a generic wrapper to an already deployed contract.
func bindStateHashPreImageLookup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StateHashPreImageLookupMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StateHashPreImageLookup *StateHashPreImageLookupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StateHashPreImageLookup.Contract.StateHashPreImageLookupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StateHashPreImageLookup *StateHashPreImageLookupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.StateHashPreImageLookupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StateHashPreImageLookup *StateHashPreImageLookupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.StateHashPreImageLookupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StateHashPreImageLookup *StateHashPreImageLookupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StateHashPreImageLookup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.contract.Transact(opts, method, params...)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 h) view returns(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupCaller) Get(opts *bind.CallOpts, h [32]byte) (struct {
	ExecutionState ExecutionState
	InboxMaxCount  *big.Int
}, error) {
	var out []interface{}
	err := _StateHashPreImageLookup.contract.Call(opts, &out, "get", h)

	outstruct := new(struct {
		ExecutionState ExecutionState
		InboxMaxCount  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ExecutionState = *abi.ConvertType(out[0], new(ExecutionState)).(*ExecutionState)
	outstruct.InboxMaxCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 h) view returns(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupSession) Get(h [32]byte) (struct {
	ExecutionState ExecutionState
	InboxMaxCount  *big.Int
}, error) {
	return _StateHashPreImageLookup.Contract.Get(&_StateHashPreImageLookup.CallOpts, h)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 h) view returns(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupCallerSession) Get(h [32]byte) (struct {
	ExecutionState ExecutionState
	InboxMaxCount  *big.Int
}, error) {
	return _StateHashPreImageLookup.Contract.Get(&_StateHashPreImageLookup.CallOpts, h)
}

// StateHash is a free data retrieval call binding the contract method 0x31644130.
//
// Solidity: function stateHash(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) pure returns(bytes32)
func (_StateHashPreImageLookup *StateHashPreImageLookupCaller) StateHash(opts *bind.CallOpts, executionState ExecutionState, inboxMaxCount *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _StateHashPreImageLookup.contract.Call(opts, &out, "stateHash", executionState, inboxMaxCount)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateHash is a free data retrieval call binding the contract method 0x31644130.
//
// Solidity: function stateHash(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) pure returns(bytes32)
func (_StateHashPreImageLookup *StateHashPreImageLookupSession) StateHash(executionState ExecutionState, inboxMaxCount *big.Int) ([32]byte, error) {
	return _StateHashPreImageLookup.Contract.StateHash(&_StateHashPreImageLookup.CallOpts, executionState, inboxMaxCount)
}

// StateHash is a free data retrieval call binding the contract method 0x31644130.
//
// Solidity: function stateHash(((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) pure returns(bytes32)
func (_StateHashPreImageLookup *StateHashPreImageLookupCallerSession) StateHash(executionState ExecutionState, inboxMaxCount *big.Int) ([32]byte, error) {
	return _StateHashPreImageLookup.Contract.StateHash(&_StateHashPreImageLookup.CallOpts, executionState, inboxMaxCount)
}

// Set is a paid mutator transaction binding the contract method 0x945c9494.
//
// Solidity: function set(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) returns()
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactor) Set(opts *bind.TransactOpts, h [32]byte, executionState ExecutionState, inboxMaxCount *big.Int) (*types.Transaction, error) {
	return _StateHashPreImageLookup.contract.Transact(opts, "set", h, executionState, inboxMaxCount)
}

// Set is a paid mutator transaction binding the contract method 0x945c9494.
//
// Solidity: function set(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) returns()
func (_StateHashPreImageLookup *StateHashPreImageLookupSession) Set(h [32]byte, executionState ExecutionState, inboxMaxCount *big.Int) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.Set(&_StateHashPreImageLookup.TransactOpts, h, executionState, inboxMaxCount)
}

// Set is a paid mutator transaction binding the contract method 0x945c9494.
//
// Solidity: function set(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount) returns()
func (_StateHashPreImageLookup *StateHashPreImageLookupTransactorSession) Set(h [32]byte, executionState ExecutionState, inboxMaxCount *big.Int) (*types.Transaction, error) {
	return _StateHashPreImageLookup.Contract.Set(&_StateHashPreImageLookup.TransactOpts, h, executionState, inboxMaxCount)
}

// StateHashPreImageLookupHashSetIterator is returned from FilterHashSet and is used to iterate over the raw logs and unpacked data for HashSet events raised by the StateHashPreImageLookup contract.
type StateHashPreImageLookupHashSetIterator struct {
	Event *StateHashPreImageLookupHashSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StateHashPreImageLookupHashSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StateHashPreImageLookupHashSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StateHashPreImageLookupHashSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StateHashPreImageLookupHashSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StateHashPreImageLookupHashSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StateHashPreImageLookupHashSet represents a HashSet event raised by the StateHashPreImageLookup contract.
type StateHashPreImageLookupHashSet struct {
	H              [32]byte
	ExecutionState ExecutionState
	InboxMaxCount  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterHashSet is a free log retrieval operation binding the contract event 0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9.
//
// Solidity: event HashSet(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupFilterer) FilterHashSet(opts *bind.FilterOpts) (*StateHashPreImageLookupHashSetIterator, error) {

	logs, sub, err := _StateHashPreImageLookup.contract.FilterLogs(opts, "HashSet")
	if err != nil {
		return nil, err
	}
	return &StateHashPreImageLookupHashSetIterator{contract: _StateHashPreImageLookup.contract, event: "HashSet", logs: logs, sub: sub}, nil
}

// WatchHashSet is a free log subscription operation binding the contract event 0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9.
//
// Solidity: event HashSet(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupFilterer) WatchHashSet(opts *bind.WatchOpts, sink chan<- *StateHashPreImageLookupHashSet) (event.Subscription, error) {

	logs, sub, err := _StateHashPreImageLookup.contract.WatchLogs(opts, "HashSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StateHashPreImageLookupHashSet)
				if err := _StateHashPreImageLookup.contract.UnpackLog(event, "HashSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHashSet is a log parse operation binding the contract event 0x14c0a6b8d81f5915dacfd85e41ae4798343ec29de408ac4c13360c7238ae0ad9.
//
// Solidity: event HashSet(bytes32 h, ((bytes32[2],uint64[2]),uint8) executionState, uint256 inboxMaxCount)
func (_StateHashPreImageLookup *StateHashPreImageLookupFilterer) ParseHashSet(log types.Log) (*StateHashPreImageLookupHashSet, error) {
	event := new(StateHashPreImageLookupHashSet)
	if err := _StateHashPreImageLookup.contract.UnpackLog(event, "HashSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletMetaData contains all meta data concerning the ValidatorWallet contract.
var ValidatorWalletMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"BadArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"NotExecutorOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"OnlyOwnerDestination\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"WithdrawEthFail\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AllowedExecutorDestinationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExecutor\",\"type\":\"bool\"}],\"name\":\"ExecutorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedExecutorDestinations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransactionWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGasRefunder\",\"name\":\"gasRefunder\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"destination\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"executeTransactionsWithGasRefunder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isSet\",\"type\":\"bool[]\"}],\"name\":\"setAllowedExecutorDestinations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newExecutors\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isExecutor\",\"type\":\"bool[]\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"validateExecuteTransaction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60c0604052306080526202000060a05234801561001b57600080fd5b5060805160a051611c206100486000396000818161055d015261115f01526000610a350152611c206000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a158657c11610059578063a158657c14610247578063c179f1d914610267578063ce1d571f1461027a578063f2fde38b1461028d57600080fd5b80638da5cb5b146101cf5780639ac2a011146101f75780639be7bbd21461022757600080fd5b80633a7c721a116100bb5780633a7c721a14610167578063715018a61461018757806372f458661461019c57806377a24f36146101af57600080fd5b8063097da1f8146100ed5780630a2435f814610102578063193c8edd1461012257600080fd5b366100e857005b600080fd5b6101006100fb366004611530565b6102ad565b005b34801561010e57600080fd5b5061010061011d3660046115e5565b610663565b34801561012e57600080fd5b5061015261013d366004611651565b60666020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561017357600080fd5b506101006101823660046115e5565b6107e6565b34801561019357600080fd5b50610100610930565b6101006101aa366004611675565b610944565b3480156101bb57600080fd5b506101006101ca36600461170f565b61095c565b3480156101db57600080fd5b506033546040516001600160a01b03909116815260200161015e565b34801561020357600080fd5b50610152610212366004611651565b60656020526000908152604090205460ff1681565b34801561023357600080fd5b50610100610242366004611651565b610c73565b34801561025357600080fd5b50610100610262366004611768565b610cfe565b610100610275366004611798565b610da3565b610100610288366004611845565b611267565b34801561029957600080fd5b506101006102a8366004611651565b61127b565b3360009081526065602052604090205460ff161580156102d857506033546001600160a01b03163314155b1561032257335b6040517ff26aea8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b846000805a90508515610386576001600160a01b0385163b6103865760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610319565b61038f85610c73565b6000856001600160a01b03168589896040516103ac9291906118a2565b60006040518083038185875af1925050503d80600081146103e9576040519150601f19603f3d011682016040523d82523d6000602084013e6103ee565b606091505b5050905080610404576040513d806000833e8082fd5b506001600160a01b0383161561065957366000602061042483601f6118c8565b61042e91906118e1565b905061020061043e6002836119e7565b61044891906118e1565b6104538260066119f6565b61045d91906118c8565b61046790846118c8565b925033321461047957600091506105ac565b6001600160a01b038416156105ac57836001600160a01b031663e83a2d826040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156104e757506040513d6000823e601f3d908101601f191682016040526104e49190810190611a23565b60015b156105ac578051156105aa576000856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190611ae1565b905048817f0000000000000000000000000000000000000000000000000000000000000000845161058891906119f6565b61059291906119f6565b61059c91906118e1565b6105a690866118c8565b9450505b505b846001600160a01b031663e3db8a49335a6105c79087611afa565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af1158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190611b1b565b5050505b5050505050505050565b61066b611308565b8281146106955760405163088253c360e11b81526004810184905260248101829052604401610319565b60005b67ffffffffffffffff81168411156107df5782828267ffffffffffffffff168181106106c6576106c6611b38565b90506020020160208101906106db9190611b4e565b6065600087878567ffffffffffffffff168181106106fb576106fb611b38565b90506020020160208101906107109190611651565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055848467ffffffffffffffff831681811061075457610754611b38565b90506020020160208101906107699190611651565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea284848467ffffffffffffffff168181106107af576107af611b38565b90506020020160208101906107c49190611b4e565b604051901515815260200160405180910390a2600101610698565b5050505050565b6107ee611308565b8281146108185760405163088253c360e11b81526004810184905260248101829052604401610319565b60005b838110156107df5782828281811061083557610835611b38565b905060200201602081019061084a9190611b4e565b6066600087878581811061086057610860611b38565b90506020020160208101906108759190611651565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558484828181106108af576108af611b38565b90506020020160208101906108c49190611651565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a484848481811061090057610900611b38565b90506020020160208101906109159190611b4e565b604051901515815260200160405180910390a260010161081b565b610938611308565b6109426000611362565b565b6109546000878787878787610da3565b505050505050565b600054610100900460ff161580801561097c5750600054600160ff909116105b806109965750303b158015610996575060005460ff166001145b610a085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610319565b6000805460ff191660011790558015610a2b576000805461ff0019166101001790555b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ac95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610319565b610ad16113cc565b610ada8461127b565b6001600160a01b038516600081815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a260005b67ffffffffffffffff8116831115610c265760016066600086868567ffffffffffffffff16818110610b6b57610b6b611b38565b9050602002016020810190610b809190611651565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055838367ffffffffffffffff8316818110610bc457610bc4611b38565b9050602002016020810190610bd99190611651565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610c16911515815260200190565b60405180910390a2600101610b37565b5080156107df576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6001600160a01b03811660009081526066602052604090205460ff16158015610ca757506033546001600160a01b03163314155b15610cfb576033546040517f41fc6f8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529082166044820152606401610319565b50565b610d06611308565b6000816001600160a01b03168360405160006040518083038185875af1925050503d8060008114610d53576040519150601f19603f3d011682016040523d82523d6000602084013e610d58565b606091505b5050905080610d9e576040517f7edbb4980000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610319565b505050565b3360009081526065602052604090205460ff16158015610dce57506033546001600160a01b03163314155b15610dd957336102df565b866000805a905087868114610e0b5760405163088253c360e11b81526004810182905260248101889052604401610319565b808514610e355760405163088253c360e11b81526004810182905260248101869052604401610319565b60005b818110156110055760008b8b83818110610e5457610e54611b38565b9050602002810190610e669190611b6b565b90501115610ef357610ea7898983818110610e8357610e83611b38565b9050602002016020810190610e989190611651565b6001600160a01b03163b151590565b610ef35760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610319565b610f1d898983818110610f0857610f08611b38565b90506020020160208101906102429190611651565b6000898983818110610f3157610f31611b38565b9050602002016020810190610f469190611651565b6001600160a01b0316888884818110610f6157610f61611b38565b905060200201358d8d85818110610f7a57610f7a611b38565b9050602002810190610f8c9190611b6b565b604051610f9a9291906118a2565b60006040518083038185875af1925050503d8060008114610fd7576040519150601f19603f3d011682016040523d82523d6000602084013e610fdc565b606091505b5050905080610ff2576040513d806000833e8082fd5b5080610ffd81611bd0565b915050610e38565b50506001600160a01b0383161561125b57366000602061102683601f6118c8565b61103091906118e1565b90506102006110406002836119e7565b61104a91906118e1565b6110558260066119f6565b61105f91906118c8565b61106990846118c8565b925033321461107b57600091506111ae565b6001600160a01b038416156111ae57836001600160a01b031663e83a2d826040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156110e957506040513d6000823e601f3d908101601f191682016040526110e69190810190611a23565b60015b156111ae578051156111ac576000856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111599190611ae1565b905048817f0000000000000000000000000000000000000000000000000000000000000000845161118a91906119f6565b61119491906119f6565b61119e91906118e1565b6111a890866118c8565b9450505b505b846001600160a01b031663e3db8a49335a6111c99087611afa565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af1158015611233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112579190611b1b565b5050505b50505050505050505050565b6112756000858585856102ad565b50505050565b611283611308565b6001600160a01b0381166112ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610319565b610cfb81611362565b6033546001600160a01b031633146109425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610319565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610319565b610942600054610100900460ff166114c95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610319565b61094233611362565b6001600160a01b0381168114610cfb57600080fd5b60008083601f8401126114f957600080fd5b50813567ffffffffffffffff81111561151157600080fd5b60208301915083602082850101111561152957600080fd5b9250929050565b60008060008060006080868803121561154857600080fd5b8535611553816114d2565b9450602086013567ffffffffffffffff81111561156f57600080fd5b61157b888289016114e7565b909550935050604086013561158f816114d2565b949793965091946060013592915050565b60008083601f8401126115b257600080fd5b50813567ffffffffffffffff8111156115ca57600080fd5b6020830191508360208260051b850101111561152957600080fd5b600080600080604085870312156115fb57600080fd5b843567ffffffffffffffff8082111561161357600080fd5b61161f888389016115a0565b9096509450602087013591508082111561163857600080fd5b50611645878288016115a0565b95989497509550505050565b60006020828403121561166357600080fd5b813561166e816114d2565b9392505050565b6000806000806000806060878903121561168e57600080fd5b863567ffffffffffffffff808211156116a657600080fd5b6116b28a838b016115a0565b909850965060208901359150808211156116cb57600080fd5b6116d78a838b016115a0565b909650945060408901359150808211156116f057600080fd5b506116fd89828a016115a0565b979a9699509497509295939492505050565b6000806000806060858703121561172557600080fd5b8435611730816114d2565b93506020850135611740816114d2565b9250604085013567ffffffffffffffff81111561175c57600080fd5b611645878288016115a0565b6000806040838503121561177b57600080fd5b82359150602083013561178d816114d2565b809150509250929050565b60008060008060008060006080888a0312156117b357600080fd5b87356117be816114d2565b9650602088013567ffffffffffffffff808211156117db57600080fd5b6117e78b838c016115a0565b909850965060408a013591508082111561180057600080fd5b61180c8b838c016115a0565b909650945060608a013591508082111561182557600080fd5b506118328a828b016115a0565b989b979a50959850939692959293505050565b6000806000806060858703121561185b57600080fd5b843567ffffffffffffffff81111561187257600080fd5b61187e878288016114e7565b9095509350506020850135611892816114d2565b9396929550929360400135925050565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156118db576118db6118b2565b92915050565b6000826118fe57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561193e578160001904821115611924576119246118b2565b8085161561193157918102915b93841c9390800290611908565b509250929050565b600082611955575060016118db565b81611962575060006118db565b816001811461197857600281146119825761199e565b60019150506118db565b60ff841115611993576119936118b2565b50506001821b6118db565b5060208310610133831016604e8410600b84101617156119c1575081810a6118db565b6119cb8383611903565b80600019048211156119df576119df6118b2565b029392505050565b600061166e60ff841683611946565b80820281158282048414176118db576118db6118b2565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215611a3657600080fd5b825167ffffffffffffffff80821115611a4e57600080fd5b818501915085601f830112611a6257600080fd5b815181811115611a7457611a74611a0d565b8060051b604051601f19603f83011681018181108582111715611a9957611a99611a0d565b604052918252848201925083810185019188831115611ab757600080fd5b938501935b82851015611ad557845184529385019392850192611abc565b98975050505050505050565b600060208284031215611af357600080fd5b5051919050565b818103818111156118db576118db6118b2565b8015158114610cfb57600080fd5b600060208284031215611b2d57600080fd5b815161166e81611b0d565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611b6057600080fd5b813561166e81611b0d565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611ba057600080fd5b83018035915067ffffffffffffffff821115611bbb57600080fd5b60200191503681900382131561152957600080fd5b60006000198203611be357611be36118b2565b506001019056fea2646970667358221220fb2d7ed92edd1a982da3b39e1504fa34f5da7358ee8c55e3eb21f39c59c15e3564736f6c63430008110033",
}

// ValidatorWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletMetaData.ABI instead.
var ValidatorWalletABI = ValidatorWalletMetaData.ABI

// ValidatorWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletMetaData.Bin instead.
var ValidatorWalletBin = ValidatorWalletMetaData.Bin

// DeployValidatorWallet deploys a new Ethereum contract, binding an instance of ValidatorWallet to it.
func DeployValidatorWallet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWallet, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// ValidatorWallet is an auto generated Go binding around an Ethereum contract.
type ValidatorWallet struct {
	ValidatorWalletCaller     // Read-only binding to the contract
	ValidatorWalletTransactor // Write-only binding to the contract
	ValidatorWalletFilterer   // Log filterer for contract events
}

// ValidatorWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletSession struct {
	Contract     *ValidatorWallet  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCallerSession struct {
	Contract *ValidatorWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ValidatorWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletTransactorSession struct {
	Contract     *ValidatorWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletRaw struct {
	Contract *ValidatorWallet // Generic contract binding to access the raw methods on
}

// ValidatorWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCallerRaw struct {
	Contract *ValidatorWalletCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletTransactorRaw struct {
	Contract *ValidatorWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWallet creates a new instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWallet(address common.Address, backend bind.ContractBackend) (*ValidatorWallet, error) {
	contract, err := bindValidatorWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWallet{ValidatorWalletCaller: ValidatorWalletCaller{contract: contract}, ValidatorWalletTransactor: ValidatorWalletTransactor{contract: contract}, ValidatorWalletFilterer: ValidatorWalletFilterer{contract: contract}}, nil
}

// NewValidatorWalletCaller creates a new read-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCaller, error) {
	contract, err := bindValidatorWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCaller{contract: contract}, nil
}

// NewValidatorWalletTransactor creates a new write-only instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletTransactor, error) {
	contract, err := bindValidatorWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletTransactor{contract: contract}, nil
}

// NewValidatorWalletFilterer creates a new log filterer instance of ValidatorWallet, bound to a specific deployed contract.
func NewValidatorWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletFilterer, error) {
	contract, err := bindValidatorWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletFilterer{contract: contract}, nil
}

// bindValidatorWallet binds a generic wrapper to an already deployed contract.
func bindValidatorWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorWalletMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.ValidatorWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ValidatorWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWallet *ValidatorWalletCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWallet *ValidatorWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.contract.Transact(opts, method, params...)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) AllowedExecutorDestinations(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "allowedExecutorDestinations", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// AllowedExecutorDestinations is a free data retrieval call binding the contract method 0x193c8edd.
//
// Solidity: function allowedExecutorDestinations(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) AllowedExecutorDestinations(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.AllowedExecutorDestinations(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCaller) Executors(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "executors", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Executors is a free data retrieval call binding the contract method 0x9ac2a011.
//
// Solidity: function executors(address ) view returns(bool)
func (_ValidatorWallet *ValidatorWalletCallerSession) Executors(arg0 common.Address) (bool, error) {
	return _ValidatorWallet.Contract.Executors(&_ValidatorWallet.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWallet *ValidatorWalletCallerSession) Owner() (common.Address, error) {
	return _ValidatorWallet.Contract.Owner(&_ValidatorWallet.CallOpts)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCaller) ValidateExecuteTransaction(opts *bind.CallOpts, destination common.Address) error {
	var out []interface{}
	err := _ValidatorWallet.contract.Call(opts, &out, "validateExecuteTransaction", destination)

	if err != nil {
		return err
	}

	return err

}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ValidateExecuteTransaction is a free data retrieval call binding the contract method 0x9be7bbd2.
//
// Solidity: function validateExecuteTransaction(address destination) view returns()
func (_ValidatorWallet *ValidatorWalletCallerSession) ValidateExecuteTransaction(destination common.Address) error {
	return _ValidatorWallet.Contract.ValidateExecuteTransaction(&_ValidatorWallet.CallOpts, destination)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransaction(opts *bind.TransactOpts, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransaction", data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xce1d571f.
//
// Solidity: function executeTransaction(bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransaction(data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransaction(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionWithGasRefunder is a paid mutator transaction binding the contract method 0x097da1f8.
//
// Solidity: function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionWithGasRefunder(gasRefunder common.Address, data []byte, destination common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactions(opts *bind.TransactOpts, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactions", data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactions is a paid mutator transaction binding the contract method 0x72f45866.
//
// Solidity: function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactions(data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactions(&_ValidatorWallet.TransactOpts, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) ExecuteTransactionsWithGasRefunder(opts *bind.TransactOpts, gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "executeTransactionsWithGasRefunder", gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// ExecuteTransactionsWithGasRefunder is a paid mutator transaction binding the contract method 0xc179f1d9.
//
// Solidity: function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) ExecuteTransactionsWithGasRefunder(gasRefunder common.Address, data [][]byte, destination []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.ExecuteTransactionsWithGasRefunder(&_ValidatorWallet.TransactOpts, gasRefunder, data, destination, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Initialize(opts *bind.TransactOpts, _executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "initialize", _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Initialize(_executor common.Address, _owner common.Address, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Initialize(&_ValidatorWallet.TransactOpts, _executor, _owner, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.RenounceOwnership(&_ValidatorWallet.TransactOpts)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetAllowedExecutorDestinations(opts *bind.TransactOpts, destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setAllowedExecutorDestinations", destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetAllowedExecutorDestinations is a paid mutator transaction binding the contract method 0x3a7c721a.
//
// Solidity: function setAllowedExecutorDestinations(address[] destinations, bool[] isSet) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetAllowedExecutorDestinations(destinations []common.Address, isSet []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetAllowedExecutorDestinations(&_ValidatorWallet.TransactOpts, destinations, isSet)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) SetExecutor(opts *bind.TransactOpts, newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "setExecutor", newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// SetExecutor is a paid mutator transaction binding the contract method 0x0a2435f8.
//
// Solidity: function setExecutor(address[] newExecutors, bool[] isExecutor) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) SetExecutor(newExecutors []common.Address, isExecutor []bool) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.SetExecutor(&_ValidatorWallet.TransactOpts, newExecutors, isExecutor)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.TransferOwnership(&_ValidatorWallet.TransactOpts, newOwner)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactor) WithdrawEth(opts *bind.TransactOpts, amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.contract.Transact(opts, "withdrawEth", amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// WithdrawEth is a paid mutator transaction binding the contract method 0xa158657c.
//
// Solidity: function withdrawEth(uint256 amount, address destination) returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) WithdrawEth(amount *big.Int, destination common.Address) (*types.Transaction, error) {
	return _ValidatorWallet.Contract.WithdrawEth(&_ValidatorWallet.TransactOpts, amount, destination)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWallet.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorWallet *ValidatorWalletTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorWallet.Contract.Receive(&_ValidatorWallet.TransactOpts)
}

// ValidatorWalletAllowedExecutorDestinationsUpdatedIterator is returned from FilterAllowedExecutorDestinationsUpdated and is used to iterate over the raw logs and unpacked data for AllowedExecutorDestinationsUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdatedIterator struct {
	Event *ValidatorWalletAllowedExecutorDestinationsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletAllowedExecutorDestinationsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletAllowedExecutorDestinationsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletAllowedExecutorDestinationsUpdated represents a AllowedExecutorDestinationsUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletAllowedExecutorDestinationsUpdated struct {
	Destination common.Address
	IsSet       bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAllowedExecutorDestinationsUpdated is a free log retrieval operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterAllowedExecutorDestinationsUpdated(opts *bind.FilterOpts, destination []common.Address) (*ValidatorWalletAllowedExecutorDestinationsUpdatedIterator, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletAllowedExecutorDestinationsUpdatedIterator{contract: _ValidatorWallet.contract, event: "AllowedExecutorDestinationsUpdated", logs: logs, sub: sub}, nil
}

// WatchAllowedExecutorDestinationsUpdated is a free log subscription operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchAllowedExecutorDestinationsUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletAllowedExecutorDestinationsUpdated, destination []common.Address) (event.Subscription, error) {

	var destinationRule []interface{}
	for _, destinationItem := range destination {
		destinationRule = append(destinationRule, destinationItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "AllowedExecutorDestinationsUpdated", destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllowedExecutorDestinationsUpdated is a log parse operation binding the contract event 0xab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a4.
//
// Solidity: event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseAllowedExecutorDestinationsUpdated(log types.Log) (*ValidatorWalletAllowedExecutorDestinationsUpdated, error) {
	event := new(ValidatorWalletAllowedExecutorDestinationsUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "AllowedExecutorDestinationsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletExecutorUpdatedIterator is returned from FilterExecutorUpdated and is used to iterate over the raw logs and unpacked data for ExecutorUpdated events raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdatedIterator struct {
	Event *ValidatorWalletExecutorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletExecutorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletExecutorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletExecutorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletExecutorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletExecutorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletExecutorUpdated represents a ExecutorUpdated event raised by the ValidatorWallet contract.
type ValidatorWalletExecutorUpdated struct {
	Executor   common.Address
	IsExecutor bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecutorUpdated is a free log retrieval operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterExecutorUpdated(opts *bind.FilterOpts, executor []common.Address) (*ValidatorWalletExecutorUpdatedIterator, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletExecutorUpdatedIterator{contract: _ValidatorWallet.contract, event: "ExecutorUpdated", logs: logs, sub: sub}, nil
}

// WatchExecutorUpdated is a free log subscription operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchExecutorUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletExecutorUpdated, executor []common.Address) (event.Subscription, error) {

	var executorRule []interface{}
	for _, executorItem := range executor {
		executorRule = append(executorRule, executorItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "ExecutorUpdated", executorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletExecutorUpdated)
				if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutorUpdated is a log parse operation binding the contract event 0x9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2.
//
// Solidity: event ExecutorUpdated(address indexed executor, bool isExecutor)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseExecutorUpdated(log types.Log) (*ValidatorWalletExecutorUpdated, error) {
	event := new(ValidatorWalletExecutorUpdated)
	if err := _ValidatorWallet.contract.UnpackLog(event, "ExecutorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ValidatorWallet contract.
type ValidatorWalletInitializedIterator struct {
	Event *ValidatorWalletInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletInitialized represents a Initialized event raised by the ValidatorWallet contract.
type ValidatorWalletInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterInitialized(opts *bind.FilterOpts) (*ValidatorWalletInitializedIterator, error) {

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletInitializedIterator{contract: _ValidatorWallet.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ValidatorWalletInitialized) (event.Subscription, error) {

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletInitialized)
				if err := _ValidatorWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseInitialized(log types.Log) (*ValidatorWalletInitialized, error) {
	event := new(ValidatorWalletInitialized)
	if err := _ValidatorWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferredIterator struct {
	Event *ValidatorWalletOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWallet contract.
type ValidatorWalletOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletOwnershipTransferredIterator{contract: _ValidatorWallet.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWallet.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletOwnershipTransferred)
				if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWallet *ValidatorWalletFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletOwnershipTransferred, error) {
	event := new(ValidatorWalletOwnershipTransferred)
	if err := _ValidatorWallet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorMetaData contains all meta data concerning the ValidatorWalletCreator contract.
var ValidatorWalletCreatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialExecutorAllowedDests\",\"type\":\"address[]\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"setTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061001a33610068565b604051610026906100b8565b604051809103906000f080158015610042573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03929092169190911790556100c5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611c6880611e3b83390190565b611d67806100d46000396000f3fe60806040523480156200001157600080fd5b50600436106200007b5760003560e01c806389c716d1116200005657806389c716d114620000d35780638da5cb5b14620000ea578063f2fde38b14620000fc57600080fd5b80631cf89b4b14620000805780636f2ddd9314620000b3578063715018a614620000c7575b600080fd5b62000097620000913660046200052d565b62000113565b6040516001600160a01b03909116815260200160405180910390f35b60015462000097906001600160a01b031681565b620000d1620002fe565b005b620000d1620000e4366004620005c4565b62000316565b6000546001600160a01b031662000097565b620000d16200010d366004620005c4565b6200037f565b6040516000903390819083906200012a9062000511565b604051809103906000f08015801562000147573d6000803e3d6000fd5b506001546040519192506000916001600160a01b039091169083906200016d906200051f565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f080158015620001b0573d6000803e3d6000fd5b506040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192509083169063f2fde38b90602401600060405180830381600087803b1580156200021257600080fd5b505af115801562000227573d6000803e3d6000fd5b50506040517f77a24f360000000000000000000000000000000000000000000000000000000081526001600160a01b03841692506377a24f3691506200027890879087908c908c90600401620005e9565b600060405180830381600087803b1580156200029357600080fd5b505af1158015620002a8573d6000803e3d6000fd5b50506040516001600160a01b038581168252808716935087811692508416907f7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee489060200160405180910390a49695505050505050565b6200030862000433565b620003146000620004a9565b565b6200032062000433565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517f6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc90600090a150565b6200038962000433565b6001600160a01b03811662000425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6200043081620004a9565b50565b6000546001600160a01b0316331462000314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200041c565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61080b806200065483390190565b610ed38062000e5f83390190565b600080602083850312156200054157600080fd5b823567ffffffffffffffff808211156200055a57600080fd5b818501915085601f8301126200056f57600080fd5b8135818111156200057f57600080fd5b8660208260051b85010111156200059557600080fd5b60209290920196919550909350505050565b80356001600160a01b0381168114620005bf57600080fd5b919050565b600060208284031215620005d757600080fd5b620005e282620005a7565b9392505050565b6000606082016001600160a01b038088168452602081881681860152606060408601528286845260808601905087935060005b878110156200064557836200063186620005a7565b16825293820193908201906001016200061c565b50999850505050505050505056fe608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61078d8061007e6000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead1461016457600080fd5b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610579565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d161022e565b005b3480156100df57600080fd5b506100d16100ee36600461059d565b610242565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f366004610605565b6102c3565b34801561013057600080fd5b506100d161013f36600461059d565b61034b565b34801561015057600080fd5b506100d161015f366004610579565b61039a565b34801561017057600080fd5b506100a061017f366004610579565b610449565b6000806000836001600160a01b03166040516101c3907f5c60da1b00000000000000000000000000000000000000000000000000000000815260040190565b600060405180830381855afa9150503d80600081146101fe576040519150601f19603f3d011682016040523d82523d6000602084013e610203565b606091505b50915091508161021257600080fd5b8080602001905181019061022691906106db565b949350505050565b610236610488565b61024060006104fc565b565b61024a610488565b6040517f8f2839700000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050505050565b6102cb610488565b6040517f4f1ef2860000000000000000000000000000000000000000000000000000000081526001600160a01b03841690634f1ef28690349061031490869086906004016106f8565b6000604051808303818588803b15801561032d57600080fd5b505af1158015610341573d6000803e3d6000fd5b5050505050505050565b610353610488565b6040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152831690633659cfe69060240161028d565b6103a2610488565b6001600160a01b03811661043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610446816104fc565b50565b6000806000836001600160a01b03166040516101c3907ff851a44000000000000000000000000000000000000000000000000000000000815260040190565b6000546001600160a01b03163314610240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610434565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461044657600080fd5b60006020828403121561058b57600080fd5b813561059681610564565b9392505050565b600080604083850312156105b057600080fd5b82356105bb81610564565b915060208301356105cb81610564565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561061a57600080fd5b833561062581610564565b9250602084013561063581610564565b9150604084013567ffffffffffffffff8082111561065257600080fd5b818601915086601f83011261066657600080fd5b813581811115610678576106786105d6565b604051601f8201601f19908116603f011681019083821181831017156106a0576106a06105d6565b816040528281528960208487010111156106b957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156106ed57600080fd5b815161059681610564565b6001600160a01b038316815260006020604081840152835180604085015260005b8181101561073557858101830151858201606001528201610719565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220b5f17b9b80290312697ad0c26141bee28c1a1e448364e9044054c3ec2b5708bd64736f6c63430008110033608060405260405162000ed338038062000ed3833981016040819052620000269162000487565b828162000036828260006200004d565b50620000449050826200008a565b505050620005ba565b6200005883620000e5565b600082511180620000665750805b1562000085576200008383836200012760201b6200023e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000b562000156565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000e2816200018f565b50565b620000f08162000244565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200014f838360405180606001604052806027815260200162000eac60279139620002f8565b9392505050565b60006200018060008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b546001600160a01b0316919050565b6001600160a01b038116620001fa5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200022360008051602062000e8c83398151915260001b620003de60201b620001fa1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200025a81620003e160201b6200026a1760201c565b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620001f1565b80620002237f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003de60201b620001fa1760201c565b60606001600160a01b0384163b620003625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620001f1565b600080856001600160a01b0316856040516200037f919062000567565b600060405180830381855af49150503d8060008114620003bc576040519150601f19603f3d011682016040523d82523d6000602084013e620003c1565b606091505b509092509050620003d4828286620003f0565b9695505050505050565b90565b6001600160a01b03163b151590565b60608315620004015750816200014f565b825115620004125782518084602001fd5b8160405162461bcd60e51b8152600401620001f1919062000585565b80516001600160a01b03811681146200044657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200047e57818101518382015260200162000464565b50506000910152565b6000806000606084860312156200049d57600080fd5b620004a8846200042e565b9250620004b8602085016200042e565b60408501519092506001600160401b0380821115620004d657600080fd5b818601915086601f830112620004eb57600080fd5b8151818111156200050057620005006200044b565b604051601f8201601f19908116603f011681019083821181831017156200052b576200052b6200044b565b816040528281528960208487010111156200054557600080fd5b6200055883602083016020880162000461565b80955050505050509250925092565b600082516200057b81846020870162000461565b9190910192915050565b6020815260008251806020840152620005a681604085016020870162000461565b601f01601f19169190910160400192915050565b6108c280620005ca6000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100d9578063f851a440146100f95761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61010e565b005b61006b61010e565b34801561008157600080fd5b5061006b610090366004610736565b610128565b61006b6100a3366004610751565b610165565b3480156100b457600080fd5b506100bd6101cc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e557600080fd5b5061006b6100f4366004610736565b6101fd565b34801561010557600080fd5b506100bd61021d565b610116610279565b610126610121610329565b610333565b565b610130610357565b6001600160a01b0316330361015d5761015a8160405180602001604052806000815250600061038a565b50565b61015a61010e565b61016d610357565b6001600160a01b031633036101c4576101bf8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061038a915050565b505050565b6101bf61010e565b60006101d6610357565b6001600160a01b031633036101f2576101ed610329565b905090565b6101fa61010e565b90565b610205610357565b6001600160a01b0316330361015d5761015a816103b5565b6000610227610357565b6001600160a01b031633036101f2576101ed610357565b6060610263838360405180606001604052806027815260200161086660279139610409565b9392505050565b6001600160a01b03163b151590565b610281610357565b6001600160a01b031633036101265760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60006101ed6104fd565b3660008037600080366000845af43d6000803e808015610352573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039383610525565b6000825111806103a05750805b156101bf576103af838361023e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103de610357565b604080516001600160a01b03928316815291841660208301520160405180910390a161015a81610565565b60606001600160a01b0384163b6104885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610320565b600080856001600160a01b0316856040516104a391906107f8565b600060405180830381855af49150503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50915091506104f382828661063d565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61037b565b61052e81610676565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105e15760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610320565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b6060831561064c575081610263565b82511561065c5782518084602001fd5b8160405162461bcd60e51b81526004016103209190610814565b6001600160a01b0381163b6106f35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610320565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610604565b80356001600160a01b038116811461073157600080fd5b919050565b60006020828403121561074857600080fd5b6102638261071a565b60008060006040848603121561076657600080fd5b61076f8461071a565b9250602084013567ffffffffffffffff8082111561078c57600080fd5b818601915086601f8301126107a057600080fd5b8135818111156107af57600080fd5b8760208285010111156107c157600080fd5b6020830194508093505050509250925092565b60005b838110156107ef5781810151838201526020016107d7565b50506000910152565b6000825161080a8184602087016107d4565b9190910192915050565b60208152600082518060208401526108338160408501602087016107d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c1888b421836e473bfc3e72d153dc5c76569ce769e37cfa444506490e142daa564736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122090d6cdebff9ab6aa2422d97f8289c2278f17ed1572a9bedd7afff8c7fbca7f3764736f6c6343000811003360c0604052306080526202000060a05234801561001b57600080fd5b5060805160a051611c206100486000396000818161055d015261115f01526000610a350152611c206000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063a158657c11610059578063a158657c14610247578063c179f1d914610267578063ce1d571f1461027a578063f2fde38b1461028d57600080fd5b80638da5cb5b146101cf5780639ac2a011146101f75780639be7bbd21461022757600080fd5b80633a7c721a116100bb5780633a7c721a14610167578063715018a61461018757806372f458661461019c57806377a24f36146101af57600080fd5b8063097da1f8146100ed5780630a2435f814610102578063193c8edd1461012257600080fd5b366100e857005b600080fd5b6101006100fb366004611530565b6102ad565b005b34801561010e57600080fd5b5061010061011d3660046115e5565b610663565b34801561012e57600080fd5b5061015261013d366004611651565b60666020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561017357600080fd5b506101006101823660046115e5565b6107e6565b34801561019357600080fd5b50610100610930565b6101006101aa366004611675565b610944565b3480156101bb57600080fd5b506101006101ca36600461170f565b61095c565b3480156101db57600080fd5b506033546040516001600160a01b03909116815260200161015e565b34801561020357600080fd5b50610152610212366004611651565b60656020526000908152604090205460ff1681565b34801561023357600080fd5b50610100610242366004611651565b610c73565b34801561025357600080fd5b50610100610262366004611768565b610cfe565b610100610275366004611798565b610da3565b610100610288366004611845565b611267565b34801561029957600080fd5b506101006102a8366004611651565b61127b565b3360009081526065602052604090205460ff161580156102d857506033546001600160a01b03163314155b1561032257335b6040517ff26aea8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b846000805a90508515610386576001600160a01b0385163b6103865760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610319565b61038f85610c73565b6000856001600160a01b03168589896040516103ac9291906118a2565b60006040518083038185875af1925050503d80600081146103e9576040519150601f19603f3d011682016040523d82523d6000602084013e6103ee565b606091505b5050905080610404576040513d806000833e8082fd5b506001600160a01b0383161561065957366000602061042483601f6118c8565b61042e91906118e1565b905061020061043e6002836119e7565b61044891906118e1565b6104538260066119f6565b61045d91906118c8565b61046790846118c8565b925033321461047957600091506105ac565b6001600160a01b038416156105ac57836001600160a01b031663e83a2d826040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156104e757506040513d6000823e601f3d908101601f191682016040526104e49190810190611a23565b60015b156105ac578051156105aa576000856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190611ae1565b905048817f0000000000000000000000000000000000000000000000000000000000000000845161058891906119f6565b61059291906119f6565b61059c91906118e1565b6105a690866118c8565b9450505b505b846001600160a01b031663e3db8a49335a6105c79087611afa565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af1158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190611b1b565b5050505b5050505050505050565b61066b611308565b8281146106955760405163088253c360e11b81526004810184905260248101829052604401610319565b60005b67ffffffffffffffff81168411156107df5782828267ffffffffffffffff168181106106c6576106c6611b38565b90506020020160208101906106db9190611b4e565b6065600087878567ffffffffffffffff168181106106fb576106fb611b38565b90506020020160208101906107109190611651565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055848467ffffffffffffffff831681811061075457610754611b38565b90506020020160208101906107699190611651565b6001600160a01b03167f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea284848467ffffffffffffffff168181106107af576107af611b38565b90506020020160208101906107c49190611b4e565b604051901515815260200160405180910390a2600101610698565b5050505050565b6107ee611308565b8281146108185760405163088253c360e11b81526004810184905260248101829052604401610319565b60005b838110156107df5782828281811061083557610835611b38565b905060200201602081019061084a9190611b4e565b6066600087878581811061086057610860611b38565b90506020020160208101906108759190611651565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558484828181106108af576108af611b38565b90506020020160208101906108c49190611651565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a484848481811061090057610900611b38565b90506020020160208101906109159190611b4e565b604051901515815260200160405180910390a260010161081b565b610938611308565b6109426000611362565b565b6109546000878787878787610da3565b505050505050565b600054610100900460ff161580801561097c5750600054600160ff909116105b806109965750303b158015610996575060005460ff166001145b610a085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610319565b6000805460ff191660011790558015610a2b576000805461ff0019166101001790555b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ac95760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610319565b610ad16113cc565b610ada8461127b565b6001600160a01b038516600081815260656020908152604091829020805460ff1916600190811790915591519182527f9fdbc2d48b8a0db2f62663bf9312ad02f5b1f6414ad600b55a247d09aeec3ea2910160405180910390a260005b67ffffffffffffffff8116831115610c265760016066600086868567ffffffffffffffff16818110610b6b57610b6b611b38565b9050602002016020810190610b809190611651565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055838367ffffffffffffffff8316818110610bc457610bc4611b38565b9050602002016020810190610bd99190611651565b6001600160a01b03167fab063fe575c4df359aaf3733bcf10706bacfdd24557e670a2c1cba126ae4d8a46001604051610c16911515815260200190565b60405180910390a2600101610b37565b5080156107df576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6001600160a01b03811660009081526066602052604090205460ff16158015610ca757506033546001600160a01b03163314155b15610cfb576033546040517f41fc6f8a0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529082166044820152606401610319565b50565b610d06611308565b6000816001600160a01b03168360405160006040518083038185875af1925050503d8060008114610d53576040519150601f19603f3d011682016040523d82523d6000602084013e610d58565b606091505b5050905080610d9e576040517f7edbb4980000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610319565b505050565b3360009081526065602052604090205460ff16158015610dce57506033546001600160a01b03163314155b15610dd957336102df565b866000805a905087868114610e0b5760405163088253c360e11b81526004810182905260248101889052604401610319565b808514610e355760405163088253c360e11b81526004810182905260248101869052604401610319565b60005b818110156110055760008b8b83818110610e5457610e54611b38565b9050602002810190610e669190611b6b565b90501115610ef357610ea7898983818110610e8357610e83611b38565b9050602002016020810190610e989190611651565b6001600160a01b03163b151590565b610ef35760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f434f44455f41545f4144445200000000000000000000000000000000006044820152606401610319565b610f1d898983818110610f0857610f08611b38565b90506020020160208101906102429190611651565b6000898983818110610f3157610f31611b38565b9050602002016020810190610f469190611651565b6001600160a01b0316888884818110610f6157610f61611b38565b905060200201358d8d85818110610f7a57610f7a611b38565b9050602002810190610f8c9190611b6b565b604051610f9a9291906118a2565b60006040518083038185875af1925050503d8060008114610fd7576040519150601f19603f3d011682016040523d82523d6000602084013e610fdc565b606091505b5050905080610ff2576040513d806000833e8082fd5b5080610ffd81611bd0565b915050610e38565b50506001600160a01b0383161561125b57366000602061102683601f6118c8565b61103091906118e1565b90506102006110406002836119e7565b61104a91906118e1565b6110558260066119f6565b61105f91906118c8565b61106990846118c8565b925033321461107b57600091506111ae565b6001600160a01b038416156111ae57836001600160a01b031663e83a2d826040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156110e957506040513d6000823e601f3d908101601f191682016040526110e69190810190611a23565b60015b156111ae578051156111ac576000856001600160a01b0316631f6d6ef76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111599190611ae1565b905048817f0000000000000000000000000000000000000000000000000000000000000000845161118a91906119f6565b61119491906119f6565b61119e91906118e1565b6111a890866118c8565b9450505b505b846001600160a01b031663e3db8a49335a6111c99087611afa565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604481018590526064016020604051808303816000875af1158015611233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112579190611b1b565b5050505b50505050505050505050565b6112756000858585856102ad565b50505050565b611283611308565b6001600160a01b0381166112ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610319565b610cfb81611362565b6033546001600160a01b031633146109425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610319565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610319565b610942600054610100900460ff166114c95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610319565b61094233611362565b6001600160a01b0381168114610cfb57600080fd5b60008083601f8401126114f957600080fd5b50813567ffffffffffffffff81111561151157600080fd5b60208301915083602082850101111561152957600080fd5b9250929050565b60008060008060006080868803121561154857600080fd5b8535611553816114d2565b9450602086013567ffffffffffffffff81111561156f57600080fd5b61157b888289016114e7565b909550935050604086013561158f816114d2565b949793965091946060013592915050565b60008083601f8401126115b257600080fd5b50813567ffffffffffffffff8111156115ca57600080fd5b6020830191508360208260051b850101111561152957600080fd5b600080600080604085870312156115fb57600080fd5b843567ffffffffffffffff8082111561161357600080fd5b61161f888389016115a0565b9096509450602087013591508082111561163857600080fd5b50611645878288016115a0565b95989497509550505050565b60006020828403121561166357600080fd5b813561166e816114d2565b9392505050565b6000806000806000806060878903121561168e57600080fd5b863567ffffffffffffffff808211156116a657600080fd5b6116b28a838b016115a0565b909850965060208901359150808211156116cb57600080fd5b6116d78a838b016115a0565b909650945060408901359150808211156116f057600080fd5b506116fd89828a016115a0565b979a9699509497509295939492505050565b6000806000806060858703121561172557600080fd5b8435611730816114d2565b93506020850135611740816114d2565b9250604085013567ffffffffffffffff81111561175c57600080fd5b611645878288016115a0565b6000806040838503121561177b57600080fd5b82359150602083013561178d816114d2565b809150509250929050565b60008060008060008060006080888a0312156117b357600080fd5b87356117be816114d2565b9650602088013567ffffffffffffffff808211156117db57600080fd5b6117e78b838c016115a0565b909850965060408a013591508082111561180057600080fd5b61180c8b838c016115a0565b909650945060608a013591508082111561182557600080fd5b506118328a828b016115a0565b989b979a50959850939692959293505050565b6000806000806060858703121561185b57600080fd5b843567ffffffffffffffff81111561187257600080fd5b61187e878288016114e7565b9095509350506020850135611892816114d2565b9396929550929360400135925050565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156118db576118db6118b2565b92915050565b6000826118fe57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561193e578160001904821115611924576119246118b2565b8085161561193157918102915b93841c9390800290611908565b509250929050565b600082611955575060016118db565b81611962575060006118db565b816001811461197857600281146119825761199e565b60019150506118db565b60ff841115611993576119936118b2565b50506001821b6118db565b5060208310610133831016604e8410600b84101617156119c1575081810a6118db565b6119cb8383611903565b80600019048211156119df576119df6118b2565b029392505050565b600061166e60ff841683611946565b80820281158282048414176118db576118db6118b2565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215611a3657600080fd5b825167ffffffffffffffff80821115611a4e57600080fd5b818501915085601f830112611a6257600080fd5b815181811115611a7457611a74611a0d565b8060051b604051601f19603f83011681018181108582111715611a9957611a99611a0d565b604052918252848201925083810185019188831115611ab757600080fd5b938501935b82851015611ad557845184529385019392850192611abc565b98975050505050505050565b600060208284031215611af357600080fd5b5051919050565b818103818111156118db576118db6118b2565b8015158114610cfb57600080fd5b600060208284031215611b2d57600080fd5b815161166e81611b0d565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611b6057600080fd5b813561166e81611b0d565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611ba057600080fd5b83018035915067ffffffffffffffff821115611bbb57600080fd5b60200191503681900382131561152957600080fd5b60006000198203611be357611be36118b2565b506001019056fea2646970667358221220fb2d7ed92edd1a982da3b39e1504fa34f5da7358ee8c55e3eb21f39c59c15e3564736f6c63430008110033",
}

// ValidatorWalletCreatorABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorWalletCreatorMetaData.ABI instead.
var ValidatorWalletCreatorABI = ValidatorWalletCreatorMetaData.ABI

// ValidatorWalletCreatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorWalletCreatorMetaData.Bin instead.
var ValidatorWalletCreatorBin = ValidatorWalletCreatorMetaData.Bin

// DeployValidatorWalletCreator deploys a new Ethereum contract, binding an instance of ValidatorWalletCreator to it.
func DeployValidatorWalletCreator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorWalletCreator, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorWalletCreatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// ValidatorWalletCreator is an auto generated Go binding around an Ethereum contract.
type ValidatorWalletCreator struct {
	ValidatorWalletCreatorCaller     // Read-only binding to the contract
	ValidatorWalletCreatorTransactor // Write-only binding to the contract
	ValidatorWalletCreatorFilterer   // Log filterer for contract events
}

// ValidatorWalletCreatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorWalletCreatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorWalletCreatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorWalletCreatorSession struct {
	Contract     *ValidatorWalletCreator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorWalletCreatorCallerSession struct {
	Contract *ValidatorWalletCreatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ValidatorWalletCreatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorWalletCreatorTransactorSession struct {
	Contract     *ValidatorWalletCreatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ValidatorWalletCreatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorWalletCreatorRaw struct {
	Contract *ValidatorWalletCreator // Generic contract binding to access the raw methods on
}

// ValidatorWalletCreatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorCallerRaw struct {
	Contract *ValidatorWalletCreatorCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorWalletCreatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorWalletCreatorTransactorRaw struct {
	Contract *ValidatorWalletCreatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorWalletCreator creates a new instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreator(address common.Address, backend bind.ContractBackend) (*ValidatorWalletCreator, error) {
	contract, err := bindValidatorWalletCreator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreator{ValidatorWalletCreatorCaller: ValidatorWalletCreatorCaller{contract: contract}, ValidatorWalletCreatorTransactor: ValidatorWalletCreatorTransactor{contract: contract}, ValidatorWalletCreatorFilterer: ValidatorWalletCreatorFilterer{contract: contract}}, nil
}

// NewValidatorWalletCreatorCaller creates a new read-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorCaller(address common.Address, caller bind.ContractCaller) (*ValidatorWalletCreatorCaller, error) {
	contract, err := bindValidatorWalletCreator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorCaller{contract: contract}, nil
}

// NewValidatorWalletCreatorTransactor creates a new write-only instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorWalletCreatorTransactor, error) {
	contract, err := bindValidatorWalletCreator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTransactor{contract: contract}, nil
}

// NewValidatorWalletCreatorFilterer creates a new log filterer instance of ValidatorWalletCreator, bound to a specific deployed contract.
func NewValidatorWalletCreatorFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorWalletCreatorFilterer, error) {
	contract, err := bindValidatorWalletCreator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorFilterer{contract: contract}, nil
}

// bindValidatorWalletCreator binds a generic wrapper to an already deployed contract.
func bindValidatorWalletCreator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidatorWalletCreatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.ValidatorWalletCreatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorWalletCreator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Owner() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Owner(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCaller) Template(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorWalletCreator.contract.Call(opts, &out, "template")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// Template is a free data retrieval call binding the contract method 0x6f2ddd93.
//
// Solidity: function template() view returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorCallerSession) Template() (common.Address, error) {
	return _ValidatorWalletCreator.Contract.Template(&_ValidatorWalletCreator.CallOpts)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) CreateWallet(opts *bind.TransactOpts, initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "createWallet", initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x1cf89b4b.
//
// Solidity: function createWallet(address[] initialExecutorAllowedDests) returns(address)
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) CreateWallet(initialExecutorAllowedDests []common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.CreateWallet(&_ValidatorWalletCreator.TransactOpts, initialExecutorAllowedDests)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.RenounceOwnership(&_ValidatorWalletCreator.TransactOpts)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) SetTemplate(opts *bind.TransactOpts, _template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "setTemplate", _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// SetTemplate is a paid mutator transaction binding the contract method 0x89c716d1.
//
// Solidity: function setTemplate(address _template) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) SetTemplate(_template common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.SetTemplate(&_ValidatorWalletCreator.TransactOpts, _template)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ValidatorWalletCreator *ValidatorWalletCreatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorWalletCreator.Contract.TransferOwnership(&_ValidatorWalletCreator.TransactOpts, newOwner)
}

// ValidatorWalletCreatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferredIterator struct {
	Event *ValidatorWalletCreatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorWalletCreatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorOwnershipTransferredIterator{contract: _ValidatorWalletCreator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorOwnershipTransferred)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseOwnershipTransferred(log types.Log) (*ValidatorWalletCreatorOwnershipTransferred, error) {
	event := new(ValidatorWalletCreatorOwnershipTransferred)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorTemplateUpdatedIterator is returned from FilterTemplateUpdated and is used to iterate over the raw logs and unpacked data for TemplateUpdated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdatedIterator struct {
	Event *ValidatorWalletCreatorTemplateUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorTemplateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorTemplateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorTemplateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorTemplateUpdated represents a TemplateUpdated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorTemplateUpdated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTemplateUpdated is a free log retrieval operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterTemplateUpdated(opts *bind.FilterOpts) (*ValidatorWalletCreatorTemplateUpdatedIterator, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorTemplateUpdatedIterator{contract: _ValidatorWalletCreator.contract, event: "TemplateUpdated", logs: logs, sub: sub}, nil
}

// WatchTemplateUpdated is a free log subscription operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchTemplateUpdated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorTemplateUpdated) (event.Subscription, error) {

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "TemplateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorTemplateUpdated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTemplateUpdated is a log parse operation binding the contract event 0x6eb26f176dd9180849dd4874d3530de0e5c1f62a6e6798d34e3abfc11f1db2cc.
//
// Solidity: event TemplateUpdated()
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseTemplateUpdated(log types.Log) (*ValidatorWalletCreatorTemplateUpdated, error) {
	event := new(ValidatorWalletCreatorTemplateUpdated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "TemplateUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorWalletCreatorWalletCreatedIterator is returned from FilterWalletCreated and is used to iterate over the raw logs and unpacked data for WalletCreated events raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreatedIterator struct {
	Event *ValidatorWalletCreatorWalletCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorWalletCreatorWalletCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorWalletCreatorWalletCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorWalletCreatorWalletCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorWalletCreatorWalletCreated represents a WalletCreated event raised by the ValidatorWalletCreator contract.
type ValidatorWalletCreatorWalletCreated struct {
	WalletAddress   common.Address
	ExecutorAddress common.Address
	OwnerAddress    common.Address
	AdminProxy      common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWalletCreated is a free log retrieval operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) FilterWalletCreated(opts *bind.FilterOpts, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (*ValidatorWalletCreatorWalletCreatedIterator, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.FilterLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorWalletCreatorWalletCreatedIterator{contract: _ValidatorWalletCreator.contract, event: "WalletCreated", logs: logs, sub: sub}, nil
}

// WatchWalletCreated is a free log subscription operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) WatchWalletCreated(opts *bind.WatchOpts, sink chan<- *ValidatorWalletCreatorWalletCreated, walletAddress []common.Address, executorAddress []common.Address, ownerAddress []common.Address) (event.Subscription, error) {

	var walletAddressRule []interface{}
	for _, walletAddressItem := range walletAddress {
		walletAddressRule = append(walletAddressRule, walletAddressItem)
	}
	var executorAddressRule []interface{}
	for _, executorAddressItem := range executorAddress {
		executorAddressRule = append(executorAddressRule, executorAddressItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ValidatorWalletCreator.contract.WatchLogs(opts, "WalletCreated", walletAddressRule, executorAddressRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorWalletCreatorWalletCreated)
				if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWalletCreated is a log parse operation binding the contract event 0x7a6fe39e62e2aeedf6430893f8ce67c6aa08c92d3c7d66c83706057ee178ee48.
//
// Solidity: event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)
func (_ValidatorWalletCreator *ValidatorWalletCreatorFilterer) ParseWalletCreated(log types.Log) (*ValidatorWalletCreatorWalletCreated, error) {
	event := new(ValidatorWalletCreatorWalletCreated)
	if err := _ValidatorWalletCreator.contract.UnpackLog(event, "WalletCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
